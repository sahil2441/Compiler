Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    RETURN
    STRINGCONSTANT
    NOTEQUALS
    VOID
    INTEGERCONSTANT
    WHILE
    NEW
    DIV
    NULL
    TRUE
    MINUS
    MULT
    COMMENT
    GEQ
    RPAREN
    LEQ
    LT
    CONTINUE
    PLUS
    DOT
    COLON
    GT
    FOR
    SPACE
    PLUSPLUS
    ASSIGN
    EQUALS
    ELSE
    INSCANINT
    LPAREN
    OUTPRINT
    MINUSMINUS
    INSCANFLOAT
    IF
    AND
    FLOATCONSTANT
    FALSE
    BLOCKCOMMENT
    OR
    BREAK
    THIS
    NOT
    SUPER

Grammar

Rule 0     S' -> classdecl
Rule 1     classdecl -> CLASS IDENTIFIER LCURLY class_body_decl RCURLY
Rule 2     classdecl -> CLASS IDENTIFIER EXTENDS IDENTIFIER LCURLY class_body_decl RCURLY
Rule 3     class_body_decl -> empty
Rule 4     class_body_decl -> field_decl
Rule 5     field_decl -> modifier var_decl
Rule 6     modifier -> PUBLIC
Rule 7     modifier -> PRIVATE
Rule 8     modifier -> STATIC
Rule 9     modifier -> PUBLIC STATIC
Rule 10    modifier -> PRIVATE STATIC
Rule 11    modifier -> empty
Rule 12    var_decl -> type variables SEMICOLON
Rule 13    type -> INT
Rule 14    type -> FLOAT
Rule 15    type -> BOOLEAN
Rule 16    type -> IDENTIFIER
Rule 17    variables -> IDENTIFIER
Rule 18    variables -> COMMA IDENTIFIER variables
Rule 19    variables -> COMMA IDENTIFIER LSQUARE RSQUARE variables
Rule 20    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
BLOCKCOMMENT         : 
BOOLEAN              : 15
BREAK                : 
CLASS                : 1 2
COLON                : 
COMMA                : 18 19
COMMENT              : 
CONTINUE             : 
DIV                  : 
DO                   : 
DOT                  : 
ELSE                 : 
EQUALS               : 
EXTENDS              : 2
FALSE                : 
FLOAT                : 14
FLOATCONSTANT        : 
FOR                  : 
GEQ                  : 
GT                   : 
IDENTIFIER           : 1 2 2 16 17 18 19
IF                   : 
INSCANFLOAT          : 
INSCANINT            : 
INT                  : 13
INTEGERCONSTANT      : 
LCURLY               : 1 2
LEQ                  : 
LPAREN               : 
LSQUARE              : 19
LT                   : 
MINUS                : 
MINUSMINUS           : 
MULT                 : 
NEW                  : 
NOT                  : 
NOTEQUALS            : 
NULL                 : 
OR                   : 
OUTPRINT             : 
PLUS                 : 
PLUSPLUS             : 
PRIVATE              : 7 10
PUBLIC               : 6 9
RCURLY               : 1 2
RETURN               : 
RPAREN               : 
RSQUARE              : 19
SEMICOLON            : 12
SPACE                : 
STATIC               : 8 9 10
STRINGCONSTANT       : 
SUPER                : 
THIS                 : 
TRUE                 : 
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

class_body_decl      : 1 2
classdecl            : 0
empty                : 3 11
field_decl           : 4
modifier             : 5
type                 : 12
var_decl             : 5
variables            : 12 18 19

Parsing method: LALR

state 0

    (0) S' -> . classdecl
    (1) classdecl -> . CLASS IDENTIFIER LCURLY class_body_decl RCURLY
    (2) classdecl -> . CLASS IDENTIFIER EXTENDS IDENTIFIER LCURLY class_body_decl RCURLY

    CLASS           shift and go to state 1

    classdecl                      shift and go to state 2

state 1

    (1) classdecl -> CLASS . IDENTIFIER LCURLY class_body_decl RCURLY
    (2) classdecl -> CLASS . IDENTIFIER EXTENDS IDENTIFIER LCURLY class_body_decl RCURLY

    IDENTIFIER      shift and go to state 3


state 2

    (0) S' -> classdecl .



state 3

    (1) classdecl -> CLASS IDENTIFIER . LCURLY class_body_decl RCURLY
    (2) classdecl -> CLASS IDENTIFIER . EXTENDS IDENTIFIER LCURLY class_body_decl RCURLY

    LCURLY          shift and go to state 4
    EXTENDS         shift and go to state 5


state 4

    (1) classdecl -> CLASS IDENTIFIER LCURLY . class_body_decl RCURLY
    (3) class_body_decl -> . empty
    (4) class_body_decl -> . field_decl
    (20) empty -> .
    (5) field_decl -> . modifier var_decl
    (6) modifier -> . PUBLIC
    (7) modifier -> . PRIVATE
    (8) modifier -> . STATIC
    (9) modifier -> . PUBLIC STATIC
    (10) modifier -> . PRIVATE STATIC
    (11) modifier -> . empty

    RCURLY          reduce using rule 20 (empty -> .)
    INT             reduce using rule 20 (empty -> .)
    FLOAT           reduce using rule 20 (empty -> .)
    BOOLEAN         reduce using rule 20 (empty -> .)
    IDENTIFIER      reduce using rule 20 (empty -> .)
    PUBLIC          shift and go to state 9
    PRIVATE         shift and go to state 11
    STATIC          shift and go to state 10

    field_decl                     shift and go to state 8
    modifier                       shift and go to state 6
    class_body_decl                shift and go to state 7
    empty                          shift and go to state 12

state 5

    (2) classdecl -> CLASS IDENTIFIER EXTENDS . IDENTIFIER LCURLY class_body_decl RCURLY

    IDENTIFIER      shift and go to state 13


state 6

    (5) field_decl -> modifier . var_decl
    (12) var_decl -> . type variables SEMICOLON
    (13) type -> . INT
    (14) type -> . FLOAT
    (15) type -> . BOOLEAN
    (16) type -> . IDENTIFIER

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 18
    IDENTIFIER      shift and go to state 14

    type                           shift and go to state 19
    var_decl                       shift and go to state 17

state 7

    (1) classdecl -> CLASS IDENTIFIER LCURLY class_body_decl . RCURLY

    RCURLY          shift and go to state 20


state 8

    (4) class_body_decl -> field_decl .

    RCURLY          reduce using rule 4 (class_body_decl -> field_decl .)


state 9

    (6) modifier -> PUBLIC .
    (9) modifier -> PUBLIC . STATIC

    INT             reduce using rule 6 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 6 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 6 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 6 (modifier -> PUBLIC .)
    STATIC          shift and go to state 21


state 10

    (8) modifier -> STATIC .

    INT             reduce using rule 8 (modifier -> STATIC .)
    FLOAT           reduce using rule 8 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 8 (modifier -> STATIC .)
    IDENTIFIER      reduce using rule 8 (modifier -> STATIC .)


state 11

    (7) modifier -> PRIVATE .
    (10) modifier -> PRIVATE . STATIC

    INT             reduce using rule 7 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 7 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 7 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 7 (modifier -> PRIVATE .)
    STATIC          shift and go to state 22


state 12

    (3) class_body_decl -> empty .
    (11) modifier -> empty .

    RCURLY          reduce using rule 3 (class_body_decl -> empty .)
    INT             reduce using rule 11 (modifier -> empty .)
    FLOAT           reduce using rule 11 (modifier -> empty .)
    BOOLEAN         reduce using rule 11 (modifier -> empty .)
    IDENTIFIER      reduce using rule 11 (modifier -> empty .)


state 13

    (2) classdecl -> CLASS IDENTIFIER EXTENDS IDENTIFIER . LCURLY class_body_decl RCURLY

    LCURLY          shift and go to state 23


state 14

    (16) type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 16 (type -> IDENTIFIER .)
    COMMA           reduce using rule 16 (type -> IDENTIFIER .)


state 15

    (13) type -> INT .

    IDENTIFIER      reduce using rule 13 (type -> INT .)
    COMMA           reduce using rule 13 (type -> INT .)


state 16

    (14) type -> FLOAT .

    IDENTIFIER      reduce using rule 14 (type -> FLOAT .)
    COMMA           reduce using rule 14 (type -> FLOAT .)


state 17

    (5) field_decl -> modifier var_decl .

    RCURLY          reduce using rule 5 (field_decl -> modifier var_decl .)


state 18

    (15) type -> BOOLEAN .

    IDENTIFIER      reduce using rule 15 (type -> BOOLEAN .)
    COMMA           reduce using rule 15 (type -> BOOLEAN .)


state 19

    (12) var_decl -> type . variables SEMICOLON
    (17) variables -> . IDENTIFIER
    (18) variables -> . COMMA IDENTIFIER variables
    (19) variables -> . COMMA IDENTIFIER LSQUARE RSQUARE variables

    IDENTIFIER      shift and go to state 26
    COMMA           shift and go to state 25

    variables                      shift and go to state 24

state 20

    (1) classdecl -> CLASS IDENTIFIER LCURLY class_body_decl RCURLY .

    $end            reduce using rule 1 (classdecl -> CLASS IDENTIFIER LCURLY class_body_decl RCURLY .)


state 21

    (9) modifier -> PUBLIC STATIC .

    INT             reduce using rule 9 (modifier -> PUBLIC STATIC .)
    FLOAT           reduce using rule 9 (modifier -> PUBLIC STATIC .)
    BOOLEAN         reduce using rule 9 (modifier -> PUBLIC STATIC .)
    IDENTIFIER      reduce using rule 9 (modifier -> PUBLIC STATIC .)


state 22

    (10) modifier -> PRIVATE STATIC .

    INT             reduce using rule 10 (modifier -> PRIVATE STATIC .)
    FLOAT           reduce using rule 10 (modifier -> PRIVATE STATIC .)
    BOOLEAN         reduce using rule 10 (modifier -> PRIVATE STATIC .)
    IDENTIFIER      reduce using rule 10 (modifier -> PRIVATE STATIC .)


state 23

    (2) classdecl -> CLASS IDENTIFIER EXTENDS IDENTIFIER LCURLY . class_body_decl RCURLY
    (3) class_body_decl -> . empty
    (4) class_body_decl -> . field_decl
    (20) empty -> .
    (5) field_decl -> . modifier var_decl
    (6) modifier -> . PUBLIC
    (7) modifier -> . PRIVATE
    (8) modifier -> . STATIC
    (9) modifier -> . PUBLIC STATIC
    (10) modifier -> . PRIVATE STATIC
    (11) modifier -> . empty

    RCURLY          reduce using rule 20 (empty -> .)
    INT             reduce using rule 20 (empty -> .)
    FLOAT           reduce using rule 20 (empty -> .)
    BOOLEAN         reduce using rule 20 (empty -> .)
    IDENTIFIER      reduce using rule 20 (empty -> .)
    PUBLIC          shift and go to state 9
    PRIVATE         shift and go to state 11
    STATIC          shift and go to state 10

    field_decl                     shift and go to state 8
    modifier                       shift and go to state 6
    class_body_decl                shift and go to state 27
    empty                          shift and go to state 12

state 24

    (12) var_decl -> type variables . SEMICOLON

    SEMICOLON       shift and go to state 28


state 25

    (18) variables -> COMMA . IDENTIFIER variables
    (19) variables -> COMMA . IDENTIFIER LSQUARE RSQUARE variables

    IDENTIFIER      shift and go to state 29


state 26

    (17) variables -> IDENTIFIER .

    SEMICOLON       reduce using rule 17 (variables -> IDENTIFIER .)


state 27

    (2) classdecl -> CLASS IDENTIFIER EXTENDS IDENTIFIER LCURLY class_body_decl . RCURLY

    RCURLY          shift and go to state 30


state 28

    (12) var_decl -> type variables SEMICOLON .

    RCURLY          reduce using rule 12 (var_decl -> type variables SEMICOLON .)


state 29

    (18) variables -> COMMA IDENTIFIER . variables
    (19) variables -> COMMA IDENTIFIER . LSQUARE RSQUARE variables
    (17) variables -> . IDENTIFIER
    (18) variables -> . COMMA IDENTIFIER variables
    (19) variables -> . COMMA IDENTIFIER LSQUARE RSQUARE variables

    LSQUARE         shift and go to state 32
    IDENTIFIER      shift and go to state 26
    COMMA           shift and go to state 25

    variables                      shift and go to state 31

state 30

    (2) classdecl -> CLASS IDENTIFIER EXTENDS IDENTIFIER LCURLY class_body_decl RCURLY .

    $end            reduce using rule 2 (classdecl -> CLASS IDENTIFIER EXTENDS IDENTIFIER LCURLY class_body_decl RCURLY .)


state 31

    (18) variables -> COMMA IDENTIFIER variables .

    SEMICOLON       reduce using rule 18 (variables -> COMMA IDENTIFIER variables .)


state 32

    (19) variables -> COMMA IDENTIFIER LSQUARE . RSQUARE variables

    RSQUARE         shift and go to state 33


state 33

    (19) variables -> COMMA IDENTIFIER LSQUARE RSQUARE . variables
    (17) variables -> . IDENTIFIER
    (18) variables -> . COMMA IDENTIFIER variables
    (19) variables -> . COMMA IDENTIFIER LSQUARE RSQUARE variables

    IDENTIFIER      shift and go to state 26
    COMMA           shift and go to state 25

    variables                      shift and go to state 34

state 34

    (19) variables -> COMMA IDENTIFIER LSQUARE RSQUARE variables .

    SEMICOLON       reduce using rule 19 (variables -> COMMA IDENTIFIER LSQUARE RSQUARE variables .)

