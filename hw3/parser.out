Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> pgm
Rule 1     pgm -> class_decl_list
Rule 2     class_decl_list -> class_decl class_decl_list
Rule 3     class_decl_list -> <empty>
Rule 4     class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE
Rule 5     newscope -> <empty>
Rule 6     class_decl -> CLASS ID extends LBRACE error RBRACE
Rule 7     extends -> EXTENDS ID
Rule 8     extends -> <empty>
Rule 9     class_body_decl_list -> class_body_decl_list class_body_decl
Rule 10    class_body_decl_list -> class_body_decl
Rule 11    class_body_decl -> field_decl
Rule 12    class_body_decl -> method_decl
Rule 13    class_body_decl -> constructor_decl
Rule 14    field_decl -> mod var_decl
Rule 15    method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block
Rule 16    method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block
Rule 17    methodscope -> <empty>
Rule 18    constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block
Rule 19    constructorscope -> <empty>
Rule 20    mod -> visibility_mod storage_mod
Rule 21    visibility_mod -> PUBLIC
Rule 22    visibility_mod -> PRIVATE
Rule 23    visibility_mod -> <empty>
Rule 24    storage_mod -> STATIC
Rule 25    storage_mod -> <empty>
Rule 26    var_decl -> type var_list SEMICOLON
Rule 27    type -> INT
Rule 28    type -> BOOLEAN
Rule 29    type -> FLOAT
Rule 30    type -> ID
Rule 31    var_list -> var_list COMMA var
Rule 32    var_list -> var
Rule 33    var -> ID
Rule 34    var -> var LBRACKET RBRACKET
Rule 35    param_list_opt -> param_list
Rule 36    param_list_opt -> <empty>
Rule 37    param_list -> param_list COMMA param
Rule 38    param_list -> param
Rule 39    param -> type ID
Rule 40    block -> LBRACE stmt_list RBRACE
Rule 41    block -> LBRACE stmt_list error RBRACE
Rule 42    stmt_list -> <empty>
Rule 43    stmt_list -> stmt_list stmt
Rule 44    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 45    stmt -> IF LPAREN expr RPAREN stmt
Rule 46    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 47    stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
Rule 48    stmt -> RETURN expr_opt SEMICOLON
Rule 49    stmt -> stmt_expr SEMICOLON
Rule 50    stmt -> BREAK SEMICOLON
Rule 51    stmt -> CONTINUE SEMICOLON
Rule 52    stmt -> block
Rule 53    stmt -> var_decl
Rule 54    stmt -> error SEMICOLON
Rule 55    literal -> INT_CONST
Rule 56    literal -> FLOAT_CONST
Rule 57    literal -> STRING_CONST
Rule 58    literal -> NULL
Rule 59    literal -> TRUE
Rule 60    literal -> FALSE
Rule 61    primary -> literal
Rule 62    primary -> THIS
Rule 63    primary -> SUPER
Rule 64    primary -> LPAREN expr RPAREN
Rule 65    primary -> NEW ID LPAREN args_opt RPAREN
Rule 66    primary -> lhs
Rule 67    primary -> method_invocation
Rule 68    args_opt -> arg_plus
Rule 69    args_opt -> <empty>
Rule 70    arg_plus -> arg_plus COMMA expr
Rule 71    arg_plus -> expr
Rule 72    lhs -> field_access
Rule 73    lhs -> array_access
Rule 74    field_access -> primary DOT ID
Rule 75    field_access -> ID
Rule 76    array_access -> primary LBRACKET expr RBRACKET
Rule 77    method_invocation -> field_access LPAREN args_opt RPAREN
Rule 78    expr -> primary
Rule 79    expr -> assign
Rule 80    expr -> new_array
Rule 81    expr -> expr PLUS expr
Rule 82    expr -> expr MINUS expr
Rule 83    expr -> expr MULTIPLY expr
Rule 84    expr -> expr DIVIDE expr
Rule 85    expr -> expr EQ expr
Rule 86    expr -> expr NEQ expr
Rule 87    expr -> expr LT expr
Rule 88    expr -> expr LEQ expr
Rule 89    expr -> expr GT expr
Rule 90    expr -> expr GEQ expr
Rule 91    expr -> expr AND expr
Rule 92    expr -> expr OR expr
Rule 93    expr -> PLUS expr
Rule 94    expr -> MINUS expr
Rule 95    expr -> NOT expr
Rule 96    assign -> lhs ASSIGN expr
Rule 97    assign -> lhs INC
Rule 98    assign -> INC lhs
Rule 99    assign -> lhs DEC
Rule 100   assign -> DEC lhs
Rule 101   new_array -> NEW type dim_expr_plus dim_star
Rule 102   dim_expr_plus -> dim_expr_plus dim_expr
Rule 103   dim_expr_plus -> dim_expr
Rule 104   dim_expr -> LBRACKET expr RBRACKET
Rule 105   dim_star -> LBRACKET RBRACKET dim_star
Rule 106   dim_star -> <empty>
Rule 107   stmt_expr -> assign
Rule 108   stmt_expr -> method_invocation
Rule 109   stmt_expr_opt -> stmt_expr
Rule 110   stmt_expr_opt -> <empty>
Rule 111   expr_opt -> expr
Rule 112   expr_opt -> <empty>

Terminals, with rules where they appear

AND                  : 91
ASSIGN               : 96
BOOLEAN              : 28
BREAK                : 50
CLASS                : 4 6
COMMA                : 31 37 70
CONTINUE             : 51
DEC                  : 99 100
DIVIDE               : 84
DOT                  : 74
ELSE                 : 44
EQ                   : 85
EXTENDS              : 7
FALSE                : 60
FLOAT                : 29
FLOAT_CONST          : 56
FOR                  : 47
GEQ                  : 90
GT                   : 89
ID                   : 4 6 7 15 16 18 30 33 39 65 74 75
IF                   : 44 45
INC                  : 97 98
INT                  : 27
INT_CONST            : 55
LBRACE               : 4 6 40 41
LBRACKET             : 34 76 104 105
LEQ                  : 88
LPAREN               : 15 16 18 44 45 46 47 64 65 77
LT                   : 87
MINUS                : 82 94
MULTIPLY             : 83
NEQ                  : 86
NEW                  : 65 101
NOT                  : 95
NULL                 : 58
OR                   : 92
PLUS                 : 81 93
PRIVATE              : 22
PUBLIC               : 21
RBRACE               : 4 6 40 41
RBRACKET             : 34 76 104 105
RETURN               : 48
RPAREN               : 15 16 18 44 45 46 47 64 65 77
SEMICOLON            : 26 47 47 48 49 50 51 54
STATIC               : 24
STRING_CONST         : 57
SUPER                : 63
THIS                 : 62
TRUE                 : 59
VOID                 : 15
WHILE                : 46
error                : 6 41 54

Nonterminals, with rules where they appear

arg_plus             : 68 70
args_opt             : 65 77
array_access         : 73
assign               : 79 107
block                : 15 16 18 52
class_body_decl      : 9 10
class_body_decl_list : 4 9
class_decl           : 2
class_decl_list      : 1 2
constructor_decl     : 13
constructorscope     : 18
dim_expr             : 102 103
dim_expr_plus        : 101 102
dim_star             : 101 105
expr                 : 44 45 46 64 70 71 76 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 94 95 96 104 111
expr_opt             : 47 48
extends              : 4 6
field_access         : 72 77
field_decl           : 11
lhs                  : 66 96 97 98 99 100
literal              : 61
method_decl          : 12
method_invocation    : 67 108
methodscope          : 15 16
mod                  : 14 15 16 18
new_array            : 80
newscope             : 4
param                : 37 38
param_list           : 35 37
param_list_opt       : 15 16 18
pgm                  : 0
primary              : 74 76 78
stmt                 : 43 44 44 45 46 47
stmt_expr            : 49 109
stmt_expr_opt        : 47 47
stmt_list            : 40 41 43
storage_mod          : 20
type                 : 16 26 39 101
var                  : 31 32 34
var_decl             : 14 53
var_list             : 26 31
visibility_mod       : 20

Parsing method: LALR

state 0

    (0) S' -> . pgm
    (1) pgm -> . class_decl_list
    (2) class_decl_list -> . class_decl class_decl_list
    (3) class_decl_list -> .
    (4) class_decl -> . CLASS ID extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> . CLASS ID extends LBRACE error RBRACE

    $end            reduce using rule 3 (class_decl_list -> .)
    CLASS           shift and go to state 2

    pgm                            shift and go to state 1
    class_decl                     shift and go to state 3
    class_decl_list                shift and go to state 4

state 1

    (0) S' -> pgm .



state 2

    (4) class_decl -> CLASS . ID extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS . ID extends LBRACE error RBRACE

    ID              shift and go to state 5


state 3

    (2) class_decl_list -> class_decl . class_decl_list
    (2) class_decl_list -> . class_decl class_decl_list
    (3) class_decl_list -> .
    (4) class_decl -> . CLASS ID extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> . CLASS ID extends LBRACE error RBRACE

    $end            reduce using rule 3 (class_decl_list -> .)
    CLASS           shift and go to state 2

    class_decl_list                shift and go to state 6
    class_decl                     shift and go to state 3

state 4

    (1) pgm -> class_decl_list .

    $end            reduce using rule 1 (pgm -> class_decl_list .)


state 5

    (4) class_decl -> CLASS ID . extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS ID . extends LBRACE error RBRACE
    (7) extends -> . EXTENDS ID
    (8) extends -> .

    EXTENDS         shift and go to state 8
    LBRACE          reduce using rule 8 (extends -> .)

    extends                        shift and go to state 7

state 6

    (2) class_decl_list -> class_decl class_decl_list .

    $end            reduce using rule 2 (class_decl_list -> class_decl class_decl_list .)


state 7

    (4) class_decl -> CLASS ID extends . LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS ID extends . LBRACE error RBRACE

    LBRACE          shift and go to state 9


state 8

    (7) extends -> EXTENDS . ID

    ID              shift and go to state 10


state 9

    (4) class_decl -> CLASS ID extends LBRACE . newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS ID extends LBRACE . error RBRACE
    (5) newscope -> .

    error           shift and go to state 12
    PUBLIC          reduce using rule 5 (newscope -> .)
    PRIVATE         reduce using rule 5 (newscope -> .)
    VOID            reduce using rule 5 (newscope -> .)
    ID              reduce using rule 5 (newscope -> .)
    INT             reduce using rule 5 (newscope -> .)
    BOOLEAN         reduce using rule 5 (newscope -> .)
    FLOAT           reduce using rule 5 (newscope -> .)
    STATIC          reduce using rule 5 (newscope -> .)

    newscope                       shift and go to state 11

state 10

    (7) extends -> EXTENDS ID .

    LBRACE          reduce using rule 7 (extends -> EXTENDS ID .)


state 11

    (4) class_decl -> CLASS ID extends LBRACE newscope . class_body_decl_list RBRACE
    (9) class_body_decl_list -> . class_body_decl_list class_body_decl
    (10) class_body_decl_list -> . class_body_decl
    (11) class_body_decl -> . field_decl
    (12) class_body_decl -> . method_decl
    (13) class_body_decl -> . constructor_decl
    (14) field_decl -> . mod var_decl
    (15) method_decl -> . mod VOID ID LPAREN methodscope param_list_opt RPAREN block
    (16) method_decl -> . mod type ID LPAREN methodscope param_list_opt RPAREN block
    (18) constructor_decl -> . mod ID LPAREN constructorscope param_list_opt RPAREN block
    (20) mod -> . visibility_mod storage_mod
    (21) visibility_mod -> . PUBLIC
    (22) visibility_mod -> . PRIVATE
    (23) visibility_mod -> .

    PUBLIC          shift and go to state 21
    PRIVATE         shift and go to state 14
    STATIC          reduce using rule 23 (visibility_mod -> .)
    VOID            reduce using rule 23 (visibility_mod -> .)
    ID              reduce using rule 23 (visibility_mod -> .)
    INT             reduce using rule 23 (visibility_mod -> .)
    BOOLEAN         reduce using rule 23 (visibility_mod -> .)
    FLOAT           reduce using rule 23 (visibility_mod -> .)

    class_body_decl                shift and go to state 16
    field_decl                     shift and go to state 19
    constructor_decl               shift and go to state 13
    method_decl                    shift and go to state 20
    visibility_mod                 shift and go to state 17
    class_body_decl_list           shift and go to state 15
    mod                            shift and go to state 18

state 12

    (6) class_decl -> CLASS ID extends LBRACE error . RBRACE

    RBRACE          shift and go to state 22


state 13

    (13) class_body_decl -> constructor_decl .

    RBRACE          reduce using rule 13 (class_body_decl -> constructor_decl .)
    PUBLIC          reduce using rule 13 (class_body_decl -> constructor_decl .)
    PRIVATE         reduce using rule 13 (class_body_decl -> constructor_decl .)
    VOID            reduce using rule 13 (class_body_decl -> constructor_decl .)
    ID              reduce using rule 13 (class_body_decl -> constructor_decl .)
    INT             reduce using rule 13 (class_body_decl -> constructor_decl .)
    BOOLEAN         reduce using rule 13 (class_body_decl -> constructor_decl .)
    FLOAT           reduce using rule 13 (class_body_decl -> constructor_decl .)
    STATIC          reduce using rule 13 (class_body_decl -> constructor_decl .)


state 14

    (22) visibility_mod -> PRIVATE .

    STATIC          reduce using rule 22 (visibility_mod -> PRIVATE .)
    VOID            reduce using rule 22 (visibility_mod -> PRIVATE .)
    ID              reduce using rule 22 (visibility_mod -> PRIVATE .)
    INT             reduce using rule 22 (visibility_mod -> PRIVATE .)
    BOOLEAN         reduce using rule 22 (visibility_mod -> PRIVATE .)
    FLOAT           reduce using rule 22 (visibility_mod -> PRIVATE .)


state 15

    (4) class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list . RBRACE
    (9) class_body_decl_list -> class_body_decl_list . class_body_decl
    (11) class_body_decl -> . field_decl
    (12) class_body_decl -> . method_decl
    (13) class_body_decl -> . constructor_decl
    (14) field_decl -> . mod var_decl
    (15) method_decl -> . mod VOID ID LPAREN methodscope param_list_opt RPAREN block
    (16) method_decl -> . mod type ID LPAREN methodscope param_list_opt RPAREN block
    (18) constructor_decl -> . mod ID LPAREN constructorscope param_list_opt RPAREN block
    (20) mod -> . visibility_mod storage_mod
    (21) visibility_mod -> . PUBLIC
    (22) visibility_mod -> . PRIVATE
    (23) visibility_mod -> .

    RBRACE          shift and go to state 24
    PUBLIC          shift and go to state 21
    PRIVATE         shift and go to state 14
    STATIC          reduce using rule 23 (visibility_mod -> .)
    VOID            reduce using rule 23 (visibility_mod -> .)
    ID              reduce using rule 23 (visibility_mod -> .)
    INT             reduce using rule 23 (visibility_mod -> .)
    BOOLEAN         reduce using rule 23 (visibility_mod -> .)
    FLOAT           reduce using rule 23 (visibility_mod -> .)

    class_body_decl                shift and go to state 23
    field_decl                     shift and go to state 19
    constructor_decl               shift and go to state 13
    method_decl                    shift and go to state 20
    visibility_mod                 shift and go to state 17
    mod                            shift and go to state 18

state 16

    (10) class_body_decl_list -> class_body_decl .

    RBRACE          reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    PUBLIC          reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    PRIVATE         reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    VOID            reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    ID              reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    INT             reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    BOOLEAN         reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    FLOAT           reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    STATIC          reduce using rule 10 (class_body_decl_list -> class_body_decl .)


state 17

    (20) mod -> visibility_mod . storage_mod
    (24) storage_mod -> . STATIC
    (25) storage_mod -> .

    STATIC          shift and go to state 26
    VOID            reduce using rule 25 (storage_mod -> .)
    ID              reduce using rule 25 (storage_mod -> .)
    INT             reduce using rule 25 (storage_mod -> .)
    BOOLEAN         reduce using rule 25 (storage_mod -> .)
    FLOAT           reduce using rule 25 (storage_mod -> .)

    storage_mod                    shift and go to state 25

state 18

    (14) field_decl -> mod . var_decl
    (15) method_decl -> mod . VOID ID LPAREN methodscope param_list_opt RPAREN block
    (16) method_decl -> mod . type ID LPAREN methodscope param_list_opt RPAREN block
    (18) constructor_decl -> mod . ID LPAREN constructorscope param_list_opt RPAREN block
    (26) var_decl -> . type var_list SEMICOLON
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID

    VOID            shift and go to state 28
    ID              shift and go to state 33
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29

    var_decl                       shift and go to state 30
    type                           shift and go to state 32

state 19

    (11) class_body_decl -> field_decl .

    RBRACE          reduce using rule 11 (class_body_decl -> field_decl .)
    PUBLIC          reduce using rule 11 (class_body_decl -> field_decl .)
    PRIVATE         reduce using rule 11 (class_body_decl -> field_decl .)
    VOID            reduce using rule 11 (class_body_decl -> field_decl .)
    ID              reduce using rule 11 (class_body_decl -> field_decl .)
    INT             reduce using rule 11 (class_body_decl -> field_decl .)
    BOOLEAN         reduce using rule 11 (class_body_decl -> field_decl .)
    FLOAT           reduce using rule 11 (class_body_decl -> field_decl .)
    STATIC          reduce using rule 11 (class_body_decl -> field_decl .)


state 20

    (12) class_body_decl -> method_decl .

    RBRACE          reduce using rule 12 (class_body_decl -> method_decl .)
    PUBLIC          reduce using rule 12 (class_body_decl -> method_decl .)
    PRIVATE         reduce using rule 12 (class_body_decl -> method_decl .)
    VOID            reduce using rule 12 (class_body_decl -> method_decl .)
    ID              reduce using rule 12 (class_body_decl -> method_decl .)
    INT             reduce using rule 12 (class_body_decl -> method_decl .)
    BOOLEAN         reduce using rule 12 (class_body_decl -> method_decl .)
    FLOAT           reduce using rule 12 (class_body_decl -> method_decl .)
    STATIC          reduce using rule 12 (class_body_decl -> method_decl .)


state 21

    (21) visibility_mod -> PUBLIC .

    STATIC          reduce using rule 21 (visibility_mod -> PUBLIC .)
    VOID            reduce using rule 21 (visibility_mod -> PUBLIC .)
    ID              reduce using rule 21 (visibility_mod -> PUBLIC .)
    INT             reduce using rule 21 (visibility_mod -> PUBLIC .)
    BOOLEAN         reduce using rule 21 (visibility_mod -> PUBLIC .)
    FLOAT           reduce using rule 21 (visibility_mod -> PUBLIC .)


state 22

    (6) class_decl -> CLASS ID extends LBRACE error RBRACE .

    CLASS           reduce using rule 6 (class_decl -> CLASS ID extends LBRACE error RBRACE .)
    $end            reduce using rule 6 (class_decl -> CLASS ID extends LBRACE error RBRACE .)


state 23

    (9) class_body_decl_list -> class_body_decl_list class_body_decl .

    RBRACE          reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    PUBLIC          reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    PRIVATE         reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    VOID            reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    ID              reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    INT             reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    BOOLEAN         reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    FLOAT           reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    STATIC          reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)


state 24

    (4) class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE .

    CLASS           reduce using rule 4 (class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE .)
    $end            reduce using rule 4 (class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE .)


state 25

    (20) mod -> visibility_mod storage_mod .

    VOID            reduce using rule 20 (mod -> visibility_mod storage_mod .)
    ID              reduce using rule 20 (mod -> visibility_mod storage_mod .)
    INT             reduce using rule 20 (mod -> visibility_mod storage_mod .)
    BOOLEAN         reduce using rule 20 (mod -> visibility_mod storage_mod .)
    FLOAT           reduce using rule 20 (mod -> visibility_mod storage_mod .)


state 26

    (24) storage_mod -> STATIC .

    VOID            reduce using rule 24 (storage_mod -> STATIC .)
    ID              reduce using rule 24 (storage_mod -> STATIC .)
    INT             reduce using rule 24 (storage_mod -> STATIC .)
    BOOLEAN         reduce using rule 24 (storage_mod -> STATIC .)
    FLOAT           reduce using rule 24 (storage_mod -> STATIC .)


state 27

    (27) type -> INT .

    ID              reduce using rule 27 (type -> INT .)
    LBRACKET        reduce using rule 27 (type -> INT .)


state 28

    (15) method_decl -> mod VOID . ID LPAREN methodscope param_list_opt RPAREN block

    ID              shift and go to state 34


state 29

    (29) type -> FLOAT .

    ID              reduce using rule 29 (type -> FLOAT .)
    LBRACKET        reduce using rule 29 (type -> FLOAT .)


state 30

    (14) field_decl -> mod var_decl .

    RBRACE          reduce using rule 14 (field_decl -> mod var_decl .)
    PUBLIC          reduce using rule 14 (field_decl -> mod var_decl .)
    PRIVATE         reduce using rule 14 (field_decl -> mod var_decl .)
    VOID            reduce using rule 14 (field_decl -> mod var_decl .)
    ID              reduce using rule 14 (field_decl -> mod var_decl .)
    INT             reduce using rule 14 (field_decl -> mod var_decl .)
    BOOLEAN         reduce using rule 14 (field_decl -> mod var_decl .)
    FLOAT           reduce using rule 14 (field_decl -> mod var_decl .)
    STATIC          reduce using rule 14 (field_decl -> mod var_decl .)


state 31

    (28) type -> BOOLEAN .

    ID              reduce using rule 28 (type -> BOOLEAN .)
    LBRACKET        reduce using rule 28 (type -> BOOLEAN .)


state 32

    (16) method_decl -> mod type . ID LPAREN methodscope param_list_opt RPAREN block
    (26) var_decl -> type . var_list SEMICOLON
    (31) var_list -> . var_list COMMA var
    (32) var_list -> . var
    (33) var -> . ID
    (34) var -> . var LBRACKET RBRACKET

    ID              shift and go to state 37

    var                            shift and go to state 35
    var_list                       shift and go to state 36

state 33

    (18) constructor_decl -> mod ID . LPAREN constructorscope param_list_opt RPAREN block
    (30) type -> ID .

    LPAREN          shift and go to state 38
    ID              reduce using rule 30 (type -> ID .)


state 34

    (15) method_decl -> mod VOID ID . LPAREN methodscope param_list_opt RPAREN block

    LPAREN          shift and go to state 39


state 35

    (32) var_list -> var .
    (34) var -> var . LBRACKET RBRACKET

    SEMICOLON       reduce using rule 32 (var_list -> var .)
    COMMA           reduce using rule 32 (var_list -> var .)
    LBRACKET        shift and go to state 40


state 36

    (26) var_decl -> type var_list . SEMICOLON
    (31) var_list -> var_list . COMMA var

    SEMICOLON       shift and go to state 42
    COMMA           shift and go to state 41


state 37

    (16) method_decl -> mod type ID . LPAREN methodscope param_list_opt RPAREN block
    (33) var -> ID .

    LPAREN          shift and go to state 43
    LBRACKET        reduce using rule 33 (var -> ID .)
    SEMICOLON       reduce using rule 33 (var -> ID .)
    COMMA           reduce using rule 33 (var -> ID .)


state 38

    (18) constructor_decl -> mod ID LPAREN . constructorscope param_list_opt RPAREN block
    (19) constructorscope -> .

    INT             reduce using rule 19 (constructorscope -> .)
    BOOLEAN         reduce using rule 19 (constructorscope -> .)
    FLOAT           reduce using rule 19 (constructorscope -> .)
    ID              reduce using rule 19 (constructorscope -> .)
    RPAREN          reduce using rule 19 (constructorscope -> .)

    constructorscope               shift and go to state 44

state 39

    (15) method_decl -> mod VOID ID LPAREN . methodscope param_list_opt RPAREN block
    (17) methodscope -> .

    INT             reduce using rule 17 (methodscope -> .)
    BOOLEAN         reduce using rule 17 (methodscope -> .)
    FLOAT           reduce using rule 17 (methodscope -> .)
    ID              reduce using rule 17 (methodscope -> .)
    RPAREN          reduce using rule 17 (methodscope -> .)

    methodscope                    shift and go to state 45

state 40

    (34) var -> var LBRACKET . RBRACKET

    RBRACKET        shift and go to state 46


state 41

    (31) var_list -> var_list COMMA . var
    (33) var -> . ID
    (34) var -> . var LBRACKET RBRACKET

    ID              shift and go to state 48

    var                            shift and go to state 47

state 42

    (26) var_decl -> type var_list SEMICOLON .

    RBRACE          reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    error           reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    IF              reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    WHILE           reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    FOR             reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    RETURN          reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    BREAK           reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    CONTINUE        reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    LBRACE          reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    INC             reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    DEC             reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    INT             reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    BOOLEAN         reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    FLOAT           reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    ID              reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    THIS            reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    SUPER           reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    LPAREN          reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    NEW             reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    INT_CONST       reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    FLOAT_CONST     reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    STRING_CONST    reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    NULL            reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    TRUE            reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    FALSE           reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    ELSE            reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    PUBLIC          reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    PRIVATE         reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    VOID            reduce using rule 26 (var_decl -> type var_list SEMICOLON .)
    STATIC          reduce using rule 26 (var_decl -> type var_list SEMICOLON .)


state 43

    (16) method_decl -> mod type ID LPAREN . methodscope param_list_opt RPAREN block
    (17) methodscope -> .

    INT             reduce using rule 17 (methodscope -> .)
    BOOLEAN         reduce using rule 17 (methodscope -> .)
    FLOAT           reduce using rule 17 (methodscope -> .)
    ID              reduce using rule 17 (methodscope -> .)
    RPAREN          reduce using rule 17 (methodscope -> .)

    methodscope                    shift and go to state 49

state 44

    (18) constructor_decl -> mod ID LPAREN constructorscope . param_list_opt RPAREN block
    (35) param_list_opt -> . param_list
    (36) param_list_opt -> .
    (37) param_list -> . param_list COMMA param
    (38) param_list -> . param
    (39) param -> . type ID
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID

    RPAREN          reduce using rule 36 (param_list_opt -> .)
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 54

    param_list                     shift and go to state 50
    param                          shift and go to state 52
    param_list_opt                 shift and go to state 51
    type                           shift and go to state 53

state 45

    (15) method_decl -> mod VOID ID LPAREN methodscope . param_list_opt RPAREN block
    (35) param_list_opt -> . param_list
    (36) param_list_opt -> .
    (37) param_list -> . param_list COMMA param
    (38) param_list -> . param
    (39) param -> . type ID
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID

    RPAREN          reduce using rule 36 (param_list_opt -> .)
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 54

    param_list                     shift and go to state 50
    param                          shift and go to state 52
    param_list_opt                 shift and go to state 55
    type                           shift and go to state 53

state 46

    (34) var -> var LBRACKET RBRACKET .

    LBRACKET        reduce using rule 34 (var -> var LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 34 (var -> var LBRACKET RBRACKET .)
    COMMA           reduce using rule 34 (var -> var LBRACKET RBRACKET .)


state 47

    (31) var_list -> var_list COMMA var .
    (34) var -> var . LBRACKET RBRACKET

    SEMICOLON       reduce using rule 31 (var_list -> var_list COMMA var .)
    COMMA           reduce using rule 31 (var_list -> var_list COMMA var .)
    LBRACKET        shift and go to state 40


state 48

    (33) var -> ID .

    LBRACKET        reduce using rule 33 (var -> ID .)
    SEMICOLON       reduce using rule 33 (var -> ID .)
    COMMA           reduce using rule 33 (var -> ID .)


state 49

    (16) method_decl -> mod type ID LPAREN methodscope . param_list_opt RPAREN block
    (35) param_list_opt -> . param_list
    (36) param_list_opt -> .
    (37) param_list -> . param_list COMMA param
    (38) param_list -> . param
    (39) param -> . type ID
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID

    RPAREN          reduce using rule 36 (param_list_opt -> .)
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 54

    param_list                     shift and go to state 50
    param_list_opt                 shift and go to state 56
    param                          shift and go to state 52
    type                           shift and go to state 53

state 50

    (35) param_list_opt -> param_list .
    (37) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 35 (param_list_opt -> param_list .)
    COMMA           shift and go to state 57


state 51

    (18) constructor_decl -> mod ID LPAREN constructorscope param_list_opt . RPAREN block

    RPAREN          shift and go to state 58


state 52

    (38) param_list -> param .

    COMMA           reduce using rule 38 (param_list -> param .)
    RPAREN          reduce using rule 38 (param_list -> param .)


state 53

    (39) param -> type . ID

    ID              shift and go to state 59


state 54

    (30) type -> ID .

    ID              reduce using rule 30 (type -> ID .)


state 55

    (15) method_decl -> mod VOID ID LPAREN methodscope param_list_opt . RPAREN block

    RPAREN          shift and go to state 60


state 56

    (16) method_decl -> mod type ID LPAREN methodscope param_list_opt . RPAREN block

    RPAREN          shift and go to state 61


state 57

    (37) param_list -> param_list COMMA . param
    (39) param -> . type ID
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID

    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 54

    type                           shift and go to state 53
    param                          shift and go to state 62

state 58

    (18) constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN . block
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 64

state 59

    (39) param -> type ID .

    COMMA           reduce using rule 39 (param -> type ID .)
    RPAREN          reduce using rule 39 (param -> type ID .)


state 60

    (15) method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN . block
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 65

state 61

    (16) method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN . block
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE

    LBRACE          shift and go to state 63

    block                          shift and go to state 66

state 62

    (37) param_list -> param_list COMMA param .

    COMMA           reduce using rule 37 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 37 (param_list -> param_list COMMA param .)


state 63

    (40) block -> LBRACE . stmt_list RBRACE
    (41) block -> LBRACE . stmt_list error RBRACE
    (42) stmt_list -> .
    (43) stmt_list -> . stmt_list stmt

    RBRACE          reduce using rule 42 (stmt_list -> .)
    error           reduce using rule 42 (stmt_list -> .)
    IF              reduce using rule 42 (stmt_list -> .)
    WHILE           reduce using rule 42 (stmt_list -> .)
    FOR             reduce using rule 42 (stmt_list -> .)
    RETURN          reduce using rule 42 (stmt_list -> .)
    BREAK           reduce using rule 42 (stmt_list -> .)
    CONTINUE        reduce using rule 42 (stmt_list -> .)
    LBRACE          reduce using rule 42 (stmt_list -> .)
    INC             reduce using rule 42 (stmt_list -> .)
    DEC             reduce using rule 42 (stmt_list -> .)
    INT             reduce using rule 42 (stmt_list -> .)
    BOOLEAN         reduce using rule 42 (stmt_list -> .)
    FLOAT           reduce using rule 42 (stmt_list -> .)
    ID              reduce using rule 42 (stmt_list -> .)
    THIS            reduce using rule 42 (stmt_list -> .)
    SUPER           reduce using rule 42 (stmt_list -> .)
    LPAREN          reduce using rule 42 (stmt_list -> .)
    NEW             reduce using rule 42 (stmt_list -> .)
    INT_CONST       reduce using rule 42 (stmt_list -> .)
    FLOAT_CONST     reduce using rule 42 (stmt_list -> .)
    STRING_CONST    reduce using rule 42 (stmt_list -> .)
    NULL            reduce using rule 42 (stmt_list -> .)
    TRUE            reduce using rule 42 (stmt_list -> .)
    FALSE           reduce using rule 42 (stmt_list -> .)

    stmt_list                      shift and go to state 67

state 64

    (18) constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .

    RBRACE          reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    PUBLIC          reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    PRIVATE         reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    VOID            reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    ID              reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    INT             reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    BOOLEAN         reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    FLOAT           reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)
    STATIC          reduce using rule 18 (constructor_decl -> mod ID LPAREN constructorscope param_list_opt RPAREN block .)


state 65

    (15) method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .

    RBRACE          reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    PUBLIC          reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    PRIVATE         reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    VOID            reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    ID              reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    INT             reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    BOOLEAN         reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    FLOAT           reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)
    STATIC          reduce using rule 15 (method_decl -> mod VOID ID LPAREN methodscope param_list_opt RPAREN block .)


state 66

    (16) method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .

    RBRACE          reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    PUBLIC          reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    PRIVATE         reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    VOID            reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    ID              reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    INT             reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    BOOLEAN         reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    FLOAT           reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)
    STATIC          reduce using rule 16 (method_decl -> mod type ID LPAREN methodscope param_list_opt RPAREN block .)


state 67

    (40) block -> LBRACE stmt_list . RBRACE
    (41) block -> LBRACE stmt_list . error RBRACE
    (43) stmt_list -> stmt_list . stmt
    (44) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . WHILE LPAREN expr RPAREN stmt
    (47) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (48) stmt -> . RETURN expr_opt SEMICOLON
    (49) stmt -> . stmt_expr SEMICOLON
    (50) stmt -> . BREAK SEMICOLON
    (51) stmt -> . CONTINUE SEMICOLON
    (52) stmt -> . block
    (53) stmt -> . var_decl
    (54) stmt -> . error SEMICOLON
    (107) stmt_expr -> . assign
    (108) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE
    (26) var_decl -> . type var_list SEMICOLON
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE

    RBRACE          shift and go to state 84
    error           shift and go to state 96
    IF              shift and go to state 89
    WHILE           shift and go to state 70
    FOR             shift and go to state 85
    RETURN          shift and go to state 68
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 94
    LBRACE          shift and go to state 63
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 88
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 83
    array_access                   shift and go to state 74
    stmt_expr                      shift and go to state 79
    stmt                           shift and go to state 86
    primary                        shift and go to state 69
    literal                        shift and go to state 80
    lhs                            shift and go to state 95
    var_decl                       shift and go to state 91
    method_invocation              shift and go to state 81
    type                           shift and go to state 82
    assign                         shift and go to state 98
    block                          shift and go to state 99

state 68

    (48) stmt -> RETURN . expr_opt SEMICOLON
    (111) expr_opt -> . expr
    (112) expr_opt -> .
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    SEMICOLON       reduce using rule 112 (expr_opt -> .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 110
    primary                        shift and go to state 102
    array_access                   shift and go to state 74
    literal                        shift and go to state 80
    expr_opt                       shift and go to state 105
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 69

    (74) field_access -> primary . DOT ID
    (76) array_access -> primary . LBRACKET expr RBRACKET

    DOT             shift and go to state 115
    LBRACKET        shift and go to state 114


state 70

    (46) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 116


state 71

    (56) literal -> FLOAT_CONST .

    DOT             reduce using rule 56 (literal -> FLOAT_CONST .)
    LBRACKET        reduce using rule 56 (literal -> FLOAT_CONST .)
    PLUS            reduce using rule 56 (literal -> FLOAT_CONST .)
    MINUS           reduce using rule 56 (literal -> FLOAT_CONST .)
    MULTIPLY        reduce using rule 56 (literal -> FLOAT_CONST .)
    DIVIDE          reduce using rule 56 (literal -> FLOAT_CONST .)
    EQ              reduce using rule 56 (literal -> FLOAT_CONST .)
    NEQ             reduce using rule 56 (literal -> FLOAT_CONST .)
    LT              reduce using rule 56 (literal -> FLOAT_CONST .)
    LEQ             reduce using rule 56 (literal -> FLOAT_CONST .)
    GT              reduce using rule 56 (literal -> FLOAT_CONST .)
    GEQ             reduce using rule 56 (literal -> FLOAT_CONST .)
    AND             reduce using rule 56 (literal -> FLOAT_CONST .)
    OR              reduce using rule 56 (literal -> FLOAT_CONST .)
    COMMA           reduce using rule 56 (literal -> FLOAT_CONST .)
    RPAREN          reduce using rule 56 (literal -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 56 (literal -> FLOAT_CONST .)
    RBRACKET        reduce using rule 56 (literal -> FLOAT_CONST .)


state 72

    (65) primary -> NEW . ID LPAREN args_opt RPAREN

    ID              shift and go to state 117


state 73

    (100) assign -> DEC . lhs
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN

    ID              shift and go to state 109
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 108
    primary                        shift and go to state 69
    literal                        shift and go to state 80
    lhs                            shift and go to state 118
    method_invocation              shift and go to state 107
    array_access                   shift and go to state 74

state 74

    (73) lhs -> array_access .

    ASSIGN          reduce using rule 73 (lhs -> array_access .)
    INC             reduce using rule 73 (lhs -> array_access .)
    DEC             reduce using rule 73 (lhs -> array_access .)
    DOT             reduce using rule 73 (lhs -> array_access .)
    LBRACKET        reduce using rule 73 (lhs -> array_access .)
    PLUS            reduce using rule 73 (lhs -> array_access .)
    MINUS           reduce using rule 73 (lhs -> array_access .)
    MULTIPLY        reduce using rule 73 (lhs -> array_access .)
    DIVIDE          reduce using rule 73 (lhs -> array_access .)
    EQ              reduce using rule 73 (lhs -> array_access .)
    NEQ             reduce using rule 73 (lhs -> array_access .)
    LT              reduce using rule 73 (lhs -> array_access .)
    LEQ             reduce using rule 73 (lhs -> array_access .)
    GT              reduce using rule 73 (lhs -> array_access .)
    GEQ             reduce using rule 73 (lhs -> array_access .)
    AND             reduce using rule 73 (lhs -> array_access .)
    OR              reduce using rule 73 (lhs -> array_access .)
    SEMICOLON       reduce using rule 73 (lhs -> array_access .)
    RPAREN          reduce using rule 73 (lhs -> array_access .)
    RBRACKET        reduce using rule 73 (lhs -> array_access .)
    COMMA           reduce using rule 73 (lhs -> array_access .)


state 75

    (57) literal -> STRING_CONST .

    DOT             reduce using rule 57 (literal -> STRING_CONST .)
    LBRACKET        reduce using rule 57 (literal -> STRING_CONST .)
    PLUS            reduce using rule 57 (literal -> STRING_CONST .)
    MINUS           reduce using rule 57 (literal -> STRING_CONST .)
    MULTIPLY        reduce using rule 57 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 57 (literal -> STRING_CONST .)
    EQ              reduce using rule 57 (literal -> STRING_CONST .)
    NEQ             reduce using rule 57 (literal -> STRING_CONST .)
    LT              reduce using rule 57 (literal -> STRING_CONST .)
    LEQ             reduce using rule 57 (literal -> STRING_CONST .)
    GT              reduce using rule 57 (literal -> STRING_CONST .)
    GEQ             reduce using rule 57 (literal -> STRING_CONST .)
    AND             reduce using rule 57 (literal -> STRING_CONST .)
    OR              reduce using rule 57 (literal -> STRING_CONST .)
    COMMA           reduce using rule 57 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 57 (literal -> STRING_CONST .)
    SEMICOLON       reduce using rule 57 (literal -> STRING_CONST .)
    RBRACKET        reduce using rule 57 (literal -> STRING_CONST .)


state 76

    (55) literal -> INT_CONST .

    DOT             reduce using rule 55 (literal -> INT_CONST .)
    LBRACKET        reduce using rule 55 (literal -> INT_CONST .)
    PLUS            reduce using rule 55 (literal -> INT_CONST .)
    MINUS           reduce using rule 55 (literal -> INT_CONST .)
    MULTIPLY        reduce using rule 55 (literal -> INT_CONST .)
    DIVIDE          reduce using rule 55 (literal -> INT_CONST .)
    EQ              reduce using rule 55 (literal -> INT_CONST .)
    NEQ             reduce using rule 55 (literal -> INT_CONST .)
    LT              reduce using rule 55 (literal -> INT_CONST .)
    LEQ             reduce using rule 55 (literal -> INT_CONST .)
    GT              reduce using rule 55 (literal -> INT_CONST .)
    GEQ             reduce using rule 55 (literal -> INT_CONST .)
    AND             reduce using rule 55 (literal -> INT_CONST .)
    OR              reduce using rule 55 (literal -> INT_CONST .)
    COMMA           reduce using rule 55 (literal -> INT_CONST .)
    RPAREN          reduce using rule 55 (literal -> INT_CONST .)
    SEMICOLON       reduce using rule 55 (literal -> INT_CONST .)
    RBRACKET        reduce using rule 55 (literal -> INT_CONST .)


state 77

    (58) literal -> NULL .

    DOT             reduce using rule 58 (literal -> NULL .)
    LBRACKET        reduce using rule 58 (literal -> NULL .)
    PLUS            reduce using rule 58 (literal -> NULL .)
    MINUS           reduce using rule 58 (literal -> NULL .)
    MULTIPLY        reduce using rule 58 (literal -> NULL .)
    DIVIDE          reduce using rule 58 (literal -> NULL .)
    EQ              reduce using rule 58 (literal -> NULL .)
    NEQ             reduce using rule 58 (literal -> NULL .)
    LT              reduce using rule 58 (literal -> NULL .)
    LEQ             reduce using rule 58 (literal -> NULL .)
    GT              reduce using rule 58 (literal -> NULL .)
    GEQ             reduce using rule 58 (literal -> NULL .)
    AND             reduce using rule 58 (literal -> NULL .)
    OR              reduce using rule 58 (literal -> NULL .)
    COMMA           reduce using rule 58 (literal -> NULL .)
    RPAREN          reduce using rule 58 (literal -> NULL .)
    SEMICOLON       reduce using rule 58 (literal -> NULL .)
    RBRACKET        reduce using rule 58 (literal -> NULL .)


state 78

    (59) literal -> TRUE .

    DOT             reduce using rule 59 (literal -> TRUE .)
    LBRACKET        reduce using rule 59 (literal -> TRUE .)
    PLUS            reduce using rule 59 (literal -> TRUE .)
    MINUS           reduce using rule 59 (literal -> TRUE .)
    MULTIPLY        reduce using rule 59 (literal -> TRUE .)
    DIVIDE          reduce using rule 59 (literal -> TRUE .)
    EQ              reduce using rule 59 (literal -> TRUE .)
    NEQ             reduce using rule 59 (literal -> TRUE .)
    LT              reduce using rule 59 (literal -> TRUE .)
    LEQ             reduce using rule 59 (literal -> TRUE .)
    GT              reduce using rule 59 (literal -> TRUE .)
    GEQ             reduce using rule 59 (literal -> TRUE .)
    AND             reduce using rule 59 (literal -> TRUE .)
    OR              reduce using rule 59 (literal -> TRUE .)
    COMMA           reduce using rule 59 (literal -> TRUE .)
    RPAREN          reduce using rule 59 (literal -> TRUE .)
    SEMICOLON       reduce using rule 59 (literal -> TRUE .)
    RBRACKET        reduce using rule 59 (literal -> TRUE .)


state 79

    (49) stmt -> stmt_expr . SEMICOLON

    SEMICOLON       shift and go to state 119


state 80

    (61) primary -> literal .

    DOT             reduce using rule 61 (primary -> literal .)
    LBRACKET        reduce using rule 61 (primary -> literal .)
    RPAREN          reduce using rule 61 (primary -> literal .)
    PLUS            reduce using rule 61 (primary -> literal .)
    MINUS           reduce using rule 61 (primary -> literal .)
    MULTIPLY        reduce using rule 61 (primary -> literal .)
    DIVIDE          reduce using rule 61 (primary -> literal .)
    EQ              reduce using rule 61 (primary -> literal .)
    NEQ             reduce using rule 61 (primary -> literal .)
    LT              reduce using rule 61 (primary -> literal .)
    LEQ             reduce using rule 61 (primary -> literal .)
    GT              reduce using rule 61 (primary -> literal .)
    GEQ             reduce using rule 61 (primary -> literal .)
    AND             reduce using rule 61 (primary -> literal .)
    OR              reduce using rule 61 (primary -> literal .)
    SEMICOLON       reduce using rule 61 (primary -> literal .)
    RBRACKET        reduce using rule 61 (primary -> literal .)
    COMMA           reduce using rule 61 (primary -> literal .)


state 81

    (108) stmt_expr -> method_invocation .
    (67) primary -> method_invocation .

    SEMICOLON       reduce using rule 108 (stmt_expr -> method_invocation .)
    RPAREN          reduce using rule 108 (stmt_expr -> method_invocation .)
    DOT             reduce using rule 67 (primary -> method_invocation .)
    LBRACKET        reduce using rule 67 (primary -> method_invocation .)


state 82

    (26) var_decl -> type . var_list SEMICOLON
    (31) var_list -> . var_list COMMA var
    (32) var_list -> . var
    (33) var -> . ID
    (34) var -> . var LBRACKET RBRACKET

    ID              shift and go to state 48

    var                            shift and go to state 35
    var_list                       shift and go to state 36

state 83

    (77) method_invocation -> field_access . LPAREN args_opt RPAREN
    (72) lhs -> field_access .

    LPAREN          shift and go to state 120
    ASSIGN          reduce using rule 72 (lhs -> field_access .)
    INC             reduce using rule 72 (lhs -> field_access .)
    DEC             reduce using rule 72 (lhs -> field_access .)
    DOT             reduce using rule 72 (lhs -> field_access .)
    LBRACKET        reduce using rule 72 (lhs -> field_access .)


state 84

    (40) block -> LBRACE stmt_list RBRACE .

    RBRACE          reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    error           reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    IF              reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    LBRACE          reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    INC             reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    DEC             reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    INT             reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    ID              reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    THIS            reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    SUPER           reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    NEW             reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    INT_CONST       reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    FLOAT_CONST     reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    STRING_CONST    reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    ELSE            reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    PUBLIC          reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    PRIVATE         reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    VOID            reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)
    STATIC          reduce using rule 40 (block -> LBRACE stmt_list RBRACE .)


state 85

    (47) stmt -> FOR . LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt

    LPAREN          shift and go to state 121


state 86

    (43) stmt_list -> stmt_list stmt .

    RBRACE          reduce using rule 43 (stmt_list -> stmt_list stmt .)
    error           reduce using rule 43 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 43 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 43 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 43 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 43 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 43 (stmt_list -> stmt_list stmt .)
    CONTINUE        reduce using rule 43 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 43 (stmt_list -> stmt_list stmt .)
    INC             reduce using rule 43 (stmt_list -> stmt_list stmt .)
    DEC             reduce using rule 43 (stmt_list -> stmt_list stmt .)
    INT             reduce using rule 43 (stmt_list -> stmt_list stmt .)
    BOOLEAN         reduce using rule 43 (stmt_list -> stmt_list stmt .)
    FLOAT           reduce using rule 43 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 43 (stmt_list -> stmt_list stmt .)
    THIS            reduce using rule 43 (stmt_list -> stmt_list stmt .)
    SUPER           reduce using rule 43 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 43 (stmt_list -> stmt_list stmt .)
    NEW             reduce using rule 43 (stmt_list -> stmt_list stmt .)
    INT_CONST       reduce using rule 43 (stmt_list -> stmt_list stmt .)
    FLOAT_CONST     reduce using rule 43 (stmt_list -> stmt_list stmt .)
    STRING_CONST    reduce using rule 43 (stmt_list -> stmt_list stmt .)
    NULL            reduce using rule 43 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 43 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 43 (stmt_list -> stmt_list stmt .)


state 87

    (64) primary -> LPAREN . expr RPAREN
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 122
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 88

    (30) type -> ID .
    (75) field_access -> ID .

    ID              reduce using rule 30 (type -> ID .)
    LPAREN          reduce using rule 75 (field_access -> ID .)
    ASSIGN          reduce using rule 75 (field_access -> ID .)
    INC             reduce using rule 75 (field_access -> ID .)
    DEC             reduce using rule 75 (field_access -> ID .)
    DOT             reduce using rule 75 (field_access -> ID .)
    LBRACKET        reduce using rule 75 (field_access -> ID .)


state 89

    (44) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt
    (45) stmt -> IF . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 123


state 90

    (60) literal -> FALSE .

    DOT             reduce using rule 60 (literal -> FALSE .)
    LBRACKET        reduce using rule 60 (literal -> FALSE .)
    PLUS            reduce using rule 60 (literal -> FALSE .)
    MINUS           reduce using rule 60 (literal -> FALSE .)
    MULTIPLY        reduce using rule 60 (literal -> FALSE .)
    DIVIDE          reduce using rule 60 (literal -> FALSE .)
    EQ              reduce using rule 60 (literal -> FALSE .)
    NEQ             reduce using rule 60 (literal -> FALSE .)
    LT              reduce using rule 60 (literal -> FALSE .)
    LEQ             reduce using rule 60 (literal -> FALSE .)
    GT              reduce using rule 60 (literal -> FALSE .)
    GEQ             reduce using rule 60 (literal -> FALSE .)
    AND             reduce using rule 60 (literal -> FALSE .)
    OR              reduce using rule 60 (literal -> FALSE .)
    COMMA           reduce using rule 60 (literal -> FALSE .)
    RPAREN          reduce using rule 60 (literal -> FALSE .)
    SEMICOLON       reduce using rule 60 (literal -> FALSE .)
    RBRACKET        reduce using rule 60 (literal -> FALSE .)


state 91

    (53) stmt -> var_decl .

    RBRACE          reduce using rule 53 (stmt -> var_decl .)
    error           reduce using rule 53 (stmt -> var_decl .)
    IF              reduce using rule 53 (stmt -> var_decl .)
    WHILE           reduce using rule 53 (stmt -> var_decl .)
    FOR             reduce using rule 53 (stmt -> var_decl .)
    RETURN          reduce using rule 53 (stmt -> var_decl .)
    BREAK           reduce using rule 53 (stmt -> var_decl .)
    CONTINUE        reduce using rule 53 (stmt -> var_decl .)
    LBRACE          reduce using rule 53 (stmt -> var_decl .)
    INC             reduce using rule 53 (stmt -> var_decl .)
    DEC             reduce using rule 53 (stmt -> var_decl .)
    INT             reduce using rule 53 (stmt -> var_decl .)
    BOOLEAN         reduce using rule 53 (stmt -> var_decl .)
    FLOAT           reduce using rule 53 (stmt -> var_decl .)
    ID              reduce using rule 53 (stmt -> var_decl .)
    THIS            reduce using rule 53 (stmt -> var_decl .)
    SUPER           reduce using rule 53 (stmt -> var_decl .)
    LPAREN          reduce using rule 53 (stmt -> var_decl .)
    NEW             reduce using rule 53 (stmt -> var_decl .)
    INT_CONST       reduce using rule 53 (stmt -> var_decl .)
    FLOAT_CONST     reduce using rule 53 (stmt -> var_decl .)
    STRING_CONST    reduce using rule 53 (stmt -> var_decl .)
    NULL            reduce using rule 53 (stmt -> var_decl .)
    TRUE            reduce using rule 53 (stmt -> var_decl .)
    FALSE           reduce using rule 53 (stmt -> var_decl .)
    ELSE            reduce using rule 53 (stmt -> var_decl .)


state 92

    (50) stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 124


state 93

    (62) primary -> THIS .

    DOT             reduce using rule 62 (primary -> THIS .)
    LBRACKET        reduce using rule 62 (primary -> THIS .)
    RPAREN          reduce using rule 62 (primary -> THIS .)
    PLUS            reduce using rule 62 (primary -> THIS .)
    MINUS           reduce using rule 62 (primary -> THIS .)
    MULTIPLY        reduce using rule 62 (primary -> THIS .)
    DIVIDE          reduce using rule 62 (primary -> THIS .)
    EQ              reduce using rule 62 (primary -> THIS .)
    NEQ             reduce using rule 62 (primary -> THIS .)
    LT              reduce using rule 62 (primary -> THIS .)
    LEQ             reduce using rule 62 (primary -> THIS .)
    GT              reduce using rule 62 (primary -> THIS .)
    GEQ             reduce using rule 62 (primary -> THIS .)
    AND             reduce using rule 62 (primary -> THIS .)
    OR              reduce using rule 62 (primary -> THIS .)
    SEMICOLON       reduce using rule 62 (primary -> THIS .)
    RBRACKET        reduce using rule 62 (primary -> THIS .)
    COMMA           reduce using rule 62 (primary -> THIS .)


state 94

    (51) stmt -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 125


state 95

    (96) assign -> lhs . ASSIGN expr
    (97) assign -> lhs . INC
    (99) assign -> lhs . DEC
    (66) primary -> lhs .

    ASSIGN          shift and go to state 127
    INC             shift and go to state 128
    DEC             shift and go to state 126
    DOT             reduce using rule 66 (primary -> lhs .)
    LBRACKET        reduce using rule 66 (primary -> lhs .)


state 96

    (41) block -> LBRACE stmt_list error . RBRACE
    (54) stmt -> error . SEMICOLON

    RBRACE          shift and go to state 129
    SEMICOLON       shift and go to state 130


state 97

    (63) primary -> SUPER .

    DOT             reduce using rule 63 (primary -> SUPER .)
    LBRACKET        reduce using rule 63 (primary -> SUPER .)
    RPAREN          reduce using rule 63 (primary -> SUPER .)
    PLUS            reduce using rule 63 (primary -> SUPER .)
    MINUS           reduce using rule 63 (primary -> SUPER .)
    MULTIPLY        reduce using rule 63 (primary -> SUPER .)
    DIVIDE          reduce using rule 63 (primary -> SUPER .)
    EQ              reduce using rule 63 (primary -> SUPER .)
    NEQ             reduce using rule 63 (primary -> SUPER .)
    LT              reduce using rule 63 (primary -> SUPER .)
    LEQ             reduce using rule 63 (primary -> SUPER .)
    GT              reduce using rule 63 (primary -> SUPER .)
    GEQ             reduce using rule 63 (primary -> SUPER .)
    AND             reduce using rule 63 (primary -> SUPER .)
    OR              reduce using rule 63 (primary -> SUPER .)
    SEMICOLON       reduce using rule 63 (primary -> SUPER .)
    RBRACKET        reduce using rule 63 (primary -> SUPER .)
    COMMA           reduce using rule 63 (primary -> SUPER .)


state 98

    (107) stmt_expr -> assign .

    SEMICOLON       reduce using rule 107 (stmt_expr -> assign .)
    RPAREN          reduce using rule 107 (stmt_expr -> assign .)


state 99

    (52) stmt -> block .

    RBRACE          reduce using rule 52 (stmt -> block .)
    error           reduce using rule 52 (stmt -> block .)
    IF              reduce using rule 52 (stmt -> block .)
    WHILE           reduce using rule 52 (stmt -> block .)
    FOR             reduce using rule 52 (stmt -> block .)
    RETURN          reduce using rule 52 (stmt -> block .)
    BREAK           reduce using rule 52 (stmt -> block .)
    CONTINUE        reduce using rule 52 (stmt -> block .)
    LBRACE          reduce using rule 52 (stmt -> block .)
    INC             reduce using rule 52 (stmt -> block .)
    DEC             reduce using rule 52 (stmt -> block .)
    INT             reduce using rule 52 (stmt -> block .)
    BOOLEAN         reduce using rule 52 (stmt -> block .)
    FLOAT           reduce using rule 52 (stmt -> block .)
    ID              reduce using rule 52 (stmt -> block .)
    THIS            reduce using rule 52 (stmt -> block .)
    SUPER           reduce using rule 52 (stmt -> block .)
    LPAREN          reduce using rule 52 (stmt -> block .)
    NEW             reduce using rule 52 (stmt -> block .)
    INT_CONST       reduce using rule 52 (stmt -> block .)
    FLOAT_CONST     reduce using rule 52 (stmt -> block .)
    STRING_CONST    reduce using rule 52 (stmt -> block .)
    NULL            reduce using rule 52 (stmt -> block .)
    TRUE            reduce using rule 52 (stmt -> block .)
    FALSE           reduce using rule 52 (stmt -> block .)
    ELSE            reduce using rule 52 (stmt -> block .)


state 100

    (98) assign -> INC . lhs
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN

    ID              shift and go to state 109
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 108
    primary                        shift and go to state 69
    literal                        shift and go to state 80
    lhs                            shift and go to state 131
    method_invocation              shift and go to state 107
    array_access                   shift and go to state 74

state 101

    (80) expr -> new_array .

    PLUS            reduce using rule 80 (expr -> new_array .)
    MINUS           reduce using rule 80 (expr -> new_array .)
    MULTIPLY        reduce using rule 80 (expr -> new_array .)
    DIVIDE          reduce using rule 80 (expr -> new_array .)
    EQ              reduce using rule 80 (expr -> new_array .)
    NEQ             reduce using rule 80 (expr -> new_array .)
    LT              reduce using rule 80 (expr -> new_array .)
    LEQ             reduce using rule 80 (expr -> new_array .)
    GT              reduce using rule 80 (expr -> new_array .)
    GEQ             reduce using rule 80 (expr -> new_array .)
    AND             reduce using rule 80 (expr -> new_array .)
    OR              reduce using rule 80 (expr -> new_array .)
    SEMICOLON       reduce using rule 80 (expr -> new_array .)
    RPAREN          reduce using rule 80 (expr -> new_array .)
    RBRACKET        reduce using rule 80 (expr -> new_array .)
    COMMA           reduce using rule 80 (expr -> new_array .)


state 102

    (78) expr -> primary .
    (74) field_access -> primary . DOT ID
    (76) array_access -> primary . LBRACKET expr RBRACKET

    PLUS            reduce using rule 78 (expr -> primary .)
    MINUS           reduce using rule 78 (expr -> primary .)
    MULTIPLY        reduce using rule 78 (expr -> primary .)
    DIVIDE          reduce using rule 78 (expr -> primary .)
    EQ              reduce using rule 78 (expr -> primary .)
    NEQ             reduce using rule 78 (expr -> primary .)
    LT              reduce using rule 78 (expr -> primary .)
    LEQ             reduce using rule 78 (expr -> primary .)
    GT              reduce using rule 78 (expr -> primary .)
    GEQ             reduce using rule 78 (expr -> primary .)
    AND             reduce using rule 78 (expr -> primary .)
    OR              reduce using rule 78 (expr -> primary .)
    SEMICOLON       reduce using rule 78 (expr -> primary .)
    RPAREN          reduce using rule 78 (expr -> primary .)
    RBRACKET        reduce using rule 78 (expr -> primary .)
    COMMA           reduce using rule 78 (expr -> primary .)
    DOT             shift and go to state 115
    LBRACKET        shift and go to state 114


state 103

    (65) primary -> NEW . ID LPAREN args_opt RPAREN
    (101) new_array -> NEW . type dim_expr_plus dim_star
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID

    ID              shift and go to state 133
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29

    type                           shift and go to state 132

state 104

    (94) expr -> MINUS . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 134
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 105

    (48) stmt -> RETURN expr_opt . SEMICOLON

    SEMICOLON       shift and go to state 135


state 106

    (93) expr -> PLUS . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 136
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 107

    (67) primary -> method_invocation .

    DOT             reduce using rule 67 (primary -> method_invocation .)
    LBRACKET        reduce using rule 67 (primary -> method_invocation .)
    RPAREN          reduce using rule 67 (primary -> method_invocation .)
    PLUS            reduce using rule 67 (primary -> method_invocation .)
    MINUS           reduce using rule 67 (primary -> method_invocation .)
    MULTIPLY        reduce using rule 67 (primary -> method_invocation .)
    DIVIDE          reduce using rule 67 (primary -> method_invocation .)
    EQ              reduce using rule 67 (primary -> method_invocation .)
    NEQ             reduce using rule 67 (primary -> method_invocation .)
    LT              reduce using rule 67 (primary -> method_invocation .)
    LEQ             reduce using rule 67 (primary -> method_invocation .)
    GT              reduce using rule 67 (primary -> method_invocation .)
    GEQ             reduce using rule 67 (primary -> method_invocation .)
    AND             reduce using rule 67 (primary -> method_invocation .)
    OR              reduce using rule 67 (primary -> method_invocation .)
    SEMICOLON       reduce using rule 67 (primary -> method_invocation .)
    RBRACKET        reduce using rule 67 (primary -> method_invocation .)
    COMMA           reduce using rule 67 (primary -> method_invocation .)


state 108

    (72) lhs -> field_access .
    (77) method_invocation -> field_access . LPAREN args_opt RPAREN

    ASSIGN          reduce using rule 72 (lhs -> field_access .)
    INC             reduce using rule 72 (lhs -> field_access .)
    DEC             reduce using rule 72 (lhs -> field_access .)
    DOT             reduce using rule 72 (lhs -> field_access .)
    LBRACKET        reduce using rule 72 (lhs -> field_access .)
    PLUS            reduce using rule 72 (lhs -> field_access .)
    MINUS           reduce using rule 72 (lhs -> field_access .)
    MULTIPLY        reduce using rule 72 (lhs -> field_access .)
    DIVIDE          reduce using rule 72 (lhs -> field_access .)
    EQ              reduce using rule 72 (lhs -> field_access .)
    NEQ             reduce using rule 72 (lhs -> field_access .)
    LT              reduce using rule 72 (lhs -> field_access .)
    LEQ             reduce using rule 72 (lhs -> field_access .)
    GT              reduce using rule 72 (lhs -> field_access .)
    GEQ             reduce using rule 72 (lhs -> field_access .)
    AND             reduce using rule 72 (lhs -> field_access .)
    OR              reduce using rule 72 (lhs -> field_access .)
    SEMICOLON       reduce using rule 72 (lhs -> field_access .)
    RPAREN          reduce using rule 72 (lhs -> field_access .)
    RBRACKET        reduce using rule 72 (lhs -> field_access .)
    COMMA           reduce using rule 72 (lhs -> field_access .)
    LPAREN          shift and go to state 120


state 109

    (75) field_access -> ID .

    LPAREN          reduce using rule 75 (field_access -> ID .)
    ASSIGN          reduce using rule 75 (field_access -> ID .)
    INC             reduce using rule 75 (field_access -> ID .)
    DEC             reduce using rule 75 (field_access -> ID .)
    DOT             reduce using rule 75 (field_access -> ID .)
    LBRACKET        reduce using rule 75 (field_access -> ID .)
    PLUS            reduce using rule 75 (field_access -> ID .)
    MINUS           reduce using rule 75 (field_access -> ID .)
    MULTIPLY        reduce using rule 75 (field_access -> ID .)
    DIVIDE          reduce using rule 75 (field_access -> ID .)
    EQ              reduce using rule 75 (field_access -> ID .)
    NEQ             reduce using rule 75 (field_access -> ID .)
    LT              reduce using rule 75 (field_access -> ID .)
    LEQ             reduce using rule 75 (field_access -> ID .)
    GT              reduce using rule 75 (field_access -> ID .)
    GEQ             reduce using rule 75 (field_access -> ID .)
    AND             reduce using rule 75 (field_access -> ID .)
    OR              reduce using rule 75 (field_access -> ID .)
    SEMICOLON       reduce using rule 75 (field_access -> ID .)
    RPAREN          reduce using rule 75 (field_access -> ID .)
    RBRACKET        reduce using rule 75 (field_access -> ID .)
    COMMA           reduce using rule 75 (field_access -> ID .)


state 110

    (111) expr_opt -> expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    SEMICOLON       reduce using rule 111 (expr_opt -> expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 111

    (79) expr -> assign .

    PLUS            reduce using rule 79 (expr -> assign .)
    MINUS           reduce using rule 79 (expr -> assign .)
    MULTIPLY        reduce using rule 79 (expr -> assign .)
    DIVIDE          reduce using rule 79 (expr -> assign .)
    EQ              reduce using rule 79 (expr -> assign .)
    NEQ             reduce using rule 79 (expr -> assign .)
    LT              reduce using rule 79 (expr -> assign .)
    LEQ             reduce using rule 79 (expr -> assign .)
    GT              reduce using rule 79 (expr -> assign .)
    GEQ             reduce using rule 79 (expr -> assign .)
    AND             reduce using rule 79 (expr -> assign .)
    OR              reduce using rule 79 (expr -> assign .)
    SEMICOLON       reduce using rule 79 (expr -> assign .)
    RPAREN          reduce using rule 79 (expr -> assign .)
    RBRACKET        reduce using rule 79 (expr -> assign .)
    COMMA           reduce using rule 79 (expr -> assign .)


state 112

    (66) primary -> lhs .
    (96) assign -> lhs . ASSIGN expr
    (97) assign -> lhs . INC
    (99) assign -> lhs . DEC

    DOT             reduce using rule 66 (primary -> lhs .)
    LBRACKET        reduce using rule 66 (primary -> lhs .)
    RPAREN          reduce using rule 66 (primary -> lhs .)
    PLUS            reduce using rule 66 (primary -> lhs .)
    MINUS           reduce using rule 66 (primary -> lhs .)
    MULTIPLY        reduce using rule 66 (primary -> lhs .)
    DIVIDE          reduce using rule 66 (primary -> lhs .)
    EQ              reduce using rule 66 (primary -> lhs .)
    NEQ             reduce using rule 66 (primary -> lhs .)
    LT              reduce using rule 66 (primary -> lhs .)
    LEQ             reduce using rule 66 (primary -> lhs .)
    GT              reduce using rule 66 (primary -> lhs .)
    GEQ             reduce using rule 66 (primary -> lhs .)
    AND             reduce using rule 66 (primary -> lhs .)
    OR              reduce using rule 66 (primary -> lhs .)
    SEMICOLON       reduce using rule 66 (primary -> lhs .)
    RBRACKET        reduce using rule 66 (primary -> lhs .)
    COMMA           reduce using rule 66 (primary -> lhs .)
    ASSIGN          shift and go to state 127
    INC             shift and go to state 128
    DEC             shift and go to state 126


state 113

    (95) expr -> NOT . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 149
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 114

    (76) array_access -> primary LBRACKET . expr RBRACKET
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 150
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 115

    (74) field_access -> primary DOT . ID

    ID              shift and go to state 151


state 116

    (46) stmt -> WHILE LPAREN . expr RPAREN stmt
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 152
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    array_access                   shift and go to state 74
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 117

    (65) primary -> NEW ID . LPAREN args_opt RPAREN

    LPAREN          shift and go to state 153


state 118

    (100) assign -> DEC lhs .
    (66) primary -> lhs .

    SEMICOLON       reduce using rule 100 (assign -> DEC lhs .)
    RPAREN          reduce using rule 100 (assign -> DEC lhs .)
    PLUS            reduce using rule 100 (assign -> DEC lhs .)
    MINUS           reduce using rule 100 (assign -> DEC lhs .)
    MULTIPLY        reduce using rule 100 (assign -> DEC lhs .)
    DIVIDE          reduce using rule 100 (assign -> DEC lhs .)
    EQ              reduce using rule 100 (assign -> DEC lhs .)
    NEQ             reduce using rule 100 (assign -> DEC lhs .)
    LT              reduce using rule 100 (assign -> DEC lhs .)
    LEQ             reduce using rule 100 (assign -> DEC lhs .)
    GT              reduce using rule 100 (assign -> DEC lhs .)
    GEQ             reduce using rule 100 (assign -> DEC lhs .)
    AND             reduce using rule 100 (assign -> DEC lhs .)
    OR              reduce using rule 100 (assign -> DEC lhs .)
    RBRACKET        reduce using rule 100 (assign -> DEC lhs .)
    COMMA           reduce using rule 100 (assign -> DEC lhs .)
    DOT             reduce using rule 66 (primary -> lhs .)
    LBRACKET        reduce using rule 66 (primary -> lhs .)


state 119

    (49) stmt -> stmt_expr SEMICOLON .

    RBRACE          reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    error           reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    IF              reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    WHILE           reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    FOR             reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    RETURN          reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    BREAK           reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    CONTINUE        reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    LBRACE          reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    INC             reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    DEC             reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    INT             reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    BOOLEAN         reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    FLOAT           reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    ID              reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    THIS            reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    SUPER           reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    LPAREN          reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    NEW             reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    INT_CONST       reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    FLOAT_CONST     reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    STRING_CONST    reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    NULL            reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    TRUE            reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    FALSE           reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)
    ELSE            reduce using rule 49 (stmt -> stmt_expr SEMICOLON .)


state 120

    (77) method_invocation -> field_access LPAREN . args_opt RPAREN
    (68) args_opt -> . arg_plus
    (69) args_opt -> .
    (70) arg_plus -> . arg_plus COMMA expr
    (71) arg_plus -> . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    RPAREN          reduce using rule 69 (args_opt -> .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    field_access                   shift and go to state 108
    new_array                      shift and go to state 101
    expr                           shift and go to state 154
    primary                        shift and go to state 102
    array_access                   shift and go to state 74
    args_opt                       shift and go to state 155
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    arg_plus                       shift and go to state 156
    assign                         shift and go to state 111

state 121

    (47) stmt -> FOR LPAREN . stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (109) stmt_expr_opt -> . stmt_expr
    (110) stmt_expr_opt -> .
    (107) stmt_expr -> . assign
    (108) stmt_expr -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE

    SEMICOLON       reduce using rule 110 (stmt_expr_opt -> .)
    INC             shift and go to state 100
    DEC             shift and go to state 73
    ID              shift and go to state 109
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 83
    primary                        shift and go to state 69
    stmt_expr_opt                  shift and go to state 158
    stmt_expr                      shift and go to state 157
    literal                        shift and go to state 80
    lhs                            shift and go to state 95
    method_invocation              shift and go to state 81
    array_access                   shift and go to state 74
    assign                         shift and go to state 98

state 122

    (64) primary -> LPAREN expr . RPAREN
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    RPAREN          shift and go to state 159
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 123

    (44) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (45) stmt -> IF LPAREN . expr RPAREN stmt
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 160
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    array_access                   shift and go to state 74
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 124

    (50) stmt -> BREAK SEMICOLON .

    RBRACE          reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    error           reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    IF              reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    FOR             reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    RETURN          reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    INC             reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    DEC             reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    INT             reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    ID              reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    THIS            reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    SUPER           reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    NEW             reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    INT_CONST       reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    FLOAT_CONST     reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    STRING_CONST    reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    NULL            reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    TRUE            reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    FALSE           reduce using rule 50 (stmt -> BREAK SEMICOLON .)
    ELSE            reduce using rule 50 (stmt -> BREAK SEMICOLON .)


state 125

    (51) stmt -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    error           reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    IF              reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    INC             reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    DEC             reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    INT             reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    BOOLEAN         reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    ID              reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    SUPER           reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    INT_CONST       reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    FLOAT_CONST     reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    STRING_CONST    reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 51 (stmt -> CONTINUE SEMICOLON .)


state 126

    (99) assign -> lhs DEC .

    SEMICOLON       reduce using rule 99 (assign -> lhs DEC .)
    RPAREN          reduce using rule 99 (assign -> lhs DEC .)
    PLUS            reduce using rule 99 (assign -> lhs DEC .)
    MINUS           reduce using rule 99 (assign -> lhs DEC .)
    MULTIPLY        reduce using rule 99 (assign -> lhs DEC .)
    DIVIDE          reduce using rule 99 (assign -> lhs DEC .)
    EQ              reduce using rule 99 (assign -> lhs DEC .)
    NEQ             reduce using rule 99 (assign -> lhs DEC .)
    LT              reduce using rule 99 (assign -> lhs DEC .)
    LEQ             reduce using rule 99 (assign -> lhs DEC .)
    GT              reduce using rule 99 (assign -> lhs DEC .)
    GEQ             reduce using rule 99 (assign -> lhs DEC .)
    AND             reduce using rule 99 (assign -> lhs DEC .)
    OR              reduce using rule 99 (assign -> lhs DEC .)
    RBRACKET        reduce using rule 99 (assign -> lhs DEC .)
    COMMA           reduce using rule 99 (assign -> lhs DEC .)


state 127

    (96) assign -> lhs ASSIGN . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 161
    primary                        shift and go to state 102
    array_access                   shift and go to state 74
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 128

    (97) assign -> lhs INC .

    SEMICOLON       reduce using rule 97 (assign -> lhs INC .)
    RPAREN          reduce using rule 97 (assign -> lhs INC .)
    PLUS            reduce using rule 97 (assign -> lhs INC .)
    MINUS           reduce using rule 97 (assign -> lhs INC .)
    MULTIPLY        reduce using rule 97 (assign -> lhs INC .)
    DIVIDE          reduce using rule 97 (assign -> lhs INC .)
    EQ              reduce using rule 97 (assign -> lhs INC .)
    NEQ             reduce using rule 97 (assign -> lhs INC .)
    LT              reduce using rule 97 (assign -> lhs INC .)
    LEQ             reduce using rule 97 (assign -> lhs INC .)
    GT              reduce using rule 97 (assign -> lhs INC .)
    GEQ             reduce using rule 97 (assign -> lhs INC .)
    AND             reduce using rule 97 (assign -> lhs INC .)
    OR              reduce using rule 97 (assign -> lhs INC .)
    RBRACKET        reduce using rule 97 (assign -> lhs INC .)
    COMMA           reduce using rule 97 (assign -> lhs INC .)


state 129

    (41) block -> LBRACE stmt_list error RBRACE .

    RBRACE          reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    error           reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    IF              reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    WHILE           reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    FOR             reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    RETURN          reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    BREAK           reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    CONTINUE        reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    LBRACE          reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    INC             reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    DEC             reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    INT             reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    BOOLEAN         reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    FLOAT           reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    ID              reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    THIS            reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    SUPER           reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    LPAREN          reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    NEW             reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    INT_CONST       reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    FLOAT_CONST     reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    STRING_CONST    reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    NULL            reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    TRUE            reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    FALSE           reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    ELSE            reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    PUBLIC          reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    PRIVATE         reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    VOID            reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)
    STATIC          reduce using rule 41 (block -> LBRACE stmt_list error RBRACE .)


state 130

    (54) stmt -> error SEMICOLON .

    RBRACE          reduce using rule 54 (stmt -> error SEMICOLON .)
    error           reduce using rule 54 (stmt -> error SEMICOLON .)
    IF              reduce using rule 54 (stmt -> error SEMICOLON .)
    WHILE           reduce using rule 54 (stmt -> error SEMICOLON .)
    FOR             reduce using rule 54 (stmt -> error SEMICOLON .)
    RETURN          reduce using rule 54 (stmt -> error SEMICOLON .)
    BREAK           reduce using rule 54 (stmt -> error SEMICOLON .)
    CONTINUE        reduce using rule 54 (stmt -> error SEMICOLON .)
    LBRACE          reduce using rule 54 (stmt -> error SEMICOLON .)
    INC             reduce using rule 54 (stmt -> error SEMICOLON .)
    DEC             reduce using rule 54 (stmt -> error SEMICOLON .)
    INT             reduce using rule 54 (stmt -> error SEMICOLON .)
    BOOLEAN         reduce using rule 54 (stmt -> error SEMICOLON .)
    FLOAT           reduce using rule 54 (stmt -> error SEMICOLON .)
    ID              reduce using rule 54 (stmt -> error SEMICOLON .)
    THIS            reduce using rule 54 (stmt -> error SEMICOLON .)
    SUPER           reduce using rule 54 (stmt -> error SEMICOLON .)
    LPAREN          reduce using rule 54 (stmt -> error SEMICOLON .)
    NEW             reduce using rule 54 (stmt -> error SEMICOLON .)
    INT_CONST       reduce using rule 54 (stmt -> error SEMICOLON .)
    FLOAT_CONST     reduce using rule 54 (stmt -> error SEMICOLON .)
    STRING_CONST    reduce using rule 54 (stmt -> error SEMICOLON .)
    NULL            reduce using rule 54 (stmt -> error SEMICOLON .)
    TRUE            reduce using rule 54 (stmt -> error SEMICOLON .)
    FALSE           reduce using rule 54 (stmt -> error SEMICOLON .)
    ELSE            reduce using rule 54 (stmt -> error SEMICOLON .)


state 131

    (98) assign -> INC lhs .
    (66) primary -> lhs .

    SEMICOLON       reduce using rule 98 (assign -> INC lhs .)
    RPAREN          reduce using rule 98 (assign -> INC lhs .)
    PLUS            reduce using rule 98 (assign -> INC lhs .)
    MINUS           reduce using rule 98 (assign -> INC lhs .)
    MULTIPLY        reduce using rule 98 (assign -> INC lhs .)
    DIVIDE          reduce using rule 98 (assign -> INC lhs .)
    EQ              reduce using rule 98 (assign -> INC lhs .)
    NEQ             reduce using rule 98 (assign -> INC lhs .)
    LT              reduce using rule 98 (assign -> INC lhs .)
    LEQ             reduce using rule 98 (assign -> INC lhs .)
    GT              reduce using rule 98 (assign -> INC lhs .)
    GEQ             reduce using rule 98 (assign -> INC lhs .)
    AND             reduce using rule 98 (assign -> INC lhs .)
    OR              reduce using rule 98 (assign -> INC lhs .)
    RBRACKET        reduce using rule 98 (assign -> INC lhs .)
    COMMA           reduce using rule 98 (assign -> INC lhs .)
    DOT             reduce using rule 66 (primary -> lhs .)
    LBRACKET        reduce using rule 66 (primary -> lhs .)


state 132

    (101) new_array -> NEW type . dim_expr_plus dim_star
    (102) dim_expr_plus -> . dim_expr_plus dim_expr
    (103) dim_expr_plus -> . dim_expr
    (104) dim_expr -> . LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 164

    dim_expr                       shift and go to state 163
    dim_expr_plus                  shift and go to state 162

state 133

    (65) primary -> NEW ID . LPAREN args_opt RPAREN
    (30) type -> ID .

    LPAREN          shift and go to state 153
    LBRACKET        reduce using rule 30 (type -> ID .)


state 134

    (94) expr -> MINUS expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    PLUS            reduce using rule 94 (expr -> MINUS expr .)
    MINUS           reduce using rule 94 (expr -> MINUS expr .)
    MULTIPLY        reduce using rule 94 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 94 (expr -> MINUS expr .)
    EQ              reduce using rule 94 (expr -> MINUS expr .)
    NEQ             reduce using rule 94 (expr -> MINUS expr .)
    LT              reduce using rule 94 (expr -> MINUS expr .)
    LEQ             reduce using rule 94 (expr -> MINUS expr .)
    GT              reduce using rule 94 (expr -> MINUS expr .)
    GEQ             reduce using rule 94 (expr -> MINUS expr .)
    AND             reduce using rule 94 (expr -> MINUS expr .)
    OR              reduce using rule 94 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 94 (expr -> MINUS expr .)
    RPAREN          reduce using rule 94 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 94 (expr -> MINUS expr .)
    COMMA           reduce using rule 94 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 147 ]
  ! MULTIPLY        [ shift and go to state 145 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 135

    (48) stmt -> RETURN expr_opt SEMICOLON .

    RBRACE          reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    error           reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    IF              reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    WHILE           reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    FOR             reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    RETURN          reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    BREAK           reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    CONTINUE        reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    LBRACE          reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    INC             reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    DEC             reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    INT             reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    BOOLEAN         reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    FLOAT           reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    ID              reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    THIS            reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    SUPER           reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    LPAREN          reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    NEW             reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    INT_CONST       reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    FLOAT_CONST     reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    STRING_CONST    reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    NULL            reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    TRUE            reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    FALSE           reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)
    ELSE            reduce using rule 48 (stmt -> RETURN expr_opt SEMICOLON .)


state 136

    (93) expr -> PLUS expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    PLUS            reduce using rule 93 (expr -> PLUS expr .)
    MINUS           reduce using rule 93 (expr -> PLUS expr .)
    MULTIPLY        reduce using rule 93 (expr -> PLUS expr .)
    DIVIDE          reduce using rule 93 (expr -> PLUS expr .)
    EQ              reduce using rule 93 (expr -> PLUS expr .)
    NEQ             reduce using rule 93 (expr -> PLUS expr .)
    LT              reduce using rule 93 (expr -> PLUS expr .)
    LEQ             reduce using rule 93 (expr -> PLUS expr .)
    GT              reduce using rule 93 (expr -> PLUS expr .)
    GEQ             reduce using rule 93 (expr -> PLUS expr .)
    AND             reduce using rule 93 (expr -> PLUS expr .)
    OR              reduce using rule 93 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 93 (expr -> PLUS expr .)
    RPAREN          reduce using rule 93 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 93 (expr -> PLUS expr .)
    COMMA           reduce using rule 93 (expr -> PLUS expr .)

  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 147 ]
  ! MULTIPLY        [ shift and go to state 145 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 137

    (91) expr -> expr AND . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 165
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 138

    (90) expr -> expr GEQ . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 166
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 139

    (89) expr -> expr GT . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 167
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 140

    (84) expr -> expr DIVIDE . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 168
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 141

    (92) expr -> expr OR . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 169
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 142

    (88) expr -> expr LEQ . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 170
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 143

    (87) expr -> expr LT . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 171
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 144

    (81) expr -> expr PLUS . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 172
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 145

    (83) expr -> expr MULTIPLY . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 173
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 146

    (85) expr -> expr EQ . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 174
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 147

    (82) expr -> expr MINUS . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 175
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 148

    (86) expr -> expr NEQ . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 176
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 149

    (95) expr -> NOT expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    PLUS            reduce using rule 95 (expr -> NOT expr .)
    MINUS           reduce using rule 95 (expr -> NOT expr .)
    MULTIPLY        reduce using rule 95 (expr -> NOT expr .)
    DIVIDE          reduce using rule 95 (expr -> NOT expr .)
    EQ              reduce using rule 95 (expr -> NOT expr .)
    NEQ             reduce using rule 95 (expr -> NOT expr .)
    LT              reduce using rule 95 (expr -> NOT expr .)
    LEQ             reduce using rule 95 (expr -> NOT expr .)
    GT              reduce using rule 95 (expr -> NOT expr .)
    GEQ             reduce using rule 95 (expr -> NOT expr .)
    AND             reduce using rule 95 (expr -> NOT expr .)
    OR              reduce using rule 95 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 95 (expr -> NOT expr .)
    RPAREN          reduce using rule 95 (expr -> NOT expr .)
    RBRACKET        reduce using rule 95 (expr -> NOT expr .)
    COMMA           reduce using rule 95 (expr -> NOT expr .)

  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 147 ]
  ! MULTIPLY        [ shift and go to state 145 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 150

    (76) array_access -> primary LBRACKET expr . RBRACKET
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    RBRACKET        shift and go to state 177
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 151

    (74) field_access -> primary DOT ID .

    LPAREN          reduce using rule 74 (field_access -> primary DOT ID .)
    ASSIGN          reduce using rule 74 (field_access -> primary DOT ID .)
    INC             reduce using rule 74 (field_access -> primary DOT ID .)
    DEC             reduce using rule 74 (field_access -> primary DOT ID .)
    DOT             reduce using rule 74 (field_access -> primary DOT ID .)
    LBRACKET        reduce using rule 74 (field_access -> primary DOT ID .)
    PLUS            reduce using rule 74 (field_access -> primary DOT ID .)
    MINUS           reduce using rule 74 (field_access -> primary DOT ID .)
    MULTIPLY        reduce using rule 74 (field_access -> primary DOT ID .)
    DIVIDE          reduce using rule 74 (field_access -> primary DOT ID .)
    EQ              reduce using rule 74 (field_access -> primary DOT ID .)
    NEQ             reduce using rule 74 (field_access -> primary DOT ID .)
    LT              reduce using rule 74 (field_access -> primary DOT ID .)
    LEQ             reduce using rule 74 (field_access -> primary DOT ID .)
    GT              reduce using rule 74 (field_access -> primary DOT ID .)
    GEQ             reduce using rule 74 (field_access -> primary DOT ID .)
    AND             reduce using rule 74 (field_access -> primary DOT ID .)
    OR              reduce using rule 74 (field_access -> primary DOT ID .)
    SEMICOLON       reduce using rule 74 (field_access -> primary DOT ID .)
    RPAREN          reduce using rule 74 (field_access -> primary DOT ID .)
    RBRACKET        reduce using rule 74 (field_access -> primary DOT ID .)
    COMMA           reduce using rule 74 (field_access -> primary DOT ID .)


state 152

    (46) stmt -> WHILE LPAREN expr . RPAREN stmt
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    RPAREN          shift and go to state 178
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 153

    (65) primary -> NEW ID LPAREN . args_opt RPAREN
    (68) args_opt -> . arg_plus
    (69) args_opt -> .
    (70) arg_plus -> . arg_plus COMMA expr
    (71) arg_plus -> . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    RPAREN          reduce using rule 69 (args_opt -> .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 154
    args_opt                       shift and go to state 179
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    arg_plus                       shift and go to state 156
    assign                         shift and go to state 111

state 154

    (71) arg_plus -> expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    COMMA           reduce using rule 71 (arg_plus -> expr .)
    RPAREN          reduce using rule 71 (arg_plus -> expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 155

    (77) method_invocation -> field_access LPAREN args_opt . RPAREN

    RPAREN          shift and go to state 180


state 156

    (68) args_opt -> arg_plus .
    (70) arg_plus -> arg_plus . COMMA expr

    RPAREN          reduce using rule 68 (args_opt -> arg_plus .)
    COMMA           shift and go to state 181


state 157

    (109) stmt_expr_opt -> stmt_expr .

    SEMICOLON       reduce using rule 109 (stmt_expr_opt -> stmt_expr .)
    RPAREN          reduce using rule 109 (stmt_expr_opt -> stmt_expr .)


state 158

    (47) stmt -> FOR LPAREN stmt_expr_opt . SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt

    SEMICOLON       shift and go to state 182


state 159

    (64) primary -> LPAREN expr RPAREN .

    DOT             reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    MULTIPLY        reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    EQ              reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    LT              reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    LEQ             reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    GT              reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    GEQ             reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    AND             reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    OR              reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 64 (primary -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 64 (primary -> LPAREN expr RPAREN .)


state 160

    (44) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (45) stmt -> IF LPAREN expr . RPAREN stmt
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    RPAREN          shift and go to state 183
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 161

    (96) assign -> lhs ASSIGN expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    SEMICOLON       reduce using rule 96 (assign -> lhs ASSIGN expr .)
    RPAREN          reduce using rule 96 (assign -> lhs ASSIGN expr .)
    RBRACKET        reduce using rule 96 (assign -> lhs ASSIGN expr .)
    COMMA           reduce using rule 96 (assign -> lhs ASSIGN expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141

  ! PLUS            [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! MULTIPLY        [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! EQ              [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! LT              [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! LEQ             [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! GT              [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! GEQ             [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! AND             [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]
  ! OR              [ reduce using rule 96 (assign -> lhs ASSIGN expr .) ]


state 162

    (101) new_array -> NEW type dim_expr_plus . dim_star
    (102) dim_expr_plus -> dim_expr_plus . dim_expr
    (105) dim_star -> . LBRACKET RBRACKET dim_star
    (106) dim_star -> .
    (104) dim_expr -> . LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 186
    PLUS            reduce using rule 106 (dim_star -> .)
    MINUS           reduce using rule 106 (dim_star -> .)
    MULTIPLY        reduce using rule 106 (dim_star -> .)
    DIVIDE          reduce using rule 106 (dim_star -> .)
    EQ              reduce using rule 106 (dim_star -> .)
    NEQ             reduce using rule 106 (dim_star -> .)
    LT              reduce using rule 106 (dim_star -> .)
    LEQ             reduce using rule 106 (dim_star -> .)
    GT              reduce using rule 106 (dim_star -> .)
    GEQ             reduce using rule 106 (dim_star -> .)
    AND             reduce using rule 106 (dim_star -> .)
    OR              reduce using rule 106 (dim_star -> .)
    SEMICOLON       reduce using rule 106 (dim_star -> .)
    RPAREN          reduce using rule 106 (dim_star -> .)
    RBRACKET        reduce using rule 106 (dim_star -> .)
    COMMA           reduce using rule 106 (dim_star -> .)

    dim_expr                       shift and go to state 185
    dim_star                       shift and go to state 184

state 163

    (103) dim_expr_plus -> dim_expr .

    LBRACKET        reduce using rule 103 (dim_expr_plus -> dim_expr .)
    PLUS            reduce using rule 103 (dim_expr_plus -> dim_expr .)
    MINUS           reduce using rule 103 (dim_expr_plus -> dim_expr .)
    MULTIPLY        reduce using rule 103 (dim_expr_plus -> dim_expr .)
    DIVIDE          reduce using rule 103 (dim_expr_plus -> dim_expr .)
    EQ              reduce using rule 103 (dim_expr_plus -> dim_expr .)
    NEQ             reduce using rule 103 (dim_expr_plus -> dim_expr .)
    LT              reduce using rule 103 (dim_expr_plus -> dim_expr .)
    LEQ             reduce using rule 103 (dim_expr_plus -> dim_expr .)
    GT              reduce using rule 103 (dim_expr_plus -> dim_expr .)
    GEQ             reduce using rule 103 (dim_expr_plus -> dim_expr .)
    AND             reduce using rule 103 (dim_expr_plus -> dim_expr .)
    OR              reduce using rule 103 (dim_expr_plus -> dim_expr .)
    SEMICOLON       reduce using rule 103 (dim_expr_plus -> dim_expr .)
    RPAREN          reduce using rule 103 (dim_expr_plus -> dim_expr .)
    RBRACKET        reduce using rule 103 (dim_expr_plus -> dim_expr .)
    COMMA           reduce using rule 103 (dim_expr_plus -> dim_expr .)


state 164

    (104) dim_expr -> LBRACKET . expr RBRACKET
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 187
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 165

    (91) expr -> expr AND expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    AND             reduce using rule 91 (expr -> expr AND expr .)
    OR              reduce using rule 91 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 91 (expr -> expr AND expr .)
    RPAREN          reduce using rule 91 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 91 (expr -> expr AND expr .)
    COMMA           reduce using rule 91 (expr -> expr AND expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138

  ! PLUS            [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! MULTIPLY        [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! NEQ             [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! LEQ             [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! GEQ             [ reduce using rule 91 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 166

    (90) expr -> expr GEQ expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    EQ              reduce using rule 90 (expr -> expr GEQ expr .)
    NEQ             reduce using rule 90 (expr -> expr GEQ expr .)
    LT              reduce using rule 90 (expr -> expr GEQ expr .)
    LEQ             reduce using rule 90 (expr -> expr GEQ expr .)
    GT              reduce using rule 90 (expr -> expr GEQ expr .)
    GEQ             reduce using rule 90 (expr -> expr GEQ expr .)
    AND             reduce using rule 90 (expr -> expr GEQ expr .)
    OR              reduce using rule 90 (expr -> expr GEQ expr .)
    SEMICOLON       reduce using rule 90 (expr -> expr GEQ expr .)
    RPAREN          reduce using rule 90 (expr -> expr GEQ expr .)
    RBRACKET        reduce using rule 90 (expr -> expr GEQ expr .)
    COMMA           reduce using rule 90 (expr -> expr GEQ expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140

  ! PLUS            [ reduce using rule 90 (expr -> expr GEQ expr .) ]
  ! MINUS           [ reduce using rule 90 (expr -> expr GEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 90 (expr -> expr GEQ expr .) ]
  ! DIVIDE          [ reduce using rule 90 (expr -> expr GEQ expr .) ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 167

    (89) expr -> expr GT expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    EQ              reduce using rule 89 (expr -> expr GT expr .)
    NEQ             reduce using rule 89 (expr -> expr GT expr .)
    LT              reduce using rule 89 (expr -> expr GT expr .)
    LEQ             reduce using rule 89 (expr -> expr GT expr .)
    GT              reduce using rule 89 (expr -> expr GT expr .)
    GEQ             reduce using rule 89 (expr -> expr GT expr .)
    AND             reduce using rule 89 (expr -> expr GT expr .)
    OR              reduce using rule 89 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 89 (expr -> expr GT expr .)
    RPAREN          reduce using rule 89 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 89 (expr -> expr GT expr .)
    COMMA           reduce using rule 89 (expr -> expr GT expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140

  ! PLUS            [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! MULTIPLY        [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 168

    (84) expr -> expr DIVIDE expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    PLUS            reduce using rule 84 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 84 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 84 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 84 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 84 (expr -> expr DIVIDE expr .)
    NEQ             reduce using rule 84 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 84 (expr -> expr DIVIDE expr .)
    LEQ             reduce using rule 84 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 84 (expr -> expr DIVIDE expr .)
    GEQ             reduce using rule 84 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 84 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 84 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 84 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 84 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 84 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 84 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 147 ]
  ! MULTIPLY        [ shift and go to state 145 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 169

    (92) expr -> expr OR expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    OR              reduce using rule 92 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 92 (expr -> expr OR expr .)
    RPAREN          reduce using rule 92 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 92 (expr -> expr OR expr .)
    COMMA           reduce using rule 92 (expr -> expr OR expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137

  ! PLUS            [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! MULTIPLY        [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! NEQ             [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! LEQ             [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! GEQ             [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 92 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 141 ]


state 170

    (88) expr -> expr LEQ expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    EQ              reduce using rule 88 (expr -> expr LEQ expr .)
    NEQ             reduce using rule 88 (expr -> expr LEQ expr .)
    LT              reduce using rule 88 (expr -> expr LEQ expr .)
    LEQ             reduce using rule 88 (expr -> expr LEQ expr .)
    GT              reduce using rule 88 (expr -> expr LEQ expr .)
    GEQ             reduce using rule 88 (expr -> expr LEQ expr .)
    AND             reduce using rule 88 (expr -> expr LEQ expr .)
    OR              reduce using rule 88 (expr -> expr LEQ expr .)
    SEMICOLON       reduce using rule 88 (expr -> expr LEQ expr .)
    RPAREN          reduce using rule 88 (expr -> expr LEQ expr .)
    RBRACKET        reduce using rule 88 (expr -> expr LEQ expr .)
    COMMA           reduce using rule 88 (expr -> expr LEQ expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140

  ! PLUS            [ reduce using rule 88 (expr -> expr LEQ expr .) ]
  ! MINUS           [ reduce using rule 88 (expr -> expr LEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 88 (expr -> expr LEQ expr .) ]
  ! DIVIDE          [ reduce using rule 88 (expr -> expr LEQ expr .) ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 171

    (87) expr -> expr LT expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    EQ              reduce using rule 87 (expr -> expr LT expr .)
    NEQ             reduce using rule 87 (expr -> expr LT expr .)
    LT              reduce using rule 87 (expr -> expr LT expr .)
    LEQ             reduce using rule 87 (expr -> expr LT expr .)
    GT              reduce using rule 87 (expr -> expr LT expr .)
    GEQ             reduce using rule 87 (expr -> expr LT expr .)
    AND             reduce using rule 87 (expr -> expr LT expr .)
    OR              reduce using rule 87 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 87 (expr -> expr LT expr .)
    RPAREN          reduce using rule 87 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 87 (expr -> expr LT expr .)
    COMMA           reduce using rule 87 (expr -> expr LT expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140

  ! PLUS            [ reduce using rule 87 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 87 (expr -> expr LT expr .) ]
  ! MULTIPLY        [ reduce using rule 87 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 87 (expr -> expr LT expr .) ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 172

    (81) expr -> expr PLUS expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    PLUS            reduce using rule 81 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 81 (expr -> expr PLUS expr .)
    EQ              reduce using rule 81 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 81 (expr -> expr PLUS expr .)
    LT              reduce using rule 81 (expr -> expr PLUS expr .)
    LEQ             reduce using rule 81 (expr -> expr PLUS expr .)
    GT              reduce using rule 81 (expr -> expr PLUS expr .)
    GEQ             reduce using rule 81 (expr -> expr PLUS expr .)
    AND             reduce using rule 81 (expr -> expr PLUS expr .)
    OR              reduce using rule 81 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 81 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 81 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 81 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 81 (expr -> expr PLUS expr .)
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140

  ! MULTIPLY        [ reduce using rule 81 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 81 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 147 ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 173

    (83) expr -> expr MULTIPLY expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    PLUS            reduce using rule 83 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 83 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 83 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 83 (expr -> expr MULTIPLY expr .)
    EQ              reduce using rule 83 (expr -> expr MULTIPLY expr .)
    NEQ             reduce using rule 83 (expr -> expr MULTIPLY expr .)
    LT              reduce using rule 83 (expr -> expr MULTIPLY expr .)
    LEQ             reduce using rule 83 (expr -> expr MULTIPLY expr .)
    GT              reduce using rule 83 (expr -> expr MULTIPLY expr .)
    GEQ             reduce using rule 83 (expr -> expr MULTIPLY expr .)
    AND             reduce using rule 83 (expr -> expr MULTIPLY expr .)
    OR              reduce using rule 83 (expr -> expr MULTIPLY expr .)
    SEMICOLON       reduce using rule 83 (expr -> expr MULTIPLY expr .)
    RPAREN          reduce using rule 83 (expr -> expr MULTIPLY expr .)
    RBRACKET        reduce using rule 83 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 83 (expr -> expr MULTIPLY expr .)

  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 147 ]
  ! MULTIPLY        [ shift and go to state 145 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 174

    (85) expr -> expr EQ expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    EQ              reduce using rule 85 (expr -> expr EQ expr .)
    NEQ             reduce using rule 85 (expr -> expr EQ expr .)
    AND             reduce using rule 85 (expr -> expr EQ expr .)
    OR              reduce using rule 85 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 85 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 85 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 85 (expr -> expr EQ expr .)
    COMMA           reduce using rule 85 (expr -> expr EQ expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138

  ! PLUS            [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! MULTIPLY        [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! LEQ             [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! GEQ             [ reduce using rule 85 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 175

    (82) expr -> expr MINUS expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    PLUS            reduce using rule 82 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 82 (expr -> expr MINUS expr .)
    EQ              reduce using rule 82 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 82 (expr -> expr MINUS expr .)
    LT              reduce using rule 82 (expr -> expr MINUS expr .)
    LEQ             reduce using rule 82 (expr -> expr MINUS expr .)
    GT              reduce using rule 82 (expr -> expr MINUS expr .)
    GEQ             reduce using rule 82 (expr -> expr MINUS expr .)
    AND             reduce using rule 82 (expr -> expr MINUS expr .)
    OR              reduce using rule 82 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 82 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 82 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 82 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 82 (expr -> expr MINUS expr .)
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140

  ! MULTIPLY        [ reduce using rule 82 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 82 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 147 ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! LT              [ shift and go to state 143 ]
  ! LEQ             [ shift and go to state 142 ]
  ! GT              [ shift and go to state 139 ]
  ! GEQ             [ shift and go to state 138 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 176

    (86) expr -> expr NEQ expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    EQ              reduce using rule 86 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 86 (expr -> expr NEQ expr .)
    AND             reduce using rule 86 (expr -> expr NEQ expr .)
    OR              reduce using rule 86 (expr -> expr NEQ expr .)
    SEMICOLON       reduce using rule 86 (expr -> expr NEQ expr .)
    RPAREN          reduce using rule 86 (expr -> expr NEQ expr .)
    RBRACKET        reduce using rule 86 (expr -> expr NEQ expr .)
    COMMA           reduce using rule 86 (expr -> expr NEQ expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138

  ! PLUS            [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! DIVIDE          [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! LT              [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! LEQ             [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! GT              [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! GEQ             [ reduce using rule 86 (expr -> expr NEQ expr .) ]
  ! EQ              [ shift and go to state 146 ]
  ! NEQ             [ shift and go to state 148 ]
  ! AND             [ shift and go to state 137 ]
  ! OR              [ shift and go to state 141 ]


state 177

    (76) array_access -> primary LBRACKET expr RBRACKET .

    ASSIGN          reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    INC             reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    DEC             reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    DOT             reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    MULTIPLY        reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    EQ              reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    NEQ             reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    LT              reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    LEQ             reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    GT              reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    GEQ             reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    AND             reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    OR              reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 76 (array_access -> primary LBRACKET expr RBRACKET .)


state 178

    (46) stmt -> WHILE LPAREN expr RPAREN . stmt
    (44) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . WHILE LPAREN expr RPAREN stmt
    (47) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (48) stmt -> . RETURN expr_opt SEMICOLON
    (49) stmt -> . stmt_expr SEMICOLON
    (50) stmt -> . BREAK SEMICOLON
    (51) stmt -> . CONTINUE SEMICOLON
    (52) stmt -> . block
    (53) stmt -> . var_decl
    (54) stmt -> . error SEMICOLON
    (107) stmt_expr -> . assign
    (108) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE
    (26) var_decl -> . type var_list SEMICOLON
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE

    IF              shift and go to state 89
    WHILE           shift and go to state 70
    FOR             shift and go to state 85
    RETURN          shift and go to state 68
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 94
    error           shift and go to state 189
    LBRACE          shift and go to state 63
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 88
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 83
    array_access                   shift and go to state 74
    stmt_expr                      shift and go to state 79
    stmt                           shift and go to state 188
    primary                        shift and go to state 69
    literal                        shift and go to state 80
    lhs                            shift and go to state 95
    var_decl                       shift and go to state 91
    method_invocation              shift and go to state 81
    type                           shift and go to state 82
    assign                         shift and go to state 98
    block                          shift and go to state 99

state 179

    (65) primary -> NEW ID LPAREN args_opt . RPAREN

    RPAREN          shift and go to state 190


state 180

    (77) method_invocation -> field_access LPAREN args_opt RPAREN .

    DOT             reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    LBRACKET        reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    PLUS            reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    MINUS           reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    MULTIPLY        reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    DIVIDE          reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    EQ              reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    NEQ             reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    LT              reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    LEQ             reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    GT              reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    GEQ             reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    AND             reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    OR              reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    SEMICOLON       reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    RPAREN          reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    RBRACKET        reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    COMMA           reduce using rule 77 (method_invocation -> field_access LPAREN args_opt RPAREN .)


state 181

    (70) arg_plus -> arg_plus COMMA . expr
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 191
    primary                        shift and go to state 102
    array_access                   shift and go to state 74
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 182

    (47) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON . expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (111) expr_opt -> . expr
    (112) expr_opt -> .
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    SEMICOLON       reduce using rule 112 (expr_opt -> .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 110
    array_access                   shift and go to state 74
    primary                        shift and go to state 102
    literal                        shift and go to state 80
    expr_opt                       shift and go to state 192
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 183

    (44) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (45) stmt -> IF LPAREN expr RPAREN . stmt
    (44) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . WHILE LPAREN expr RPAREN stmt
    (47) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (48) stmt -> . RETURN expr_opt SEMICOLON
    (49) stmt -> . stmt_expr SEMICOLON
    (50) stmt -> . BREAK SEMICOLON
    (51) stmt -> . CONTINUE SEMICOLON
    (52) stmt -> . block
    (53) stmt -> . var_decl
    (54) stmt -> . error SEMICOLON
    (107) stmt_expr -> . assign
    (108) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE
    (26) var_decl -> . type var_list SEMICOLON
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE

    IF              shift and go to state 89
    WHILE           shift and go to state 70
    FOR             shift and go to state 85
    RETURN          shift and go to state 68
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 94
    error           shift and go to state 189
    LBRACE          shift and go to state 63
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 88
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 83
    array_access                   shift and go to state 74
    stmt_expr                      shift and go to state 79
    stmt                           shift and go to state 193
    primary                        shift and go to state 69
    literal                        shift and go to state 80
    lhs                            shift and go to state 95
    var_decl                       shift and go to state 91
    method_invocation              shift and go to state 81
    type                           shift and go to state 82
    assign                         shift and go to state 98
    block                          shift and go to state 99

state 184

    (101) new_array -> NEW type dim_expr_plus dim_star .

    PLUS            reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    MINUS           reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    MULTIPLY        reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    DIVIDE          reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    EQ              reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    NEQ             reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    LT              reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    LEQ             reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    GT              reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    GEQ             reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    AND             reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    OR              reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    SEMICOLON       reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    RPAREN          reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    RBRACKET        reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)
    COMMA           reduce using rule 101 (new_array -> NEW type dim_expr_plus dim_star .)


state 185

    (102) dim_expr_plus -> dim_expr_plus dim_expr .

    LBRACKET        reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    PLUS            reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    MINUS           reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    MULTIPLY        reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    DIVIDE          reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    EQ              reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    NEQ             reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    LT              reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    LEQ             reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    GT              reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    GEQ             reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    AND             reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    OR              reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    SEMICOLON       reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    RPAREN          reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    RBRACKET        reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)
    COMMA           reduce using rule 102 (dim_expr_plus -> dim_expr_plus dim_expr .)


state 186

    (105) dim_star -> LBRACKET . RBRACKET dim_star
    (104) dim_expr -> LBRACKET . expr RBRACKET
    (78) expr -> . primary
    (79) expr -> . assign
    (80) expr -> . new_array
    (81) expr -> . expr PLUS expr
    (82) expr -> . expr MINUS expr
    (83) expr -> . expr MULTIPLY expr
    (84) expr -> . expr DIVIDE expr
    (85) expr -> . expr EQ expr
    (86) expr -> . expr NEQ expr
    (87) expr -> . expr LT expr
    (88) expr -> . expr LEQ expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr GEQ expr
    (91) expr -> . expr AND expr
    (92) expr -> . expr OR expr
    (93) expr -> . PLUS expr
    (94) expr -> . MINUS expr
    (95) expr -> . NOT expr
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (101) new_array -> . NEW type dim_expr_plus dim_star
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 194
    PLUS            shift and go to state 106
    MINUS           shift and go to state 104
    NOT             shift and go to state 113
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 103
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90
    ID              shift and go to state 109

    new_array                      shift and go to state 101
    field_access                   shift and go to state 108
    expr                           shift and go to state 187
    primary                        shift and go to state 102
    array_access                   shift and go to state 74
    literal                        shift and go to state 80
    lhs                            shift and go to state 112
    method_invocation              shift and go to state 107
    assign                         shift and go to state 111

state 187

    (104) dim_expr -> LBRACKET expr . RBRACKET
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    RBRACKET        shift and go to state 195
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 188

    (46) stmt -> WHILE LPAREN expr RPAREN stmt .

    RBRACE          reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    error           reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    CONTINUE        reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INC             reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DEC             reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INT             reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FLOAT           reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ID              reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    THIS            reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SUPER           reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INT_CONST       reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FLOAT_CONST     reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING_CONST    reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NULL            reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 46 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 189

    (54) stmt -> error . SEMICOLON

    SEMICOLON       shift and go to state 130


state 190

    (65) primary -> NEW ID LPAREN args_opt RPAREN .

    DOT             reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    LBRACKET        reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    RPAREN          reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    PLUS            reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    MINUS           reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    MULTIPLY        reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    DIVIDE          reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    EQ              reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    NEQ             reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    LT              reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    LEQ             reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    GT              reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    GEQ             reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    AND             reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    OR              reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    SEMICOLON       reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    RBRACKET        reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)
    COMMA           reduce using rule 65 (primary -> NEW ID LPAREN args_opt RPAREN .)


state 191

    (70) arg_plus -> arg_plus COMMA expr .
    (81) expr -> expr . PLUS expr
    (82) expr -> expr . MINUS expr
    (83) expr -> expr . MULTIPLY expr
    (84) expr -> expr . DIVIDE expr
    (85) expr -> expr . EQ expr
    (86) expr -> expr . NEQ expr
    (87) expr -> expr . LT expr
    (88) expr -> expr . LEQ expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . GEQ expr
    (91) expr -> expr . AND expr
    (92) expr -> expr . OR expr

    COMMA           reduce using rule 70 (arg_plus -> arg_plus COMMA expr .)
    RPAREN          reduce using rule 70 (arg_plus -> arg_plus COMMA expr .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 147
    MULTIPLY        shift and go to state 145
    DIVIDE          shift and go to state 140
    EQ              shift and go to state 146
    NEQ             shift and go to state 148
    LT              shift and go to state 143
    LEQ             shift and go to state 142
    GT              shift and go to state 139
    GEQ             shift and go to state 138
    AND             shift and go to state 137
    OR              shift and go to state 141


state 192

    (47) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt . SEMICOLON stmt_expr_opt RPAREN stmt

    SEMICOLON       shift and go to state 196


state 193

    (44) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt
    (45) stmt -> IF LPAREN expr RPAREN stmt .

    ELSE            shift and go to state 197
    RBRACE          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    error           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    IF              reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    CONTINUE        reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    INC             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    DEC             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    INT             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FLOAT           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    ID              reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    THIS            reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    SUPER           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    INT_CONST       reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FLOAT_CONST     reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    STRING_CONST    reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    NULL            reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .)

  ! ELSE            [ reduce using rule 45 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 194

    (105) dim_star -> LBRACKET RBRACKET . dim_star
    (105) dim_star -> . LBRACKET RBRACKET dim_star
    (106) dim_star -> .

    LBRACKET        shift and go to state 198
    PLUS            reduce using rule 106 (dim_star -> .)
    MINUS           reduce using rule 106 (dim_star -> .)
    MULTIPLY        reduce using rule 106 (dim_star -> .)
    DIVIDE          reduce using rule 106 (dim_star -> .)
    EQ              reduce using rule 106 (dim_star -> .)
    NEQ             reduce using rule 106 (dim_star -> .)
    LT              reduce using rule 106 (dim_star -> .)
    LEQ             reduce using rule 106 (dim_star -> .)
    GT              reduce using rule 106 (dim_star -> .)
    GEQ             reduce using rule 106 (dim_star -> .)
    AND             reduce using rule 106 (dim_star -> .)
    OR              reduce using rule 106 (dim_star -> .)
    SEMICOLON       reduce using rule 106 (dim_star -> .)
    RPAREN          reduce using rule 106 (dim_star -> .)
    RBRACKET        reduce using rule 106 (dim_star -> .)
    COMMA           reduce using rule 106 (dim_star -> .)

    dim_star                       shift and go to state 199

state 195

    (104) dim_expr -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    MULTIPLY        reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    EQ              reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    NEQ             reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    LT              reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    LEQ             reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    GT              reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    GEQ             reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 104 (dim_expr -> LBRACKET expr RBRACKET .)


state 196

    (47) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON . stmt_expr_opt RPAREN stmt
    (109) stmt_expr_opt -> . stmt_expr
    (110) stmt_expr_opt -> .
    (107) stmt_expr -> . assign
    (108) stmt_expr -> . method_invocation
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE

    RPAREN          reduce using rule 110 (stmt_expr_opt -> .)
    INC             shift and go to state 100
    DEC             shift and go to state 73
    ID              shift and go to state 109
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 83
    primary                        shift and go to state 69
    stmt_expr_opt                  shift and go to state 200
    stmt_expr                      shift and go to state 157
    literal                        shift and go to state 80
    lhs                            shift and go to state 95
    method_invocation              shift and go to state 81
    array_access                   shift and go to state 74
    assign                         shift and go to state 98

state 197

    (44) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (44) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . WHILE LPAREN expr RPAREN stmt
    (47) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (48) stmt -> . RETURN expr_opt SEMICOLON
    (49) stmt -> . stmt_expr SEMICOLON
    (50) stmt -> . BREAK SEMICOLON
    (51) stmt -> . CONTINUE SEMICOLON
    (52) stmt -> . block
    (53) stmt -> . var_decl
    (54) stmt -> . error SEMICOLON
    (107) stmt_expr -> . assign
    (108) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE
    (26) var_decl -> . type var_list SEMICOLON
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE

    IF              shift and go to state 89
    WHILE           shift and go to state 70
    FOR             shift and go to state 85
    RETURN          shift and go to state 68
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 94
    error           shift and go to state 189
    LBRACE          shift and go to state 63
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 88
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 83
    array_access                   shift and go to state 74
    stmt_expr                      shift and go to state 79
    stmt                           shift and go to state 201
    primary                        shift and go to state 69
    literal                        shift and go to state 80
    lhs                            shift and go to state 95
    var_decl                       shift and go to state 91
    method_invocation              shift and go to state 81
    type                           shift and go to state 82
    assign                         shift and go to state 98
    block                          shift and go to state 99

state 198

    (105) dim_star -> LBRACKET . RBRACKET dim_star

    RBRACKET        shift and go to state 194


state 199

    (105) dim_star -> LBRACKET RBRACKET dim_star .

    PLUS            reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    MINUS           reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    MULTIPLY        reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    DIVIDE          reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    EQ              reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    NEQ             reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    LT              reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    LEQ             reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    GT              reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    GEQ             reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    AND             reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    OR              reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    SEMICOLON       reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    RPAREN          reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    RBRACKET        reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)
    COMMA           reduce using rule 105 (dim_star -> LBRACKET RBRACKET dim_star .)


state 200

    (47) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt . RPAREN stmt

    RPAREN          shift and go to state 202


state 201

    (44) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    RBRACE          reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    error           reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    IF              reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BREAK           reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    CONTINUE        reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INC             reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    DEC             reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INT             reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BOOLEAN         reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FLOAT           reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ID              reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    THIS            reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SUPER           reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NEW             reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INT_CONST       reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FLOAT_CONST     reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    STRING_CONST    reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NULL            reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    TRUE            reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FALSE           reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 44 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 202

    (47) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN . stmt
    (44) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (45) stmt -> . IF LPAREN expr RPAREN stmt
    (46) stmt -> . WHILE LPAREN expr RPAREN stmt
    (47) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (48) stmt -> . RETURN expr_opt SEMICOLON
    (49) stmt -> . stmt_expr SEMICOLON
    (50) stmt -> . BREAK SEMICOLON
    (51) stmt -> . CONTINUE SEMICOLON
    (52) stmt -> . block
    (53) stmt -> . var_decl
    (54) stmt -> . error SEMICOLON
    (107) stmt_expr -> . assign
    (108) stmt_expr -> . method_invocation
    (40) block -> . LBRACE stmt_list RBRACE
    (41) block -> . LBRACE stmt_list error RBRACE
    (26) var_decl -> . type var_list SEMICOLON
    (96) assign -> . lhs ASSIGN expr
    (97) assign -> . lhs INC
    (98) assign -> . INC lhs
    (99) assign -> . lhs DEC
    (100) assign -> . DEC lhs
    (77) method_invocation -> . field_access LPAREN args_opt RPAREN
    (27) type -> . INT
    (28) type -> . BOOLEAN
    (29) type -> . FLOAT
    (30) type -> . ID
    (72) lhs -> . field_access
    (73) lhs -> . array_access
    (74) field_access -> . primary DOT ID
    (75) field_access -> . ID
    (76) array_access -> . primary LBRACKET expr RBRACKET
    (61) primary -> . literal
    (62) primary -> . THIS
    (63) primary -> . SUPER
    (64) primary -> . LPAREN expr RPAREN
    (65) primary -> . NEW ID LPAREN args_opt RPAREN
    (66) primary -> . lhs
    (67) primary -> . method_invocation
    (55) literal -> . INT_CONST
    (56) literal -> . FLOAT_CONST
    (57) literal -> . STRING_CONST
    (58) literal -> . NULL
    (59) literal -> . TRUE
    (60) literal -> . FALSE

    IF              shift and go to state 89
    WHILE           shift and go to state 70
    FOR             shift and go to state 85
    RETURN          shift and go to state 68
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 94
    error           shift and go to state 189
    LBRACE          shift and go to state 63
    INC             shift and go to state 100
    DEC             shift and go to state 73
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 31
    FLOAT           shift and go to state 29
    ID              shift and go to state 88
    THIS            shift and go to state 93
    SUPER           shift and go to state 97
    LPAREN          shift and go to state 87
    NEW             shift and go to state 72
    INT_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 71
    STRING_CONST    shift and go to state 75
    NULL            shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 90

    field_access                   shift and go to state 83
    primary                        shift and go to state 69
    array_access                   shift and go to state 74
    stmt                           shift and go to state 203
    stmt_expr                      shift and go to state 79
    literal                        shift and go to state 80
    lhs                            shift and go to state 95
    var_decl                       shift and go to state 91
    method_invocation              shift and go to state 81
    type                           shift and go to state 82
    assign                         shift and go to state 98
    block                          shift and go to state 99

state 203

    (47) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .

    RBRACE          reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    error           reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    IF              reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    WHILE           reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FOR             reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    RETURN          reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    BREAK           reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    CONTINUE        reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    LBRACE          reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    INC             reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    DEC             reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    INT             reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    BOOLEAN         reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FLOAT           reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    ID              reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    THIS            reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    SUPER           reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    LPAREN          reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    NEW             reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    INT_CONST       reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FLOAT_CONST     reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    STRING_CONST    reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    NULL            reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    TRUE            reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FALSE           reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    ELSE            reduce using rule 47 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)

