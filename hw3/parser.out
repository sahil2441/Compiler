Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> pgm
Rule 1     pgm -> class_decl_list
Rule 2     class_decl_list -> class_decl class_decl_list
Rule 3     class_decl_list -> <empty>
Rule 4     class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE
Rule 5     newscope -> <empty>
Rule 6     class_decl -> CLASS ID extends LBRACE error RBRACE
Rule 7     extends -> EXTENDS ID
Rule 8     extends -> <empty>
Rule 9     class_body_decl_list -> class_body_decl_list class_body_decl
Rule 10    class_body_decl_list -> class_body_decl
Rule 11    class_body_decl -> field_decl
Rule 12    class_body_decl -> method_decl
Rule 13    class_body_decl -> constructor_decl
Rule 14    field_decl -> mod var_decl
Rule 15    method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block
Rule 16    method_decl -> mod type ID LPAREN param_list_opt RPAREN block
Rule 17    constructor_decl -> mod ID LPAREN param_list_opt RPAREN block
Rule 18    mod -> visibility_mod storage_mod
Rule 19    visibility_mod -> PUBLIC
Rule 20    visibility_mod -> PRIVATE
Rule 21    visibility_mod -> <empty>
Rule 22    storage_mod -> STATIC
Rule 23    storage_mod -> <empty>
Rule 24    var_decl -> type var_list SEMICOLON
Rule 25    type -> INT
Rule 26    type -> BOOLEAN
Rule 27    type -> FLOAT
Rule 28    type -> ID
Rule 29    var_list -> var_list COMMA var
Rule 30    var_list -> var
Rule 31    var -> ID
Rule 32    var -> var LBRACKET RBRACKET
Rule 33    param_list_opt -> param_list
Rule 34    param_list_opt -> <empty>
Rule 35    param_list -> param_list COMMA param
Rule 36    param_list -> param
Rule 37    param -> type ID
Rule 38    block -> LBRACE stmt_list RBRACE
Rule 39    block -> LBRACE stmt_list error RBRACE
Rule 40    stmt_list -> <empty>
Rule 41    stmt_list -> stmt_list stmt
Rule 42    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 43    stmt -> IF LPAREN expr RPAREN stmt
Rule 44    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 45    stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
Rule 46    stmt -> RETURN expr_opt SEMICOLON
Rule 47    stmt -> stmt_expr SEMICOLON
Rule 48    stmt -> BREAK SEMICOLON
Rule 49    stmt -> CONTINUE SEMICOLON
Rule 50    stmt -> block
Rule 51    stmt -> var_decl
Rule 52    stmt -> error SEMICOLON
Rule 53    literal -> INT_CONST
Rule 54    literal -> FLOAT_CONST
Rule 55    literal -> STRING_CONST
Rule 56    literal -> NULL
Rule 57    literal -> TRUE
Rule 58    literal -> FALSE
Rule 59    primary -> literal
Rule 60    primary -> THIS
Rule 61    primary -> SUPER
Rule 62    primary -> LPAREN expr RPAREN
Rule 63    primary -> NEW ID LPAREN args_opt RPAREN
Rule 64    primary -> lhs
Rule 65    primary -> method_invocation
Rule 66    args_opt -> arg_plus
Rule 67    args_opt -> <empty>
Rule 68    arg_plus -> arg_plus COMMA expr
Rule 69    arg_plus -> expr
Rule 70    lhs -> field_access
Rule 71    lhs -> array_access
Rule 72    field_access -> primary DOT ID
Rule 73    field_access -> ID
Rule 74    array_access -> primary LBRACKET expr RBRACKET
Rule 75    method_invocation -> field_access LPAREN args_opt RPAREN
Rule 76    expr -> primary
Rule 77    expr -> assign
Rule 78    expr -> new_array
Rule 79    expr -> expr PLUS expr
Rule 80    expr -> expr MINUS expr
Rule 81    expr -> expr MULTIPLY expr
Rule 82    expr -> expr DIVIDE expr
Rule 83    expr -> expr EQ expr
Rule 84    expr -> expr NEQ expr
Rule 85    expr -> expr LT expr
Rule 86    expr -> expr LEQ expr
Rule 87    expr -> expr GT expr
Rule 88    expr -> expr GEQ expr
Rule 89    expr -> expr AND expr
Rule 90    expr -> expr OR expr
Rule 91    expr -> PLUS expr
Rule 92    expr -> MINUS expr
Rule 93    expr -> NOT expr
Rule 94    assign -> lhs ASSIGN expr
Rule 95    assign -> lhs INC
Rule 96    assign -> INC lhs
Rule 97    assign -> lhs DEC
Rule 98    assign -> DEC lhs
Rule 99    new_array -> NEW type dim_expr_plus dim_star
Rule 100   dim_expr_plus -> dim_expr_plus dim_expr
Rule 101   dim_expr_plus -> dim_expr
Rule 102   dim_expr -> LBRACKET expr RBRACKET
Rule 103   dim_star -> LBRACKET RBRACKET dim_star
Rule 104   dim_star -> <empty>
Rule 105   stmt_expr -> assign
Rule 106   stmt_expr -> method_invocation
Rule 107   stmt_expr_opt -> stmt_expr
Rule 108   stmt_expr_opt -> <empty>
Rule 109   expr_opt -> expr
Rule 110   expr_opt -> <empty>

Terminals, with rules where they appear

AND                  : 89
ASSIGN               : 94
BOOLEAN              : 26
BREAK                : 48
CLASS                : 4 6
COMMA                : 29 35 68
CONTINUE             : 49
DEC                  : 97 98
DIVIDE               : 82
DOT                  : 72
ELSE                 : 42
EQ                   : 83
EXTENDS              : 7
FALSE                : 58
FLOAT                : 27
FLOAT_CONST          : 54
FOR                  : 45
GEQ                  : 88
GT                   : 87
ID                   : 4 6 7 15 16 17 28 31 37 63 72 73
IF                   : 42 43
INC                  : 95 96
INT                  : 25
INT_CONST            : 53
LBRACE               : 4 6 38 39
LBRACKET             : 32 74 102 103
LEQ                  : 86
LPAREN               : 15 16 17 42 43 44 45 62 63 75
LT                   : 85
MINUS                : 80 92
MULTIPLY             : 81
NEQ                  : 84
NEW                  : 63 99
NOT                  : 93
NULL                 : 56
OR                   : 90
PLUS                 : 79 91
PRIVATE              : 20
PUBLIC               : 19
RBRACE               : 4 6 38 39
RBRACKET             : 32 74 102 103
RETURN               : 46
RPAREN               : 15 16 17 42 43 44 45 62 63 75
SEMICOLON            : 24 45 45 46 47 48 49 52
STATIC               : 22
STRING_CONST         : 55
SUPER                : 61
THIS                 : 60
TRUE                 : 57
VOID                 : 15
WHILE                : 44
error                : 6 39 52

Nonterminals, with rules where they appear

arg_plus             : 66 68
args_opt             : 63 75
array_access         : 71
assign               : 77 105
block                : 15 16 17 50
class_body_decl      : 9 10
class_body_decl_list : 4 9
class_decl           : 2
class_decl_list      : 1 2
constructor_decl     : 13
dim_expr             : 100 101
dim_expr_plus        : 99 100
dim_star             : 99 103
expr                 : 42 43 44 62 68 69 74 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 92 93 94 102 109
expr_opt             : 45 46
extends              : 4 6
field_access         : 70 75
field_decl           : 11
lhs                  : 64 94 95 96 97 98
literal              : 59
method_decl          : 12
method_invocation    : 65 106
mod                  : 14 15 16 17
new_array            : 78
newscope             : 4
param                : 35 36
param_list           : 33 35
param_list_opt       : 15 16 17
pgm                  : 0
primary              : 72 74 76
stmt                 : 41 42 42 43 44 45
stmt_expr            : 47 107
stmt_expr_opt        : 45 45
stmt_list            : 38 39 41
storage_mod          : 18
type                 : 16 24 37 99
var                  : 29 30 32
var_decl             : 14 51
var_list             : 24 29
visibility_mod       : 18

Parsing method: LALR

state 0

    (0) S' -> . pgm
    (1) pgm -> . class_decl_list
    (2) class_decl_list -> . class_decl class_decl_list
    (3) class_decl_list -> .
    (4) class_decl -> . CLASS ID extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> . CLASS ID extends LBRACE error RBRACE

    $end            reduce using rule 3 (class_decl_list -> .)
    CLASS           shift and go to state 2

    pgm                            shift and go to state 1
    class_decl                     shift and go to state 3
    class_decl_list                shift and go to state 4

state 1

    (0) S' -> pgm .



state 2

    (4) class_decl -> CLASS . ID extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS . ID extends LBRACE error RBRACE

    ID              shift and go to state 5


state 3

    (2) class_decl_list -> class_decl . class_decl_list
    (2) class_decl_list -> . class_decl class_decl_list
    (3) class_decl_list -> .
    (4) class_decl -> . CLASS ID extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> . CLASS ID extends LBRACE error RBRACE

    $end            reduce using rule 3 (class_decl_list -> .)
    CLASS           shift and go to state 2

    class_decl_list                shift and go to state 6
    class_decl                     shift and go to state 3

state 4

    (1) pgm -> class_decl_list .

    $end            reduce using rule 1 (pgm -> class_decl_list .)


state 5

    (4) class_decl -> CLASS ID . extends LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS ID . extends LBRACE error RBRACE
    (7) extends -> . EXTENDS ID
    (8) extends -> .

    EXTENDS         shift and go to state 8
    LBRACE          reduce using rule 8 (extends -> .)

    extends                        shift and go to state 7

state 6

    (2) class_decl_list -> class_decl class_decl_list .

    $end            reduce using rule 2 (class_decl_list -> class_decl class_decl_list .)


state 7

    (4) class_decl -> CLASS ID extends . LBRACE newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS ID extends . LBRACE error RBRACE

    LBRACE          shift and go to state 9


state 8

    (7) extends -> EXTENDS . ID

    ID              shift and go to state 10


state 9

    (4) class_decl -> CLASS ID extends LBRACE . newscope class_body_decl_list RBRACE
    (6) class_decl -> CLASS ID extends LBRACE . error RBRACE
    (5) newscope -> .

    error           shift and go to state 12
    PUBLIC          reduce using rule 5 (newscope -> .)
    PRIVATE         reduce using rule 5 (newscope -> .)
    VOID            reduce using rule 5 (newscope -> .)
    ID              reduce using rule 5 (newscope -> .)
    INT             reduce using rule 5 (newscope -> .)
    BOOLEAN         reduce using rule 5 (newscope -> .)
    FLOAT           reduce using rule 5 (newscope -> .)
    STATIC          reduce using rule 5 (newscope -> .)

    newscope                       shift and go to state 11

state 10

    (7) extends -> EXTENDS ID .

    LBRACE          reduce using rule 7 (extends -> EXTENDS ID .)


state 11

    (4) class_decl -> CLASS ID extends LBRACE newscope . class_body_decl_list RBRACE
    (9) class_body_decl_list -> . class_body_decl_list class_body_decl
    (10) class_body_decl_list -> . class_body_decl
    (11) class_body_decl -> . field_decl
    (12) class_body_decl -> . method_decl
    (13) class_body_decl -> . constructor_decl
    (14) field_decl -> . mod var_decl
    (15) method_decl -> . mod VOID ID LPAREN param_list_opt RPAREN block
    (16) method_decl -> . mod type ID LPAREN param_list_opt RPAREN block
    (17) constructor_decl -> . mod ID LPAREN param_list_opt RPAREN block
    (18) mod -> . visibility_mod storage_mod
    (19) visibility_mod -> . PUBLIC
    (20) visibility_mod -> . PRIVATE
    (21) visibility_mod -> .

    PUBLIC          shift and go to state 21
    PRIVATE         shift and go to state 14
    STATIC          reduce using rule 21 (visibility_mod -> .)
    VOID            reduce using rule 21 (visibility_mod -> .)
    ID              reduce using rule 21 (visibility_mod -> .)
    INT             reduce using rule 21 (visibility_mod -> .)
    BOOLEAN         reduce using rule 21 (visibility_mod -> .)
    FLOAT           reduce using rule 21 (visibility_mod -> .)

    class_body_decl                shift and go to state 16
    field_decl                     shift and go to state 19
    constructor_decl               shift and go to state 13
    method_decl                    shift and go to state 20
    visibility_mod                 shift and go to state 17
    class_body_decl_list           shift and go to state 15
    mod                            shift and go to state 18

state 12

    (6) class_decl -> CLASS ID extends LBRACE error . RBRACE

    RBRACE          shift and go to state 22


state 13

    (13) class_body_decl -> constructor_decl .

    RBRACE          reduce using rule 13 (class_body_decl -> constructor_decl .)
    PUBLIC          reduce using rule 13 (class_body_decl -> constructor_decl .)
    PRIVATE         reduce using rule 13 (class_body_decl -> constructor_decl .)
    VOID            reduce using rule 13 (class_body_decl -> constructor_decl .)
    ID              reduce using rule 13 (class_body_decl -> constructor_decl .)
    INT             reduce using rule 13 (class_body_decl -> constructor_decl .)
    BOOLEAN         reduce using rule 13 (class_body_decl -> constructor_decl .)
    FLOAT           reduce using rule 13 (class_body_decl -> constructor_decl .)
    STATIC          reduce using rule 13 (class_body_decl -> constructor_decl .)


state 14

    (20) visibility_mod -> PRIVATE .

    STATIC          reduce using rule 20 (visibility_mod -> PRIVATE .)
    VOID            reduce using rule 20 (visibility_mod -> PRIVATE .)
    ID              reduce using rule 20 (visibility_mod -> PRIVATE .)
    INT             reduce using rule 20 (visibility_mod -> PRIVATE .)
    BOOLEAN         reduce using rule 20 (visibility_mod -> PRIVATE .)
    FLOAT           reduce using rule 20 (visibility_mod -> PRIVATE .)


state 15

    (4) class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list . RBRACE
    (9) class_body_decl_list -> class_body_decl_list . class_body_decl
    (11) class_body_decl -> . field_decl
    (12) class_body_decl -> . method_decl
    (13) class_body_decl -> . constructor_decl
    (14) field_decl -> . mod var_decl
    (15) method_decl -> . mod VOID ID LPAREN param_list_opt RPAREN block
    (16) method_decl -> . mod type ID LPAREN param_list_opt RPAREN block
    (17) constructor_decl -> . mod ID LPAREN param_list_opt RPAREN block
    (18) mod -> . visibility_mod storage_mod
    (19) visibility_mod -> . PUBLIC
    (20) visibility_mod -> . PRIVATE
    (21) visibility_mod -> .

    RBRACE          shift and go to state 24
    PUBLIC          shift and go to state 21
    PRIVATE         shift and go to state 14
    STATIC          reduce using rule 21 (visibility_mod -> .)
    VOID            reduce using rule 21 (visibility_mod -> .)
    ID              reduce using rule 21 (visibility_mod -> .)
    INT             reduce using rule 21 (visibility_mod -> .)
    BOOLEAN         reduce using rule 21 (visibility_mod -> .)
    FLOAT           reduce using rule 21 (visibility_mod -> .)

    class_body_decl                shift and go to state 23
    field_decl                     shift and go to state 19
    constructor_decl               shift and go to state 13
    method_decl                    shift and go to state 20
    visibility_mod                 shift and go to state 17
    mod                            shift and go to state 18

state 16

    (10) class_body_decl_list -> class_body_decl .

    RBRACE          reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    PUBLIC          reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    PRIVATE         reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    VOID            reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    ID              reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    INT             reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    BOOLEAN         reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    FLOAT           reduce using rule 10 (class_body_decl_list -> class_body_decl .)
    STATIC          reduce using rule 10 (class_body_decl_list -> class_body_decl .)


state 17

    (18) mod -> visibility_mod . storage_mod
    (22) storage_mod -> . STATIC
    (23) storage_mod -> .

    STATIC          shift and go to state 26
    VOID            reduce using rule 23 (storage_mod -> .)
    ID              reduce using rule 23 (storage_mod -> .)
    INT             reduce using rule 23 (storage_mod -> .)
    BOOLEAN         reduce using rule 23 (storage_mod -> .)
    FLOAT           reduce using rule 23 (storage_mod -> .)

    storage_mod                    shift and go to state 25

state 18

    (14) field_decl -> mod . var_decl
    (15) method_decl -> mod . VOID ID LPAREN param_list_opt RPAREN block
    (16) method_decl -> mod . type ID LPAREN param_list_opt RPAREN block
    (17) constructor_decl -> mod . ID LPAREN param_list_opt RPAREN block
    (24) var_decl -> . type var_list SEMICOLON
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID

    VOID            shift and go to state 28
    ID              shift and go to state 33
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29

    var_decl                       shift and go to state 31
    type                           shift and go to state 32

state 19

    (11) class_body_decl -> field_decl .

    RBRACE          reduce using rule 11 (class_body_decl -> field_decl .)
    PUBLIC          reduce using rule 11 (class_body_decl -> field_decl .)
    PRIVATE         reduce using rule 11 (class_body_decl -> field_decl .)
    VOID            reduce using rule 11 (class_body_decl -> field_decl .)
    ID              reduce using rule 11 (class_body_decl -> field_decl .)
    INT             reduce using rule 11 (class_body_decl -> field_decl .)
    BOOLEAN         reduce using rule 11 (class_body_decl -> field_decl .)
    FLOAT           reduce using rule 11 (class_body_decl -> field_decl .)
    STATIC          reduce using rule 11 (class_body_decl -> field_decl .)


state 20

    (12) class_body_decl -> method_decl .

    RBRACE          reduce using rule 12 (class_body_decl -> method_decl .)
    PUBLIC          reduce using rule 12 (class_body_decl -> method_decl .)
    PRIVATE         reduce using rule 12 (class_body_decl -> method_decl .)
    VOID            reduce using rule 12 (class_body_decl -> method_decl .)
    ID              reduce using rule 12 (class_body_decl -> method_decl .)
    INT             reduce using rule 12 (class_body_decl -> method_decl .)
    BOOLEAN         reduce using rule 12 (class_body_decl -> method_decl .)
    FLOAT           reduce using rule 12 (class_body_decl -> method_decl .)
    STATIC          reduce using rule 12 (class_body_decl -> method_decl .)


state 21

    (19) visibility_mod -> PUBLIC .

    STATIC          reduce using rule 19 (visibility_mod -> PUBLIC .)
    VOID            reduce using rule 19 (visibility_mod -> PUBLIC .)
    ID              reduce using rule 19 (visibility_mod -> PUBLIC .)
    INT             reduce using rule 19 (visibility_mod -> PUBLIC .)
    BOOLEAN         reduce using rule 19 (visibility_mod -> PUBLIC .)
    FLOAT           reduce using rule 19 (visibility_mod -> PUBLIC .)


state 22

    (6) class_decl -> CLASS ID extends LBRACE error RBRACE .

    CLASS           reduce using rule 6 (class_decl -> CLASS ID extends LBRACE error RBRACE .)
    $end            reduce using rule 6 (class_decl -> CLASS ID extends LBRACE error RBRACE .)


state 23

    (9) class_body_decl_list -> class_body_decl_list class_body_decl .

    RBRACE          reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    PUBLIC          reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    PRIVATE         reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    VOID            reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    ID              reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    INT             reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    BOOLEAN         reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    FLOAT           reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)
    STATIC          reduce using rule 9 (class_body_decl_list -> class_body_decl_list class_body_decl .)


state 24

    (4) class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE .

    CLASS           reduce using rule 4 (class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE .)
    $end            reduce using rule 4 (class_decl -> CLASS ID extends LBRACE newscope class_body_decl_list RBRACE .)


state 25

    (18) mod -> visibility_mod storage_mod .

    VOID            reduce using rule 18 (mod -> visibility_mod storage_mod .)
    ID              reduce using rule 18 (mod -> visibility_mod storage_mod .)
    INT             reduce using rule 18 (mod -> visibility_mod storage_mod .)
    BOOLEAN         reduce using rule 18 (mod -> visibility_mod storage_mod .)
    FLOAT           reduce using rule 18 (mod -> visibility_mod storage_mod .)


state 26

    (22) storage_mod -> STATIC .

    VOID            reduce using rule 22 (storage_mod -> STATIC .)
    ID              reduce using rule 22 (storage_mod -> STATIC .)
    INT             reduce using rule 22 (storage_mod -> STATIC .)
    BOOLEAN         reduce using rule 22 (storage_mod -> STATIC .)
    FLOAT           reduce using rule 22 (storage_mod -> STATIC .)


state 27

    (25) type -> INT .

    ID              reduce using rule 25 (type -> INT .)
    LBRACKET        reduce using rule 25 (type -> INT .)


state 28

    (15) method_decl -> mod VOID . ID LPAREN param_list_opt RPAREN block

    ID              shift and go to state 34


state 29

    (27) type -> FLOAT .

    ID              reduce using rule 27 (type -> FLOAT .)
    LBRACKET        reduce using rule 27 (type -> FLOAT .)


state 30

    (26) type -> BOOLEAN .

    ID              reduce using rule 26 (type -> BOOLEAN .)
    LBRACKET        reduce using rule 26 (type -> BOOLEAN .)


state 31

    (14) field_decl -> mod var_decl .

    RBRACE          reduce using rule 14 (field_decl -> mod var_decl .)
    PUBLIC          reduce using rule 14 (field_decl -> mod var_decl .)
    PRIVATE         reduce using rule 14 (field_decl -> mod var_decl .)
    VOID            reduce using rule 14 (field_decl -> mod var_decl .)
    ID              reduce using rule 14 (field_decl -> mod var_decl .)
    INT             reduce using rule 14 (field_decl -> mod var_decl .)
    BOOLEAN         reduce using rule 14 (field_decl -> mod var_decl .)
    FLOAT           reduce using rule 14 (field_decl -> mod var_decl .)
    STATIC          reduce using rule 14 (field_decl -> mod var_decl .)


state 32

    (16) method_decl -> mod type . ID LPAREN param_list_opt RPAREN block
    (24) var_decl -> type . var_list SEMICOLON
    (29) var_list -> . var_list COMMA var
    (30) var_list -> . var
    (31) var -> . ID
    (32) var -> . var LBRACKET RBRACKET

    ID              shift and go to state 37

    var                            shift and go to state 35
    var_list                       shift and go to state 36

state 33

    (17) constructor_decl -> mod ID . LPAREN param_list_opt RPAREN block
    (28) type -> ID .

    LPAREN          shift and go to state 38
    ID              reduce using rule 28 (type -> ID .)


state 34

    (15) method_decl -> mod VOID ID . LPAREN param_list_opt RPAREN block

    LPAREN          shift and go to state 39


state 35

    (30) var_list -> var .
    (32) var -> var . LBRACKET RBRACKET

    SEMICOLON       reduce using rule 30 (var_list -> var .)
    COMMA           reduce using rule 30 (var_list -> var .)
    LBRACKET        shift and go to state 40


state 36

    (24) var_decl -> type var_list . SEMICOLON
    (29) var_list -> var_list . COMMA var

    SEMICOLON       shift and go to state 42
    COMMA           shift and go to state 41


state 37

    (16) method_decl -> mod type ID . LPAREN param_list_opt RPAREN block
    (31) var -> ID .

    LPAREN          shift and go to state 43
    LBRACKET        reduce using rule 31 (var -> ID .)
    SEMICOLON       reduce using rule 31 (var -> ID .)
    COMMA           reduce using rule 31 (var -> ID .)


state 38

    (17) constructor_decl -> mod ID LPAREN . param_list_opt RPAREN block
    (33) param_list_opt -> . param_list
    (34) param_list_opt -> .
    (35) param_list -> . param_list COMMA param
    (36) param_list -> . param
    (37) param -> . type ID
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID

    RPAREN          reduce using rule 34 (param_list_opt -> .)
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 48

    param_list                     shift and go to state 44
    param                          shift and go to state 46
    param_list_opt                 shift and go to state 45
    type                           shift and go to state 47

state 39

    (15) method_decl -> mod VOID ID LPAREN . param_list_opt RPAREN block
    (33) param_list_opt -> . param_list
    (34) param_list_opt -> .
    (35) param_list -> . param_list COMMA param
    (36) param_list -> . param
    (37) param -> . type ID
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID

    RPAREN          reduce using rule 34 (param_list_opt -> .)
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 48

    param_list                     shift and go to state 44
    param                          shift and go to state 46
    param_list_opt                 shift and go to state 49
    type                           shift and go to state 47

state 40

    (32) var -> var LBRACKET . RBRACKET

    RBRACKET        shift and go to state 50


state 41

    (29) var_list -> var_list COMMA . var
    (31) var -> . ID
    (32) var -> . var LBRACKET RBRACKET

    ID              shift and go to state 52

    var                            shift and go to state 51

state 42

    (24) var_decl -> type var_list SEMICOLON .

    RBRACE          reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    error           reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    IF              reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    WHILE           reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    FOR             reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    RETURN          reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    BREAK           reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    CONTINUE        reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    LBRACE          reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    INC             reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    DEC             reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    INT             reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    BOOLEAN         reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    FLOAT           reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    ID              reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    THIS            reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    SUPER           reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    LPAREN          reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    NEW             reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    INT_CONST       reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    FLOAT_CONST     reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    STRING_CONST    reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    NULL            reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    TRUE            reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    FALSE           reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    ELSE            reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    PUBLIC          reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    PRIVATE         reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    VOID            reduce using rule 24 (var_decl -> type var_list SEMICOLON .)
    STATIC          reduce using rule 24 (var_decl -> type var_list SEMICOLON .)


state 43

    (16) method_decl -> mod type ID LPAREN . param_list_opt RPAREN block
    (33) param_list_opt -> . param_list
    (34) param_list_opt -> .
    (35) param_list -> . param_list COMMA param
    (36) param_list -> . param
    (37) param -> . type ID
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID

    RPAREN          reduce using rule 34 (param_list_opt -> .)
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 48

    param_list                     shift and go to state 44
    param                          shift and go to state 46
    param_list_opt                 shift and go to state 53
    type                           shift and go to state 47

state 44

    (33) param_list_opt -> param_list .
    (35) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 33 (param_list_opt -> param_list .)
    COMMA           shift and go to state 54


state 45

    (17) constructor_decl -> mod ID LPAREN param_list_opt . RPAREN block

    RPAREN          shift and go to state 55


state 46

    (36) param_list -> param .

    COMMA           reduce using rule 36 (param_list -> param .)
    RPAREN          reduce using rule 36 (param_list -> param .)


state 47

    (37) param -> type . ID

    ID              shift and go to state 56


state 48

    (28) type -> ID .

    ID              reduce using rule 28 (type -> ID .)


state 49

    (15) method_decl -> mod VOID ID LPAREN param_list_opt . RPAREN block

    RPAREN          shift and go to state 57


state 50

    (32) var -> var LBRACKET RBRACKET .

    LBRACKET        reduce using rule 32 (var -> var LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 32 (var -> var LBRACKET RBRACKET .)
    COMMA           reduce using rule 32 (var -> var LBRACKET RBRACKET .)


state 51

    (29) var_list -> var_list COMMA var .
    (32) var -> var . LBRACKET RBRACKET

    SEMICOLON       reduce using rule 29 (var_list -> var_list COMMA var .)
    COMMA           reduce using rule 29 (var_list -> var_list COMMA var .)
    LBRACKET        shift and go to state 40


state 52

    (31) var -> ID .

    LBRACKET        reduce using rule 31 (var -> ID .)
    SEMICOLON       reduce using rule 31 (var -> ID .)
    COMMA           reduce using rule 31 (var -> ID .)


state 53

    (16) method_decl -> mod type ID LPAREN param_list_opt . RPAREN block

    RPAREN          shift and go to state 58


state 54

    (35) param_list -> param_list COMMA . param
    (37) param -> . type ID
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID

    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 48

    type                           shift and go to state 47
    param                          shift and go to state 59

state 55

    (17) constructor_decl -> mod ID LPAREN param_list_opt RPAREN . block
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 61

state 56

    (37) param -> type ID .

    COMMA           reduce using rule 37 (param -> type ID .)
    RPAREN          reduce using rule 37 (param -> type ID .)


state 57

    (15) method_decl -> mod VOID ID LPAREN param_list_opt RPAREN . block
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 62

state 58

    (16) method_decl -> mod type ID LPAREN param_list_opt RPAREN . block
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 63

state 59

    (35) param_list -> param_list COMMA param .

    COMMA           reduce using rule 35 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 35 (param_list -> param_list COMMA param .)


state 60

    (38) block -> LBRACE . stmt_list RBRACE
    (39) block -> LBRACE . stmt_list error RBRACE
    (40) stmt_list -> .
    (41) stmt_list -> . stmt_list stmt

    RBRACE          reduce using rule 40 (stmt_list -> .)
    error           reduce using rule 40 (stmt_list -> .)
    IF              reduce using rule 40 (stmt_list -> .)
    WHILE           reduce using rule 40 (stmt_list -> .)
    FOR             reduce using rule 40 (stmt_list -> .)
    RETURN          reduce using rule 40 (stmt_list -> .)
    BREAK           reduce using rule 40 (stmt_list -> .)
    CONTINUE        reduce using rule 40 (stmt_list -> .)
    LBRACE          reduce using rule 40 (stmt_list -> .)
    INC             reduce using rule 40 (stmt_list -> .)
    DEC             reduce using rule 40 (stmt_list -> .)
    INT             reduce using rule 40 (stmt_list -> .)
    BOOLEAN         reduce using rule 40 (stmt_list -> .)
    FLOAT           reduce using rule 40 (stmt_list -> .)
    ID              reduce using rule 40 (stmt_list -> .)
    THIS            reduce using rule 40 (stmt_list -> .)
    SUPER           reduce using rule 40 (stmt_list -> .)
    LPAREN          reduce using rule 40 (stmt_list -> .)
    NEW             reduce using rule 40 (stmt_list -> .)
    INT_CONST       reduce using rule 40 (stmt_list -> .)
    FLOAT_CONST     reduce using rule 40 (stmt_list -> .)
    STRING_CONST    reduce using rule 40 (stmt_list -> .)
    NULL            reduce using rule 40 (stmt_list -> .)
    TRUE            reduce using rule 40 (stmt_list -> .)
    FALSE           reduce using rule 40 (stmt_list -> .)

    stmt_list                      shift and go to state 64

state 61

    (17) constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .

    RBRACE          reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    PUBLIC          reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    PRIVATE         reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    VOID            reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    ID              reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    INT             reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    BOOLEAN         reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    FLOAT           reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)
    STATIC          reduce using rule 17 (constructor_decl -> mod ID LPAREN param_list_opt RPAREN block .)


state 62

    (15) method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .

    RBRACE          reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    PUBLIC          reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    PRIVATE         reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    VOID            reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    ID              reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    INT             reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    BOOLEAN         reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    FLOAT           reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)
    STATIC          reduce using rule 15 (method_decl -> mod VOID ID LPAREN param_list_opt RPAREN block .)


state 63

    (16) method_decl -> mod type ID LPAREN param_list_opt RPAREN block .

    RBRACE          reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    PUBLIC          reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    PRIVATE         reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    VOID            reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    ID              reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    INT             reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    BOOLEAN         reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    FLOAT           reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)
    STATIC          reduce using rule 16 (method_decl -> mod type ID LPAREN param_list_opt RPAREN block .)


state 64

    (38) block -> LBRACE stmt_list . RBRACE
    (39) block -> LBRACE stmt_list . error RBRACE
    (41) stmt_list -> stmt_list . stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . IF LPAREN expr RPAREN stmt
    (44) stmt -> . WHILE LPAREN expr RPAREN stmt
    (45) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (46) stmt -> . RETURN expr_opt SEMICOLON
    (47) stmt -> . stmt_expr SEMICOLON
    (48) stmt -> . BREAK SEMICOLON
    (49) stmt -> . CONTINUE SEMICOLON
    (50) stmt -> . block
    (51) stmt -> . var_decl
    (52) stmt -> . error SEMICOLON
    (105) stmt_expr -> . assign
    (106) stmt_expr -> . method_invocation
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE
    (24) var_decl -> . type var_list SEMICOLON
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE

    RBRACE          shift and go to state 81
    error           shift and go to state 93
    IF              shift and go to state 86
    WHILE           shift and go to state 67
    FOR             shift and go to state 82
    RETURN          shift and go to state 65
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 91
    LBRACE          shift and go to state 60
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 85
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 80
    array_access                   shift and go to state 71
    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 83
    primary                        shift and go to state 66
    literal                        shift and go to state 77
    lhs                            shift and go to state 92
    var_decl                       shift and go to state 88
    method_invocation              shift and go to state 78
    type                           shift and go to state 79
    assign                         shift and go to state 95
    block                          shift and go to state 96

state 65

    (46) stmt -> RETURN . expr_opt SEMICOLON
    (109) expr_opt -> . expr
    (110) expr_opt -> .
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    SEMICOLON       reduce using rule 110 (expr_opt -> .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 107
    primary                        shift and go to state 99
    array_access                   shift and go to state 71
    literal                        shift and go to state 77
    expr_opt                       shift and go to state 102
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 66

    (72) field_access -> primary . DOT ID
    (74) array_access -> primary . LBRACKET expr RBRACKET

    DOT             shift and go to state 112
    LBRACKET        shift and go to state 111


state 67

    (44) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 113


state 68

    (54) literal -> FLOAT_CONST .

    DOT             reduce using rule 54 (literal -> FLOAT_CONST .)
    LBRACKET        reduce using rule 54 (literal -> FLOAT_CONST .)
    RPAREN          reduce using rule 54 (literal -> FLOAT_CONST .)
    PLUS            reduce using rule 54 (literal -> FLOAT_CONST .)
    MINUS           reduce using rule 54 (literal -> FLOAT_CONST .)
    MULTIPLY        reduce using rule 54 (literal -> FLOAT_CONST .)
    DIVIDE          reduce using rule 54 (literal -> FLOAT_CONST .)
    EQ              reduce using rule 54 (literal -> FLOAT_CONST .)
    NEQ             reduce using rule 54 (literal -> FLOAT_CONST .)
    LT              reduce using rule 54 (literal -> FLOAT_CONST .)
    LEQ             reduce using rule 54 (literal -> FLOAT_CONST .)
    GT              reduce using rule 54 (literal -> FLOAT_CONST .)
    GEQ             reduce using rule 54 (literal -> FLOAT_CONST .)
    AND             reduce using rule 54 (literal -> FLOAT_CONST .)
    OR              reduce using rule 54 (literal -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 54 (literal -> FLOAT_CONST .)
    RBRACKET        reduce using rule 54 (literal -> FLOAT_CONST .)
    COMMA           reduce using rule 54 (literal -> FLOAT_CONST .)


state 69

    (63) primary -> NEW . ID LPAREN args_opt RPAREN

    ID              shift and go to state 114


state 70

    (98) assign -> DEC . lhs
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN

    ID              shift and go to state 106
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 105
    primary                        shift and go to state 66
    literal                        shift and go to state 77
    lhs                            shift and go to state 115
    method_invocation              shift and go to state 104
    array_access                   shift and go to state 71

state 71

    (71) lhs -> array_access .

    ASSIGN          reduce using rule 71 (lhs -> array_access .)
    INC             reduce using rule 71 (lhs -> array_access .)
    DEC             reduce using rule 71 (lhs -> array_access .)
    DOT             reduce using rule 71 (lhs -> array_access .)
    LBRACKET        reduce using rule 71 (lhs -> array_access .)
    PLUS            reduce using rule 71 (lhs -> array_access .)
    MINUS           reduce using rule 71 (lhs -> array_access .)
    MULTIPLY        reduce using rule 71 (lhs -> array_access .)
    DIVIDE          reduce using rule 71 (lhs -> array_access .)
    EQ              reduce using rule 71 (lhs -> array_access .)
    NEQ             reduce using rule 71 (lhs -> array_access .)
    LT              reduce using rule 71 (lhs -> array_access .)
    LEQ             reduce using rule 71 (lhs -> array_access .)
    GT              reduce using rule 71 (lhs -> array_access .)
    GEQ             reduce using rule 71 (lhs -> array_access .)
    AND             reduce using rule 71 (lhs -> array_access .)
    OR              reduce using rule 71 (lhs -> array_access .)
    SEMICOLON       reduce using rule 71 (lhs -> array_access .)
    RPAREN          reduce using rule 71 (lhs -> array_access .)
    RBRACKET        reduce using rule 71 (lhs -> array_access .)
    COMMA           reduce using rule 71 (lhs -> array_access .)


state 72

    (55) literal -> STRING_CONST .

    DOT             reduce using rule 55 (literal -> STRING_CONST .)
    LBRACKET        reduce using rule 55 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 55 (literal -> STRING_CONST .)
    PLUS            reduce using rule 55 (literal -> STRING_CONST .)
    MINUS           reduce using rule 55 (literal -> STRING_CONST .)
    MULTIPLY        reduce using rule 55 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 55 (literal -> STRING_CONST .)
    EQ              reduce using rule 55 (literal -> STRING_CONST .)
    NEQ             reduce using rule 55 (literal -> STRING_CONST .)
    LT              reduce using rule 55 (literal -> STRING_CONST .)
    LEQ             reduce using rule 55 (literal -> STRING_CONST .)
    GT              reduce using rule 55 (literal -> STRING_CONST .)
    GEQ             reduce using rule 55 (literal -> STRING_CONST .)
    AND             reduce using rule 55 (literal -> STRING_CONST .)
    OR              reduce using rule 55 (literal -> STRING_CONST .)
    SEMICOLON       reduce using rule 55 (literal -> STRING_CONST .)
    RBRACKET        reduce using rule 55 (literal -> STRING_CONST .)
    COMMA           reduce using rule 55 (literal -> STRING_CONST .)


state 73

    (53) literal -> INT_CONST .

    DOT             reduce using rule 53 (literal -> INT_CONST .)
    LBRACKET        reduce using rule 53 (literal -> INT_CONST .)
    RPAREN          reduce using rule 53 (literal -> INT_CONST .)
    PLUS            reduce using rule 53 (literal -> INT_CONST .)
    MINUS           reduce using rule 53 (literal -> INT_CONST .)
    MULTIPLY        reduce using rule 53 (literal -> INT_CONST .)
    DIVIDE          reduce using rule 53 (literal -> INT_CONST .)
    EQ              reduce using rule 53 (literal -> INT_CONST .)
    NEQ             reduce using rule 53 (literal -> INT_CONST .)
    LT              reduce using rule 53 (literal -> INT_CONST .)
    LEQ             reduce using rule 53 (literal -> INT_CONST .)
    GT              reduce using rule 53 (literal -> INT_CONST .)
    GEQ             reduce using rule 53 (literal -> INT_CONST .)
    AND             reduce using rule 53 (literal -> INT_CONST .)
    OR              reduce using rule 53 (literal -> INT_CONST .)
    SEMICOLON       reduce using rule 53 (literal -> INT_CONST .)
    RBRACKET        reduce using rule 53 (literal -> INT_CONST .)
    COMMA           reduce using rule 53 (literal -> INT_CONST .)


state 74

    (56) literal -> NULL .

    DOT             reduce using rule 56 (literal -> NULL .)
    LBRACKET        reduce using rule 56 (literal -> NULL .)
    RPAREN          reduce using rule 56 (literal -> NULL .)
    PLUS            reduce using rule 56 (literal -> NULL .)
    MINUS           reduce using rule 56 (literal -> NULL .)
    MULTIPLY        reduce using rule 56 (literal -> NULL .)
    DIVIDE          reduce using rule 56 (literal -> NULL .)
    EQ              reduce using rule 56 (literal -> NULL .)
    NEQ             reduce using rule 56 (literal -> NULL .)
    LT              reduce using rule 56 (literal -> NULL .)
    LEQ             reduce using rule 56 (literal -> NULL .)
    GT              reduce using rule 56 (literal -> NULL .)
    GEQ             reduce using rule 56 (literal -> NULL .)
    AND             reduce using rule 56 (literal -> NULL .)
    OR              reduce using rule 56 (literal -> NULL .)
    SEMICOLON       reduce using rule 56 (literal -> NULL .)
    RBRACKET        reduce using rule 56 (literal -> NULL .)
    COMMA           reduce using rule 56 (literal -> NULL .)


state 75

    (57) literal -> TRUE .

    DOT             reduce using rule 57 (literal -> TRUE .)
    LBRACKET        reduce using rule 57 (literal -> TRUE .)
    RPAREN          reduce using rule 57 (literal -> TRUE .)
    PLUS            reduce using rule 57 (literal -> TRUE .)
    MINUS           reduce using rule 57 (literal -> TRUE .)
    MULTIPLY        reduce using rule 57 (literal -> TRUE .)
    DIVIDE          reduce using rule 57 (literal -> TRUE .)
    EQ              reduce using rule 57 (literal -> TRUE .)
    NEQ             reduce using rule 57 (literal -> TRUE .)
    LT              reduce using rule 57 (literal -> TRUE .)
    LEQ             reduce using rule 57 (literal -> TRUE .)
    GT              reduce using rule 57 (literal -> TRUE .)
    GEQ             reduce using rule 57 (literal -> TRUE .)
    AND             reduce using rule 57 (literal -> TRUE .)
    OR              reduce using rule 57 (literal -> TRUE .)
    SEMICOLON       reduce using rule 57 (literal -> TRUE .)
    RBRACKET        reduce using rule 57 (literal -> TRUE .)
    COMMA           reduce using rule 57 (literal -> TRUE .)


state 76

    (47) stmt -> stmt_expr . SEMICOLON

    SEMICOLON       shift and go to state 116


state 77

    (59) primary -> literal .

    DOT             reduce using rule 59 (primary -> literal .)
    LBRACKET        reduce using rule 59 (primary -> literal .)
    PLUS            reduce using rule 59 (primary -> literal .)
    MINUS           reduce using rule 59 (primary -> literal .)
    MULTIPLY        reduce using rule 59 (primary -> literal .)
    DIVIDE          reduce using rule 59 (primary -> literal .)
    EQ              reduce using rule 59 (primary -> literal .)
    NEQ             reduce using rule 59 (primary -> literal .)
    LT              reduce using rule 59 (primary -> literal .)
    LEQ             reduce using rule 59 (primary -> literal .)
    GT              reduce using rule 59 (primary -> literal .)
    GEQ             reduce using rule 59 (primary -> literal .)
    AND             reduce using rule 59 (primary -> literal .)
    OR              reduce using rule 59 (primary -> literal .)
    SEMICOLON       reduce using rule 59 (primary -> literal .)
    RPAREN          reduce using rule 59 (primary -> literal .)
    RBRACKET        reduce using rule 59 (primary -> literal .)
    COMMA           reduce using rule 59 (primary -> literal .)


state 78

    (106) stmt_expr -> method_invocation .
    (65) primary -> method_invocation .

    SEMICOLON       reduce using rule 106 (stmt_expr -> method_invocation .)
    RPAREN          reduce using rule 106 (stmt_expr -> method_invocation .)
    DOT             reduce using rule 65 (primary -> method_invocation .)
    LBRACKET        reduce using rule 65 (primary -> method_invocation .)


state 79

    (24) var_decl -> type . var_list SEMICOLON
    (29) var_list -> . var_list COMMA var
    (30) var_list -> . var
    (31) var -> . ID
    (32) var -> . var LBRACKET RBRACKET

    ID              shift and go to state 52

    var                            shift and go to state 35
    var_list                       shift and go to state 36

state 80

    (75) method_invocation -> field_access . LPAREN args_opt RPAREN
    (70) lhs -> field_access .

    LPAREN          shift and go to state 117
    ASSIGN          reduce using rule 70 (lhs -> field_access .)
    INC             reduce using rule 70 (lhs -> field_access .)
    DEC             reduce using rule 70 (lhs -> field_access .)
    DOT             reduce using rule 70 (lhs -> field_access .)
    LBRACKET        reduce using rule 70 (lhs -> field_access .)


state 81

    (38) block -> LBRACE stmt_list RBRACE .

    RBRACE          reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    error           reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    IF              reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    LBRACE          reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    INC             reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    DEC             reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    INT             reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    ID              reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    THIS            reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    SUPER           reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    NEW             reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    INT_CONST       reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    FLOAT_CONST     reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    STRING_CONST    reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    ELSE            reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    PUBLIC          reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    PRIVATE         reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    VOID            reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)
    STATIC          reduce using rule 38 (block -> LBRACE stmt_list RBRACE .)


state 82

    (45) stmt -> FOR . LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt

    LPAREN          shift and go to state 118


state 83

    (41) stmt_list -> stmt_list stmt .

    RBRACE          reduce using rule 41 (stmt_list -> stmt_list stmt .)
    error           reduce using rule 41 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 41 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 41 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 41 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 41 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 41 (stmt_list -> stmt_list stmt .)
    CONTINUE        reduce using rule 41 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 41 (stmt_list -> stmt_list stmt .)
    INC             reduce using rule 41 (stmt_list -> stmt_list stmt .)
    DEC             reduce using rule 41 (stmt_list -> stmt_list stmt .)
    INT             reduce using rule 41 (stmt_list -> stmt_list stmt .)
    BOOLEAN         reduce using rule 41 (stmt_list -> stmt_list stmt .)
    FLOAT           reduce using rule 41 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 41 (stmt_list -> stmt_list stmt .)
    THIS            reduce using rule 41 (stmt_list -> stmt_list stmt .)
    SUPER           reduce using rule 41 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 41 (stmt_list -> stmt_list stmt .)
    NEW             reduce using rule 41 (stmt_list -> stmt_list stmt .)
    INT_CONST       reduce using rule 41 (stmt_list -> stmt_list stmt .)
    FLOAT_CONST     reduce using rule 41 (stmt_list -> stmt_list stmt .)
    STRING_CONST    reduce using rule 41 (stmt_list -> stmt_list stmt .)
    NULL            reduce using rule 41 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 41 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 41 (stmt_list -> stmt_list stmt .)


state 84

    (62) primary -> LPAREN . expr RPAREN
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 119
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 85

    (28) type -> ID .
    (73) field_access -> ID .

    ID              reduce using rule 28 (type -> ID .)
    LPAREN          reduce using rule 73 (field_access -> ID .)
    ASSIGN          reduce using rule 73 (field_access -> ID .)
    INC             reduce using rule 73 (field_access -> ID .)
    DEC             reduce using rule 73 (field_access -> ID .)
    DOT             reduce using rule 73 (field_access -> ID .)
    LBRACKET        reduce using rule 73 (field_access -> ID .)


state 86

    (42) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> IF . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 120


state 87

    (58) literal -> FALSE .

    DOT             reduce using rule 58 (literal -> FALSE .)
    LBRACKET        reduce using rule 58 (literal -> FALSE .)
    RPAREN          reduce using rule 58 (literal -> FALSE .)
    PLUS            reduce using rule 58 (literal -> FALSE .)
    MINUS           reduce using rule 58 (literal -> FALSE .)
    MULTIPLY        reduce using rule 58 (literal -> FALSE .)
    DIVIDE          reduce using rule 58 (literal -> FALSE .)
    EQ              reduce using rule 58 (literal -> FALSE .)
    NEQ             reduce using rule 58 (literal -> FALSE .)
    LT              reduce using rule 58 (literal -> FALSE .)
    LEQ             reduce using rule 58 (literal -> FALSE .)
    GT              reduce using rule 58 (literal -> FALSE .)
    GEQ             reduce using rule 58 (literal -> FALSE .)
    AND             reduce using rule 58 (literal -> FALSE .)
    OR              reduce using rule 58 (literal -> FALSE .)
    SEMICOLON       reduce using rule 58 (literal -> FALSE .)
    RBRACKET        reduce using rule 58 (literal -> FALSE .)
    COMMA           reduce using rule 58 (literal -> FALSE .)


state 88

    (51) stmt -> var_decl .

    RBRACE          reduce using rule 51 (stmt -> var_decl .)
    error           reduce using rule 51 (stmt -> var_decl .)
    IF              reduce using rule 51 (stmt -> var_decl .)
    WHILE           reduce using rule 51 (stmt -> var_decl .)
    FOR             reduce using rule 51 (stmt -> var_decl .)
    RETURN          reduce using rule 51 (stmt -> var_decl .)
    BREAK           reduce using rule 51 (stmt -> var_decl .)
    CONTINUE        reduce using rule 51 (stmt -> var_decl .)
    LBRACE          reduce using rule 51 (stmt -> var_decl .)
    INC             reduce using rule 51 (stmt -> var_decl .)
    DEC             reduce using rule 51 (stmt -> var_decl .)
    INT             reduce using rule 51 (stmt -> var_decl .)
    BOOLEAN         reduce using rule 51 (stmt -> var_decl .)
    FLOAT           reduce using rule 51 (stmt -> var_decl .)
    ID              reduce using rule 51 (stmt -> var_decl .)
    THIS            reduce using rule 51 (stmt -> var_decl .)
    SUPER           reduce using rule 51 (stmt -> var_decl .)
    LPAREN          reduce using rule 51 (stmt -> var_decl .)
    NEW             reduce using rule 51 (stmt -> var_decl .)
    INT_CONST       reduce using rule 51 (stmt -> var_decl .)
    FLOAT_CONST     reduce using rule 51 (stmt -> var_decl .)
    STRING_CONST    reduce using rule 51 (stmt -> var_decl .)
    NULL            reduce using rule 51 (stmt -> var_decl .)
    TRUE            reduce using rule 51 (stmt -> var_decl .)
    FALSE           reduce using rule 51 (stmt -> var_decl .)
    ELSE            reduce using rule 51 (stmt -> var_decl .)


state 89

    (48) stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 121


state 90

    (60) primary -> THIS .

    DOT             reduce using rule 60 (primary -> THIS .)
    LBRACKET        reduce using rule 60 (primary -> THIS .)
    PLUS            reduce using rule 60 (primary -> THIS .)
    MINUS           reduce using rule 60 (primary -> THIS .)
    MULTIPLY        reduce using rule 60 (primary -> THIS .)
    DIVIDE          reduce using rule 60 (primary -> THIS .)
    EQ              reduce using rule 60 (primary -> THIS .)
    NEQ             reduce using rule 60 (primary -> THIS .)
    LT              reduce using rule 60 (primary -> THIS .)
    LEQ             reduce using rule 60 (primary -> THIS .)
    GT              reduce using rule 60 (primary -> THIS .)
    GEQ             reduce using rule 60 (primary -> THIS .)
    AND             reduce using rule 60 (primary -> THIS .)
    OR              reduce using rule 60 (primary -> THIS .)
    SEMICOLON       reduce using rule 60 (primary -> THIS .)
    RPAREN          reduce using rule 60 (primary -> THIS .)
    RBRACKET        reduce using rule 60 (primary -> THIS .)
    COMMA           reduce using rule 60 (primary -> THIS .)


state 91

    (49) stmt -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 122


state 92

    (94) assign -> lhs . ASSIGN expr
    (95) assign -> lhs . INC
    (97) assign -> lhs . DEC
    (64) primary -> lhs .

    ASSIGN          shift and go to state 124
    INC             shift and go to state 125
    DEC             shift and go to state 123
    DOT             reduce using rule 64 (primary -> lhs .)
    LBRACKET        reduce using rule 64 (primary -> lhs .)


state 93

    (39) block -> LBRACE stmt_list error . RBRACE
    (52) stmt -> error . SEMICOLON

    RBRACE          shift and go to state 126
    SEMICOLON       shift and go to state 127


state 94

    (61) primary -> SUPER .

    DOT             reduce using rule 61 (primary -> SUPER .)
    LBRACKET        reduce using rule 61 (primary -> SUPER .)
    PLUS            reduce using rule 61 (primary -> SUPER .)
    MINUS           reduce using rule 61 (primary -> SUPER .)
    MULTIPLY        reduce using rule 61 (primary -> SUPER .)
    DIVIDE          reduce using rule 61 (primary -> SUPER .)
    EQ              reduce using rule 61 (primary -> SUPER .)
    NEQ             reduce using rule 61 (primary -> SUPER .)
    LT              reduce using rule 61 (primary -> SUPER .)
    LEQ             reduce using rule 61 (primary -> SUPER .)
    GT              reduce using rule 61 (primary -> SUPER .)
    GEQ             reduce using rule 61 (primary -> SUPER .)
    AND             reduce using rule 61 (primary -> SUPER .)
    OR              reduce using rule 61 (primary -> SUPER .)
    SEMICOLON       reduce using rule 61 (primary -> SUPER .)
    RPAREN          reduce using rule 61 (primary -> SUPER .)
    RBRACKET        reduce using rule 61 (primary -> SUPER .)
    COMMA           reduce using rule 61 (primary -> SUPER .)


state 95

    (105) stmt_expr -> assign .

    SEMICOLON       reduce using rule 105 (stmt_expr -> assign .)
    RPAREN          reduce using rule 105 (stmt_expr -> assign .)


state 96

    (50) stmt -> block .

    RBRACE          reduce using rule 50 (stmt -> block .)
    error           reduce using rule 50 (stmt -> block .)
    IF              reduce using rule 50 (stmt -> block .)
    WHILE           reduce using rule 50 (stmt -> block .)
    FOR             reduce using rule 50 (stmt -> block .)
    RETURN          reduce using rule 50 (stmt -> block .)
    BREAK           reduce using rule 50 (stmt -> block .)
    CONTINUE        reduce using rule 50 (stmt -> block .)
    LBRACE          reduce using rule 50 (stmt -> block .)
    INC             reduce using rule 50 (stmt -> block .)
    DEC             reduce using rule 50 (stmt -> block .)
    INT             reduce using rule 50 (stmt -> block .)
    BOOLEAN         reduce using rule 50 (stmt -> block .)
    FLOAT           reduce using rule 50 (stmt -> block .)
    ID              reduce using rule 50 (stmt -> block .)
    THIS            reduce using rule 50 (stmt -> block .)
    SUPER           reduce using rule 50 (stmt -> block .)
    LPAREN          reduce using rule 50 (stmt -> block .)
    NEW             reduce using rule 50 (stmt -> block .)
    INT_CONST       reduce using rule 50 (stmt -> block .)
    FLOAT_CONST     reduce using rule 50 (stmt -> block .)
    STRING_CONST    reduce using rule 50 (stmt -> block .)
    NULL            reduce using rule 50 (stmt -> block .)
    TRUE            reduce using rule 50 (stmt -> block .)
    FALSE           reduce using rule 50 (stmt -> block .)
    ELSE            reduce using rule 50 (stmt -> block .)


state 97

    (96) assign -> INC . lhs
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN

    ID              shift and go to state 106
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 105
    primary                        shift and go to state 66
    literal                        shift and go to state 77
    lhs                            shift and go to state 128
    method_invocation              shift and go to state 104
    array_access                   shift and go to state 71

state 98

    (78) expr -> new_array .

    RBRACKET        reduce using rule 78 (expr -> new_array .)
    PLUS            reduce using rule 78 (expr -> new_array .)
    MINUS           reduce using rule 78 (expr -> new_array .)
    MULTIPLY        reduce using rule 78 (expr -> new_array .)
    DIVIDE          reduce using rule 78 (expr -> new_array .)
    EQ              reduce using rule 78 (expr -> new_array .)
    NEQ             reduce using rule 78 (expr -> new_array .)
    LT              reduce using rule 78 (expr -> new_array .)
    LEQ             reduce using rule 78 (expr -> new_array .)
    GT              reduce using rule 78 (expr -> new_array .)
    GEQ             reduce using rule 78 (expr -> new_array .)
    AND             reduce using rule 78 (expr -> new_array .)
    OR              reduce using rule 78 (expr -> new_array .)
    RPAREN          reduce using rule 78 (expr -> new_array .)
    SEMICOLON       reduce using rule 78 (expr -> new_array .)
    COMMA           reduce using rule 78 (expr -> new_array .)


state 99

    (76) expr -> primary .
    (72) field_access -> primary . DOT ID
    (74) array_access -> primary . LBRACKET expr RBRACKET

    RBRACKET        reduce using rule 76 (expr -> primary .)
    PLUS            reduce using rule 76 (expr -> primary .)
    MINUS           reduce using rule 76 (expr -> primary .)
    MULTIPLY        reduce using rule 76 (expr -> primary .)
    DIVIDE          reduce using rule 76 (expr -> primary .)
    EQ              reduce using rule 76 (expr -> primary .)
    NEQ             reduce using rule 76 (expr -> primary .)
    LT              reduce using rule 76 (expr -> primary .)
    LEQ             reduce using rule 76 (expr -> primary .)
    GT              reduce using rule 76 (expr -> primary .)
    GEQ             reduce using rule 76 (expr -> primary .)
    AND             reduce using rule 76 (expr -> primary .)
    OR              reduce using rule 76 (expr -> primary .)
    RPAREN          reduce using rule 76 (expr -> primary .)
    SEMICOLON       reduce using rule 76 (expr -> primary .)
    COMMA           reduce using rule 76 (expr -> primary .)
    DOT             shift and go to state 112
    LBRACKET        shift and go to state 111


state 100

    (63) primary -> NEW . ID LPAREN args_opt RPAREN
    (99) new_array -> NEW . type dim_expr_plus dim_star
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID

    ID              shift and go to state 130
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29

    type                           shift and go to state 129

state 101

    (92) expr -> MINUS . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 131
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 102

    (46) stmt -> RETURN expr_opt . SEMICOLON

    SEMICOLON       shift and go to state 132


state 103

    (91) expr -> PLUS . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 133
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 104

    (65) primary -> method_invocation .

    DOT             reduce using rule 65 (primary -> method_invocation .)
    LBRACKET        reduce using rule 65 (primary -> method_invocation .)
    PLUS            reduce using rule 65 (primary -> method_invocation .)
    MINUS           reduce using rule 65 (primary -> method_invocation .)
    MULTIPLY        reduce using rule 65 (primary -> method_invocation .)
    DIVIDE          reduce using rule 65 (primary -> method_invocation .)
    EQ              reduce using rule 65 (primary -> method_invocation .)
    NEQ             reduce using rule 65 (primary -> method_invocation .)
    LT              reduce using rule 65 (primary -> method_invocation .)
    LEQ             reduce using rule 65 (primary -> method_invocation .)
    GT              reduce using rule 65 (primary -> method_invocation .)
    GEQ             reduce using rule 65 (primary -> method_invocation .)
    AND             reduce using rule 65 (primary -> method_invocation .)
    OR              reduce using rule 65 (primary -> method_invocation .)
    SEMICOLON       reduce using rule 65 (primary -> method_invocation .)
    RPAREN          reduce using rule 65 (primary -> method_invocation .)
    RBRACKET        reduce using rule 65 (primary -> method_invocation .)
    COMMA           reduce using rule 65 (primary -> method_invocation .)


state 105

    (70) lhs -> field_access .
    (75) method_invocation -> field_access . LPAREN args_opt RPAREN

    ASSIGN          reduce using rule 70 (lhs -> field_access .)
    INC             reduce using rule 70 (lhs -> field_access .)
    DEC             reduce using rule 70 (lhs -> field_access .)
    DOT             reduce using rule 70 (lhs -> field_access .)
    LBRACKET        reduce using rule 70 (lhs -> field_access .)
    PLUS            reduce using rule 70 (lhs -> field_access .)
    MINUS           reduce using rule 70 (lhs -> field_access .)
    MULTIPLY        reduce using rule 70 (lhs -> field_access .)
    DIVIDE          reduce using rule 70 (lhs -> field_access .)
    EQ              reduce using rule 70 (lhs -> field_access .)
    NEQ             reduce using rule 70 (lhs -> field_access .)
    LT              reduce using rule 70 (lhs -> field_access .)
    LEQ             reduce using rule 70 (lhs -> field_access .)
    GT              reduce using rule 70 (lhs -> field_access .)
    GEQ             reduce using rule 70 (lhs -> field_access .)
    AND             reduce using rule 70 (lhs -> field_access .)
    OR              reduce using rule 70 (lhs -> field_access .)
    SEMICOLON       reduce using rule 70 (lhs -> field_access .)
    RPAREN          reduce using rule 70 (lhs -> field_access .)
    RBRACKET        reduce using rule 70 (lhs -> field_access .)
    COMMA           reduce using rule 70 (lhs -> field_access .)
    LPAREN          shift and go to state 117


state 106

    (73) field_access -> ID .

    LPAREN          reduce using rule 73 (field_access -> ID .)
    ASSIGN          reduce using rule 73 (field_access -> ID .)
    INC             reduce using rule 73 (field_access -> ID .)
    DEC             reduce using rule 73 (field_access -> ID .)
    DOT             reduce using rule 73 (field_access -> ID .)
    LBRACKET        reduce using rule 73 (field_access -> ID .)
    PLUS            reduce using rule 73 (field_access -> ID .)
    MINUS           reduce using rule 73 (field_access -> ID .)
    MULTIPLY        reduce using rule 73 (field_access -> ID .)
    DIVIDE          reduce using rule 73 (field_access -> ID .)
    EQ              reduce using rule 73 (field_access -> ID .)
    NEQ             reduce using rule 73 (field_access -> ID .)
    LT              reduce using rule 73 (field_access -> ID .)
    LEQ             reduce using rule 73 (field_access -> ID .)
    GT              reduce using rule 73 (field_access -> ID .)
    GEQ             reduce using rule 73 (field_access -> ID .)
    AND             reduce using rule 73 (field_access -> ID .)
    OR              reduce using rule 73 (field_access -> ID .)
    COMMA           reduce using rule 73 (field_access -> ID .)
    RPAREN          reduce using rule 73 (field_access -> ID .)
    SEMICOLON       reduce using rule 73 (field_access -> ID .)
    RBRACKET        reduce using rule 73 (field_access -> ID .)


state 107

    (109) expr_opt -> expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    SEMICOLON       reduce using rule 109 (expr_opt -> expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 108

    (77) expr -> assign .

    RBRACKET        reduce using rule 77 (expr -> assign .)
    PLUS            reduce using rule 77 (expr -> assign .)
    MINUS           reduce using rule 77 (expr -> assign .)
    MULTIPLY        reduce using rule 77 (expr -> assign .)
    DIVIDE          reduce using rule 77 (expr -> assign .)
    EQ              reduce using rule 77 (expr -> assign .)
    NEQ             reduce using rule 77 (expr -> assign .)
    LT              reduce using rule 77 (expr -> assign .)
    LEQ             reduce using rule 77 (expr -> assign .)
    GT              reduce using rule 77 (expr -> assign .)
    GEQ             reduce using rule 77 (expr -> assign .)
    AND             reduce using rule 77 (expr -> assign .)
    OR              reduce using rule 77 (expr -> assign .)
    RPAREN          reduce using rule 77 (expr -> assign .)
    SEMICOLON       reduce using rule 77 (expr -> assign .)
    COMMA           reduce using rule 77 (expr -> assign .)


state 109

    (64) primary -> lhs .
    (94) assign -> lhs . ASSIGN expr
    (95) assign -> lhs . INC
    (97) assign -> lhs . DEC

    DOT             reduce using rule 64 (primary -> lhs .)
    LBRACKET        reduce using rule 64 (primary -> lhs .)
    PLUS            reduce using rule 64 (primary -> lhs .)
    MINUS           reduce using rule 64 (primary -> lhs .)
    MULTIPLY        reduce using rule 64 (primary -> lhs .)
    DIVIDE          reduce using rule 64 (primary -> lhs .)
    EQ              reduce using rule 64 (primary -> lhs .)
    NEQ             reduce using rule 64 (primary -> lhs .)
    LT              reduce using rule 64 (primary -> lhs .)
    LEQ             reduce using rule 64 (primary -> lhs .)
    GT              reduce using rule 64 (primary -> lhs .)
    GEQ             reduce using rule 64 (primary -> lhs .)
    AND             reduce using rule 64 (primary -> lhs .)
    OR              reduce using rule 64 (primary -> lhs .)
    SEMICOLON       reduce using rule 64 (primary -> lhs .)
    RPAREN          reduce using rule 64 (primary -> lhs .)
    RBRACKET        reduce using rule 64 (primary -> lhs .)
    COMMA           reduce using rule 64 (primary -> lhs .)
    ASSIGN          shift and go to state 124
    INC             shift and go to state 125
    DEC             shift and go to state 123


state 110

    (93) expr -> NOT . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 146
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 111

    (74) array_access -> primary LBRACKET . expr RBRACKET
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 147
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 112

    (72) field_access -> primary DOT . ID

    ID              shift and go to state 148


state 113

    (44) stmt -> WHILE LPAREN . expr RPAREN stmt
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 149
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    array_access                   shift and go to state 71
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 114

    (63) primary -> NEW ID . LPAREN args_opt RPAREN

    LPAREN          shift and go to state 150


state 115

    (98) assign -> DEC lhs .
    (64) primary -> lhs .

    SEMICOLON       reduce using rule 98 (assign -> DEC lhs .)
    PLUS            reduce using rule 98 (assign -> DEC lhs .)
    MINUS           reduce using rule 98 (assign -> DEC lhs .)
    MULTIPLY        reduce using rule 98 (assign -> DEC lhs .)
    DIVIDE          reduce using rule 98 (assign -> DEC lhs .)
    EQ              reduce using rule 98 (assign -> DEC lhs .)
    NEQ             reduce using rule 98 (assign -> DEC lhs .)
    LT              reduce using rule 98 (assign -> DEC lhs .)
    LEQ             reduce using rule 98 (assign -> DEC lhs .)
    GT              reduce using rule 98 (assign -> DEC lhs .)
    GEQ             reduce using rule 98 (assign -> DEC lhs .)
    AND             reduce using rule 98 (assign -> DEC lhs .)
    OR              reduce using rule 98 (assign -> DEC lhs .)
    RPAREN          reduce using rule 98 (assign -> DEC lhs .)
    RBRACKET        reduce using rule 98 (assign -> DEC lhs .)
    COMMA           reduce using rule 98 (assign -> DEC lhs .)
    DOT             reduce using rule 64 (primary -> lhs .)
    LBRACKET        reduce using rule 64 (primary -> lhs .)


state 116

    (47) stmt -> stmt_expr SEMICOLON .

    RBRACE          reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    error           reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    IF              reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    WHILE           reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    FOR             reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    RETURN          reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    BREAK           reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    CONTINUE        reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    LBRACE          reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    INC             reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    DEC             reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    INT             reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    BOOLEAN         reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    FLOAT           reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    ID              reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    THIS            reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    SUPER           reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    LPAREN          reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    NEW             reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    INT_CONST       reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    FLOAT_CONST     reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    STRING_CONST    reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    NULL            reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    TRUE            reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    FALSE           reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)
    ELSE            reduce using rule 47 (stmt -> stmt_expr SEMICOLON .)


state 117

    (75) method_invocation -> field_access LPAREN . args_opt RPAREN
    (66) args_opt -> . arg_plus
    (67) args_opt -> .
    (68) arg_plus -> . arg_plus COMMA expr
    (69) arg_plus -> . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    RPAREN          reduce using rule 67 (args_opt -> .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    field_access                   shift and go to state 105
    new_array                      shift and go to state 98
    expr                           shift and go to state 151
    primary                        shift and go to state 99
    array_access                   shift and go to state 71
    args_opt                       shift and go to state 152
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    arg_plus                       shift and go to state 153
    assign                         shift and go to state 108

state 118

    (45) stmt -> FOR LPAREN . stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (107) stmt_expr_opt -> . stmt_expr
    (108) stmt_expr_opt -> .
    (105) stmt_expr -> . assign
    (106) stmt_expr -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE

    SEMICOLON       reduce using rule 108 (stmt_expr_opt -> .)
    INC             shift and go to state 97
    DEC             shift and go to state 70
    ID              shift and go to state 106
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 80
    primary                        shift and go to state 66
    stmt_expr_opt                  shift and go to state 155
    stmt_expr                      shift and go to state 154
    literal                        shift and go to state 77
    lhs                            shift and go to state 92
    method_invocation              shift and go to state 78
    array_access                   shift and go to state 71
    assign                         shift and go to state 95

state 119

    (62) primary -> LPAREN expr . RPAREN
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RPAREN          shift and go to state 156
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 120

    (42) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (43) stmt -> IF LPAREN . expr RPAREN stmt
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 157
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    array_access                   shift and go to state 71
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 121

    (48) stmt -> BREAK SEMICOLON .

    RBRACE          reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    error           reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    IF              reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    FOR             reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    RETURN          reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    INC             reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    DEC             reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    INT             reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    ID              reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    THIS            reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    SUPER           reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    NEW             reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    INT_CONST       reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    FLOAT_CONST     reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    STRING_CONST    reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    NULL            reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    TRUE            reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    FALSE           reduce using rule 48 (stmt -> BREAK SEMICOLON .)
    ELSE            reduce using rule 48 (stmt -> BREAK SEMICOLON .)


state 122

    (49) stmt -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    error           reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    IF              reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    INC             reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    DEC             reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    INT             reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    BOOLEAN         reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    ID              reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    SUPER           reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    INT_CONST       reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    FLOAT_CONST     reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    STRING_CONST    reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 49 (stmt -> CONTINUE SEMICOLON .)


state 123

    (97) assign -> lhs DEC .

    SEMICOLON       reduce using rule 97 (assign -> lhs DEC .)
    PLUS            reduce using rule 97 (assign -> lhs DEC .)
    MINUS           reduce using rule 97 (assign -> lhs DEC .)
    MULTIPLY        reduce using rule 97 (assign -> lhs DEC .)
    DIVIDE          reduce using rule 97 (assign -> lhs DEC .)
    EQ              reduce using rule 97 (assign -> lhs DEC .)
    NEQ             reduce using rule 97 (assign -> lhs DEC .)
    LT              reduce using rule 97 (assign -> lhs DEC .)
    LEQ             reduce using rule 97 (assign -> lhs DEC .)
    GT              reduce using rule 97 (assign -> lhs DEC .)
    GEQ             reduce using rule 97 (assign -> lhs DEC .)
    AND             reduce using rule 97 (assign -> lhs DEC .)
    OR              reduce using rule 97 (assign -> lhs DEC .)
    RPAREN          reduce using rule 97 (assign -> lhs DEC .)
    RBRACKET        reduce using rule 97 (assign -> lhs DEC .)
    COMMA           reduce using rule 97 (assign -> lhs DEC .)


state 124

    (94) assign -> lhs ASSIGN . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 158
    primary                        shift and go to state 99
    array_access                   shift and go to state 71
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 125

    (95) assign -> lhs INC .

    SEMICOLON       reduce using rule 95 (assign -> lhs INC .)
    PLUS            reduce using rule 95 (assign -> lhs INC .)
    MINUS           reduce using rule 95 (assign -> lhs INC .)
    MULTIPLY        reduce using rule 95 (assign -> lhs INC .)
    DIVIDE          reduce using rule 95 (assign -> lhs INC .)
    EQ              reduce using rule 95 (assign -> lhs INC .)
    NEQ             reduce using rule 95 (assign -> lhs INC .)
    LT              reduce using rule 95 (assign -> lhs INC .)
    LEQ             reduce using rule 95 (assign -> lhs INC .)
    GT              reduce using rule 95 (assign -> lhs INC .)
    GEQ             reduce using rule 95 (assign -> lhs INC .)
    AND             reduce using rule 95 (assign -> lhs INC .)
    OR              reduce using rule 95 (assign -> lhs INC .)
    RPAREN          reduce using rule 95 (assign -> lhs INC .)
    RBRACKET        reduce using rule 95 (assign -> lhs INC .)
    COMMA           reduce using rule 95 (assign -> lhs INC .)


state 126

    (39) block -> LBRACE stmt_list error RBRACE .

    RBRACE          reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    error           reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    IF              reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    WHILE           reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    FOR             reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    RETURN          reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    BREAK           reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    CONTINUE        reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    LBRACE          reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    INC             reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    DEC             reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    INT             reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    BOOLEAN         reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    FLOAT           reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    ID              reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    THIS            reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    SUPER           reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    LPAREN          reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    NEW             reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    INT_CONST       reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    FLOAT_CONST     reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    STRING_CONST    reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    NULL            reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    TRUE            reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    FALSE           reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    ELSE            reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    PUBLIC          reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    PRIVATE         reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    VOID            reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)
    STATIC          reduce using rule 39 (block -> LBRACE stmt_list error RBRACE .)


state 127

    (52) stmt -> error SEMICOLON .

    RBRACE          reduce using rule 52 (stmt -> error SEMICOLON .)
    error           reduce using rule 52 (stmt -> error SEMICOLON .)
    IF              reduce using rule 52 (stmt -> error SEMICOLON .)
    WHILE           reduce using rule 52 (stmt -> error SEMICOLON .)
    FOR             reduce using rule 52 (stmt -> error SEMICOLON .)
    RETURN          reduce using rule 52 (stmt -> error SEMICOLON .)
    BREAK           reduce using rule 52 (stmt -> error SEMICOLON .)
    CONTINUE        reduce using rule 52 (stmt -> error SEMICOLON .)
    LBRACE          reduce using rule 52 (stmt -> error SEMICOLON .)
    INC             reduce using rule 52 (stmt -> error SEMICOLON .)
    DEC             reduce using rule 52 (stmt -> error SEMICOLON .)
    INT             reduce using rule 52 (stmt -> error SEMICOLON .)
    BOOLEAN         reduce using rule 52 (stmt -> error SEMICOLON .)
    FLOAT           reduce using rule 52 (stmt -> error SEMICOLON .)
    ID              reduce using rule 52 (stmt -> error SEMICOLON .)
    THIS            reduce using rule 52 (stmt -> error SEMICOLON .)
    SUPER           reduce using rule 52 (stmt -> error SEMICOLON .)
    LPAREN          reduce using rule 52 (stmt -> error SEMICOLON .)
    NEW             reduce using rule 52 (stmt -> error SEMICOLON .)
    INT_CONST       reduce using rule 52 (stmt -> error SEMICOLON .)
    FLOAT_CONST     reduce using rule 52 (stmt -> error SEMICOLON .)
    STRING_CONST    reduce using rule 52 (stmt -> error SEMICOLON .)
    NULL            reduce using rule 52 (stmt -> error SEMICOLON .)
    TRUE            reduce using rule 52 (stmt -> error SEMICOLON .)
    FALSE           reduce using rule 52 (stmt -> error SEMICOLON .)
    ELSE            reduce using rule 52 (stmt -> error SEMICOLON .)


state 128

    (96) assign -> INC lhs .
    (64) primary -> lhs .

    SEMICOLON       reduce using rule 96 (assign -> INC lhs .)
    PLUS            reduce using rule 96 (assign -> INC lhs .)
    MINUS           reduce using rule 96 (assign -> INC lhs .)
    MULTIPLY        reduce using rule 96 (assign -> INC lhs .)
    DIVIDE          reduce using rule 96 (assign -> INC lhs .)
    EQ              reduce using rule 96 (assign -> INC lhs .)
    NEQ             reduce using rule 96 (assign -> INC lhs .)
    LT              reduce using rule 96 (assign -> INC lhs .)
    LEQ             reduce using rule 96 (assign -> INC lhs .)
    GT              reduce using rule 96 (assign -> INC lhs .)
    GEQ             reduce using rule 96 (assign -> INC lhs .)
    AND             reduce using rule 96 (assign -> INC lhs .)
    OR              reduce using rule 96 (assign -> INC lhs .)
    RPAREN          reduce using rule 96 (assign -> INC lhs .)
    RBRACKET        reduce using rule 96 (assign -> INC lhs .)
    COMMA           reduce using rule 96 (assign -> INC lhs .)
    DOT             reduce using rule 64 (primary -> lhs .)
    LBRACKET        reduce using rule 64 (primary -> lhs .)


state 129

    (99) new_array -> NEW type . dim_expr_plus dim_star
    (100) dim_expr_plus -> . dim_expr_plus dim_expr
    (101) dim_expr_plus -> . dim_expr
    (102) dim_expr -> . LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 161

    dim_expr                       shift and go to state 160
    dim_expr_plus                  shift and go to state 159

state 130

    (63) primary -> NEW ID . LPAREN args_opt RPAREN
    (28) type -> ID .

    LPAREN          shift and go to state 150
    LBRACKET        reduce using rule 28 (type -> ID .)


state 131

    (92) expr -> MINUS expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 92 (expr -> MINUS expr .)
    PLUS            reduce using rule 92 (expr -> MINUS expr .)
    MINUS           reduce using rule 92 (expr -> MINUS expr .)
    MULTIPLY        reduce using rule 92 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 92 (expr -> MINUS expr .)
    EQ              reduce using rule 92 (expr -> MINUS expr .)
    NEQ             reduce using rule 92 (expr -> MINUS expr .)
    LT              reduce using rule 92 (expr -> MINUS expr .)
    LEQ             reduce using rule 92 (expr -> MINUS expr .)
    GT              reduce using rule 92 (expr -> MINUS expr .)
    GEQ             reduce using rule 92 (expr -> MINUS expr .)
    AND             reduce using rule 92 (expr -> MINUS expr .)
    OR              reduce using rule 92 (expr -> MINUS expr .)
    RPAREN          reduce using rule 92 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 92 (expr -> MINUS expr .)
    COMMA           reduce using rule 92 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MULTIPLY        [ shift and go to state 142 ]
  ! DIVIDE          [ shift and go to state 137 ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 132

    (46) stmt -> RETURN expr_opt SEMICOLON .

    RBRACE          reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    error           reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    IF              reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    WHILE           reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    FOR             reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    RETURN          reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    BREAK           reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    CONTINUE        reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    LBRACE          reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    INC             reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    DEC             reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    INT             reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    BOOLEAN         reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    FLOAT           reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    ID              reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    THIS            reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    SUPER           reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    LPAREN          reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    NEW             reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    INT_CONST       reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    FLOAT_CONST     reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    STRING_CONST    reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    NULL            reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    TRUE            reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    FALSE           reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)
    ELSE            reduce using rule 46 (stmt -> RETURN expr_opt SEMICOLON .)


state 133

    (91) expr -> PLUS expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 91 (expr -> PLUS expr .)
    PLUS            reduce using rule 91 (expr -> PLUS expr .)
    MINUS           reduce using rule 91 (expr -> PLUS expr .)
    MULTIPLY        reduce using rule 91 (expr -> PLUS expr .)
    DIVIDE          reduce using rule 91 (expr -> PLUS expr .)
    EQ              reduce using rule 91 (expr -> PLUS expr .)
    NEQ             reduce using rule 91 (expr -> PLUS expr .)
    LT              reduce using rule 91 (expr -> PLUS expr .)
    LEQ             reduce using rule 91 (expr -> PLUS expr .)
    GT              reduce using rule 91 (expr -> PLUS expr .)
    GEQ             reduce using rule 91 (expr -> PLUS expr .)
    AND             reduce using rule 91 (expr -> PLUS expr .)
    OR              reduce using rule 91 (expr -> PLUS expr .)
    RPAREN          reduce using rule 91 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 91 (expr -> PLUS expr .)
    COMMA           reduce using rule 91 (expr -> PLUS expr .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MULTIPLY        [ shift and go to state 142 ]
  ! DIVIDE          [ shift and go to state 137 ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 134

    (89) expr -> expr AND . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 162
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 135

    (88) expr -> expr GEQ . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 163
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 136

    (87) expr -> expr GT . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 164
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 137

    (82) expr -> expr DIVIDE . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 165
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 138

    (90) expr -> expr OR . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 166
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 139

    (86) expr -> expr LEQ . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 167
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 140

    (85) expr -> expr LT . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 168
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 141

    (79) expr -> expr PLUS . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 169
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 142

    (81) expr -> expr MULTIPLY . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 170
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 143

    (83) expr -> expr EQ . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 171
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 144

    (80) expr -> expr MINUS . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 172
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 145

    (84) expr -> expr NEQ . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 173
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 146

    (93) expr -> NOT expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 93 (expr -> NOT expr .)
    PLUS            reduce using rule 93 (expr -> NOT expr .)
    MINUS           reduce using rule 93 (expr -> NOT expr .)
    MULTIPLY        reduce using rule 93 (expr -> NOT expr .)
    DIVIDE          reduce using rule 93 (expr -> NOT expr .)
    EQ              reduce using rule 93 (expr -> NOT expr .)
    NEQ             reduce using rule 93 (expr -> NOT expr .)
    LT              reduce using rule 93 (expr -> NOT expr .)
    LEQ             reduce using rule 93 (expr -> NOT expr .)
    GT              reduce using rule 93 (expr -> NOT expr .)
    GEQ             reduce using rule 93 (expr -> NOT expr .)
    AND             reduce using rule 93 (expr -> NOT expr .)
    OR              reduce using rule 93 (expr -> NOT expr .)
    RPAREN          reduce using rule 93 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 93 (expr -> NOT expr .)
    COMMA           reduce using rule 93 (expr -> NOT expr .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MULTIPLY        [ shift and go to state 142 ]
  ! DIVIDE          [ shift and go to state 137 ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 147

    (74) array_access -> primary LBRACKET expr . RBRACKET
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        shift and go to state 174
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 148

    (72) field_access -> primary DOT ID .

    LPAREN          reduce using rule 72 (field_access -> primary DOT ID .)
    ASSIGN          reduce using rule 72 (field_access -> primary DOT ID .)
    INC             reduce using rule 72 (field_access -> primary DOT ID .)
    DEC             reduce using rule 72 (field_access -> primary DOT ID .)
    DOT             reduce using rule 72 (field_access -> primary DOT ID .)
    LBRACKET        reduce using rule 72 (field_access -> primary DOT ID .)
    PLUS            reduce using rule 72 (field_access -> primary DOT ID .)
    MINUS           reduce using rule 72 (field_access -> primary DOT ID .)
    MULTIPLY        reduce using rule 72 (field_access -> primary DOT ID .)
    DIVIDE          reduce using rule 72 (field_access -> primary DOT ID .)
    EQ              reduce using rule 72 (field_access -> primary DOT ID .)
    NEQ             reduce using rule 72 (field_access -> primary DOT ID .)
    LT              reduce using rule 72 (field_access -> primary DOT ID .)
    LEQ             reduce using rule 72 (field_access -> primary DOT ID .)
    GT              reduce using rule 72 (field_access -> primary DOT ID .)
    GEQ             reduce using rule 72 (field_access -> primary DOT ID .)
    AND             reduce using rule 72 (field_access -> primary DOT ID .)
    OR              reduce using rule 72 (field_access -> primary DOT ID .)
    COMMA           reduce using rule 72 (field_access -> primary DOT ID .)
    RPAREN          reduce using rule 72 (field_access -> primary DOT ID .)
    SEMICOLON       reduce using rule 72 (field_access -> primary DOT ID .)
    RBRACKET        reduce using rule 72 (field_access -> primary DOT ID .)


state 149

    (44) stmt -> WHILE LPAREN expr . RPAREN stmt
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RPAREN          shift and go to state 175
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 150

    (63) primary -> NEW ID LPAREN . args_opt RPAREN
    (66) args_opt -> . arg_plus
    (67) args_opt -> .
    (68) arg_plus -> . arg_plus COMMA expr
    (69) arg_plus -> . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    RPAREN          reduce using rule 67 (args_opt -> .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 151
    args_opt                       shift and go to state 176
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    arg_plus                       shift and go to state 153
    assign                         shift and go to state 108

state 151

    (69) arg_plus -> expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    COMMA           reduce using rule 69 (arg_plus -> expr .)
    RPAREN          reduce using rule 69 (arg_plus -> expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 152

    (75) method_invocation -> field_access LPAREN args_opt . RPAREN

    RPAREN          shift and go to state 177


state 153

    (66) args_opt -> arg_plus .
    (68) arg_plus -> arg_plus . COMMA expr

    RPAREN          reduce using rule 66 (args_opt -> arg_plus .)
    COMMA           shift and go to state 178


state 154

    (107) stmt_expr_opt -> stmt_expr .

    SEMICOLON       reduce using rule 107 (stmt_expr_opt -> stmt_expr .)
    RPAREN          reduce using rule 107 (stmt_expr_opt -> stmt_expr .)


state 155

    (45) stmt -> FOR LPAREN stmt_expr_opt . SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt

    SEMICOLON       shift and go to state 179


state 156

    (62) primary -> LPAREN expr RPAREN .

    DOT             reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    MULTIPLY        reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    EQ              reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    LT              reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    LEQ             reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    GT              reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    GEQ             reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    AND             reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    OR              reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 62 (primary -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 62 (primary -> LPAREN expr RPAREN .)


state 157

    (42) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (43) stmt -> IF LPAREN expr . RPAREN stmt
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RPAREN          shift and go to state 180
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 158

    (94) assign -> lhs ASSIGN expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    SEMICOLON       reduce using rule 94 (assign -> lhs ASSIGN expr .)
    RPAREN          reduce using rule 94 (assign -> lhs ASSIGN expr .)
    RBRACKET        reduce using rule 94 (assign -> lhs ASSIGN expr .)
    COMMA           reduce using rule 94 (assign -> lhs ASSIGN expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138

  ! PLUS            [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! MULTIPLY        [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! EQ              [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! LT              [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! LEQ             [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! GT              [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! GEQ             [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! AND             [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]
  ! OR              [ reduce using rule 94 (assign -> lhs ASSIGN expr .) ]


state 159

    (99) new_array -> NEW type dim_expr_plus . dim_star
    (100) dim_expr_plus -> dim_expr_plus . dim_expr
    (103) dim_star -> . LBRACKET RBRACKET dim_star
    (104) dim_star -> .
    (102) dim_expr -> . LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 183
    PLUS            reduce using rule 104 (dim_star -> .)
    MINUS           reduce using rule 104 (dim_star -> .)
    MULTIPLY        reduce using rule 104 (dim_star -> .)
    DIVIDE          reduce using rule 104 (dim_star -> .)
    EQ              reduce using rule 104 (dim_star -> .)
    NEQ             reduce using rule 104 (dim_star -> .)
    LT              reduce using rule 104 (dim_star -> .)
    LEQ             reduce using rule 104 (dim_star -> .)
    GT              reduce using rule 104 (dim_star -> .)
    GEQ             reduce using rule 104 (dim_star -> .)
    AND             reduce using rule 104 (dim_star -> .)
    OR              reduce using rule 104 (dim_star -> .)
    SEMICOLON       reduce using rule 104 (dim_star -> .)
    RPAREN          reduce using rule 104 (dim_star -> .)
    RBRACKET        reduce using rule 104 (dim_star -> .)
    COMMA           reduce using rule 104 (dim_star -> .)

    dim_expr                       shift and go to state 182
    dim_star                       shift and go to state 181

state 160

    (101) dim_expr_plus -> dim_expr .

    LBRACKET        reduce using rule 101 (dim_expr_plus -> dim_expr .)
    PLUS            reduce using rule 101 (dim_expr_plus -> dim_expr .)
    MINUS           reduce using rule 101 (dim_expr_plus -> dim_expr .)
    MULTIPLY        reduce using rule 101 (dim_expr_plus -> dim_expr .)
    DIVIDE          reduce using rule 101 (dim_expr_plus -> dim_expr .)
    EQ              reduce using rule 101 (dim_expr_plus -> dim_expr .)
    NEQ             reduce using rule 101 (dim_expr_plus -> dim_expr .)
    LT              reduce using rule 101 (dim_expr_plus -> dim_expr .)
    LEQ             reduce using rule 101 (dim_expr_plus -> dim_expr .)
    GT              reduce using rule 101 (dim_expr_plus -> dim_expr .)
    GEQ             reduce using rule 101 (dim_expr_plus -> dim_expr .)
    AND             reduce using rule 101 (dim_expr_plus -> dim_expr .)
    OR              reduce using rule 101 (dim_expr_plus -> dim_expr .)
    SEMICOLON       reduce using rule 101 (dim_expr_plus -> dim_expr .)
    RPAREN          reduce using rule 101 (dim_expr_plus -> dim_expr .)
    RBRACKET        reduce using rule 101 (dim_expr_plus -> dim_expr .)
    COMMA           reduce using rule 101 (dim_expr_plus -> dim_expr .)


state 161

    (102) dim_expr -> LBRACKET . expr RBRACKET
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 184
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 162

    (89) expr -> expr AND expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 89 (expr -> expr AND expr .)
    AND             reduce using rule 89 (expr -> expr AND expr .)
    OR              reduce using rule 89 (expr -> expr AND expr .)
    RPAREN          reduce using rule 89 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 89 (expr -> expr AND expr .)
    COMMA           reduce using rule 89 (expr -> expr AND expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135

  ! PLUS            [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! MULTIPLY        [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! NEQ             [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! LEQ             [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! GEQ             [ reduce using rule 89 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 163

    (88) expr -> expr GEQ expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 88 (expr -> expr GEQ expr .)
    EQ              reduce using rule 88 (expr -> expr GEQ expr .)
    NEQ             reduce using rule 88 (expr -> expr GEQ expr .)
    LT              reduce using rule 88 (expr -> expr GEQ expr .)
    LEQ             reduce using rule 88 (expr -> expr GEQ expr .)
    GT              reduce using rule 88 (expr -> expr GEQ expr .)
    GEQ             reduce using rule 88 (expr -> expr GEQ expr .)
    AND             reduce using rule 88 (expr -> expr GEQ expr .)
    OR              reduce using rule 88 (expr -> expr GEQ expr .)
    RPAREN          reduce using rule 88 (expr -> expr GEQ expr .)
    SEMICOLON       reduce using rule 88 (expr -> expr GEQ expr .)
    COMMA           reduce using rule 88 (expr -> expr GEQ expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137

  ! PLUS            [ reduce using rule 88 (expr -> expr GEQ expr .) ]
  ! MINUS           [ reduce using rule 88 (expr -> expr GEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 88 (expr -> expr GEQ expr .) ]
  ! DIVIDE          [ reduce using rule 88 (expr -> expr GEQ expr .) ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 164

    (87) expr -> expr GT expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 87 (expr -> expr GT expr .)
    EQ              reduce using rule 87 (expr -> expr GT expr .)
    NEQ             reduce using rule 87 (expr -> expr GT expr .)
    LT              reduce using rule 87 (expr -> expr GT expr .)
    LEQ             reduce using rule 87 (expr -> expr GT expr .)
    GT              reduce using rule 87 (expr -> expr GT expr .)
    GEQ             reduce using rule 87 (expr -> expr GT expr .)
    AND             reduce using rule 87 (expr -> expr GT expr .)
    OR              reduce using rule 87 (expr -> expr GT expr .)
    RPAREN          reduce using rule 87 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 87 (expr -> expr GT expr .)
    COMMA           reduce using rule 87 (expr -> expr GT expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137

  ! PLUS            [ reduce using rule 87 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 87 (expr -> expr GT expr .) ]
  ! MULTIPLY        [ reduce using rule 87 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 87 (expr -> expr GT expr .) ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 165

    (82) expr -> expr DIVIDE expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 82 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 82 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 82 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 82 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 82 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 82 (expr -> expr DIVIDE expr .)
    NEQ             reduce using rule 82 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 82 (expr -> expr DIVIDE expr .)
    LEQ             reduce using rule 82 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 82 (expr -> expr DIVIDE expr .)
    GEQ             reduce using rule 82 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 82 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 82 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 82 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 82 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 82 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MULTIPLY        [ shift and go to state 142 ]
  ! DIVIDE          [ shift and go to state 137 ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 166

    (90) expr -> expr OR expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 90 (expr -> expr OR expr .)
    OR              reduce using rule 90 (expr -> expr OR expr .)
    RPAREN          reduce using rule 90 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 90 (expr -> expr OR expr .)
    COMMA           reduce using rule 90 (expr -> expr OR expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134

  ! PLUS            [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! MULTIPLY        [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! NEQ             [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! LEQ             [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! GEQ             [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 90 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 138 ]


state 167

    (86) expr -> expr LEQ expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 86 (expr -> expr LEQ expr .)
    EQ              reduce using rule 86 (expr -> expr LEQ expr .)
    NEQ             reduce using rule 86 (expr -> expr LEQ expr .)
    LT              reduce using rule 86 (expr -> expr LEQ expr .)
    LEQ             reduce using rule 86 (expr -> expr LEQ expr .)
    GT              reduce using rule 86 (expr -> expr LEQ expr .)
    GEQ             reduce using rule 86 (expr -> expr LEQ expr .)
    AND             reduce using rule 86 (expr -> expr LEQ expr .)
    OR              reduce using rule 86 (expr -> expr LEQ expr .)
    RPAREN          reduce using rule 86 (expr -> expr LEQ expr .)
    SEMICOLON       reduce using rule 86 (expr -> expr LEQ expr .)
    COMMA           reduce using rule 86 (expr -> expr LEQ expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137

  ! PLUS            [ reduce using rule 86 (expr -> expr LEQ expr .) ]
  ! MINUS           [ reduce using rule 86 (expr -> expr LEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 86 (expr -> expr LEQ expr .) ]
  ! DIVIDE          [ reduce using rule 86 (expr -> expr LEQ expr .) ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 168

    (85) expr -> expr LT expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 85 (expr -> expr LT expr .)
    EQ              reduce using rule 85 (expr -> expr LT expr .)
    NEQ             reduce using rule 85 (expr -> expr LT expr .)
    LT              reduce using rule 85 (expr -> expr LT expr .)
    LEQ             reduce using rule 85 (expr -> expr LT expr .)
    GT              reduce using rule 85 (expr -> expr LT expr .)
    GEQ             reduce using rule 85 (expr -> expr LT expr .)
    AND             reduce using rule 85 (expr -> expr LT expr .)
    OR              reduce using rule 85 (expr -> expr LT expr .)
    RPAREN          reduce using rule 85 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 85 (expr -> expr LT expr .)
    COMMA           reduce using rule 85 (expr -> expr LT expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137

  ! PLUS            [ reduce using rule 85 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 85 (expr -> expr LT expr .) ]
  ! MULTIPLY        [ reduce using rule 85 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 85 (expr -> expr LT expr .) ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 169

    (79) expr -> expr PLUS expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 79 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 79 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 79 (expr -> expr PLUS expr .)
    EQ              reduce using rule 79 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 79 (expr -> expr PLUS expr .)
    LT              reduce using rule 79 (expr -> expr PLUS expr .)
    LEQ             reduce using rule 79 (expr -> expr PLUS expr .)
    GT              reduce using rule 79 (expr -> expr PLUS expr .)
    GEQ             reduce using rule 79 (expr -> expr PLUS expr .)
    AND             reduce using rule 79 (expr -> expr PLUS expr .)
    OR              reduce using rule 79 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 79 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 79 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 79 (expr -> expr PLUS expr .)
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137

  ! MULTIPLY        [ reduce using rule 79 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 79 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 144 ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 170

    (81) expr -> expr MULTIPLY expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 81 (expr -> expr MULTIPLY expr .)
    PLUS            reduce using rule 81 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 81 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 81 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 81 (expr -> expr MULTIPLY expr .)
    EQ              reduce using rule 81 (expr -> expr MULTIPLY expr .)
    NEQ             reduce using rule 81 (expr -> expr MULTIPLY expr .)
    LT              reduce using rule 81 (expr -> expr MULTIPLY expr .)
    LEQ             reduce using rule 81 (expr -> expr MULTIPLY expr .)
    GT              reduce using rule 81 (expr -> expr MULTIPLY expr .)
    GEQ             reduce using rule 81 (expr -> expr MULTIPLY expr .)
    AND             reduce using rule 81 (expr -> expr MULTIPLY expr .)
    OR              reduce using rule 81 (expr -> expr MULTIPLY expr .)
    RPAREN          reduce using rule 81 (expr -> expr MULTIPLY expr .)
    SEMICOLON       reduce using rule 81 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 81 (expr -> expr MULTIPLY expr .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MULTIPLY        [ shift and go to state 142 ]
  ! DIVIDE          [ shift and go to state 137 ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 171

    (83) expr -> expr EQ expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 83 (expr -> expr EQ expr .)
    EQ              reduce using rule 83 (expr -> expr EQ expr .)
    NEQ             reduce using rule 83 (expr -> expr EQ expr .)
    AND             reduce using rule 83 (expr -> expr EQ expr .)
    OR              reduce using rule 83 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 83 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 83 (expr -> expr EQ expr .)
    COMMA           reduce using rule 83 (expr -> expr EQ expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135

  ! PLUS            [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! MULTIPLY        [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! LEQ             [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! GEQ             [ reduce using rule 83 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 172

    (80) expr -> expr MINUS expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 80 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 80 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 80 (expr -> expr MINUS expr .)
    EQ              reduce using rule 80 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 80 (expr -> expr MINUS expr .)
    LT              reduce using rule 80 (expr -> expr MINUS expr .)
    LEQ             reduce using rule 80 (expr -> expr MINUS expr .)
    GT              reduce using rule 80 (expr -> expr MINUS expr .)
    GEQ             reduce using rule 80 (expr -> expr MINUS expr .)
    AND             reduce using rule 80 (expr -> expr MINUS expr .)
    OR              reduce using rule 80 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 80 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 80 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 80 (expr -> expr MINUS expr .)
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137

  ! MULTIPLY        [ reduce using rule 80 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 80 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 144 ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! LT              [ shift and go to state 140 ]
  ! LEQ             [ shift and go to state 139 ]
  ! GT              [ shift and go to state 136 ]
  ! GEQ             [ shift and go to state 135 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 173

    (84) expr -> expr NEQ expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        reduce using rule 84 (expr -> expr NEQ expr .)
    EQ              reduce using rule 84 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 84 (expr -> expr NEQ expr .)
    AND             reduce using rule 84 (expr -> expr NEQ expr .)
    OR              reduce using rule 84 (expr -> expr NEQ expr .)
    RPAREN          reduce using rule 84 (expr -> expr NEQ expr .)
    SEMICOLON       reduce using rule 84 (expr -> expr NEQ expr .)
    COMMA           reduce using rule 84 (expr -> expr NEQ expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135

  ! PLUS            [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! MULTIPLY        [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! DIVIDE          [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! LT              [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! LEQ             [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! GT              [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! GEQ             [ reduce using rule 84 (expr -> expr NEQ expr .) ]
  ! EQ              [ shift and go to state 143 ]
  ! NEQ             [ shift and go to state 145 ]
  ! AND             [ shift and go to state 134 ]
  ! OR              [ shift and go to state 138 ]


state 174

    (74) array_access -> primary LBRACKET expr RBRACKET .

    ASSIGN          reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    INC             reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    DEC             reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    DOT             reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    MULTIPLY        reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    EQ              reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    NEQ             reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    LT              reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    LEQ             reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    GT              reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    GEQ             reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    AND             reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    OR              reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 74 (array_access -> primary LBRACKET expr RBRACKET .)


state 175

    (44) stmt -> WHILE LPAREN expr RPAREN . stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . IF LPAREN expr RPAREN stmt
    (44) stmt -> . WHILE LPAREN expr RPAREN stmt
    (45) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (46) stmt -> . RETURN expr_opt SEMICOLON
    (47) stmt -> . stmt_expr SEMICOLON
    (48) stmt -> . BREAK SEMICOLON
    (49) stmt -> . CONTINUE SEMICOLON
    (50) stmt -> . block
    (51) stmt -> . var_decl
    (52) stmt -> . error SEMICOLON
    (105) stmt_expr -> . assign
    (106) stmt_expr -> . method_invocation
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE
    (24) var_decl -> . type var_list SEMICOLON
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE

    IF              shift and go to state 86
    WHILE           shift and go to state 67
    FOR             shift and go to state 82
    RETURN          shift and go to state 65
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 91
    error           shift and go to state 186
    LBRACE          shift and go to state 60
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 85
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 80
    array_access                   shift and go to state 71
    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 185
    primary                        shift and go to state 66
    literal                        shift and go to state 77
    lhs                            shift and go to state 92
    var_decl                       shift and go to state 88
    method_invocation              shift and go to state 78
    type                           shift and go to state 79
    assign                         shift and go to state 95
    block                          shift and go to state 96

state 176

    (63) primary -> NEW ID LPAREN args_opt . RPAREN

    RPAREN          shift and go to state 187


state 177

    (75) method_invocation -> field_access LPAREN args_opt RPAREN .

    DOT             reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    LBRACKET        reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    RPAREN          reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    PLUS            reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    MINUS           reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    MULTIPLY        reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    DIVIDE          reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    EQ              reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    NEQ             reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    LT              reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    LEQ             reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    GT              reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    GEQ             reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    AND             reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    OR              reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    RBRACKET        reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    COMMA           reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)
    SEMICOLON       reduce using rule 75 (method_invocation -> field_access LPAREN args_opt RPAREN .)


state 178

    (68) arg_plus -> arg_plus COMMA . expr
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 188
    primary                        shift and go to state 99
    array_access                   shift and go to state 71
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 179

    (45) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON . expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (109) expr_opt -> . expr
    (110) expr_opt -> .
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    SEMICOLON       reduce using rule 110 (expr_opt -> .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 107
    array_access                   shift and go to state 71
    primary                        shift and go to state 99
    literal                        shift and go to state 77
    expr_opt                       shift and go to state 189
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 180

    (42) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (43) stmt -> IF LPAREN expr RPAREN . stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . IF LPAREN expr RPAREN stmt
    (44) stmt -> . WHILE LPAREN expr RPAREN stmt
    (45) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (46) stmt -> . RETURN expr_opt SEMICOLON
    (47) stmt -> . stmt_expr SEMICOLON
    (48) stmt -> . BREAK SEMICOLON
    (49) stmt -> . CONTINUE SEMICOLON
    (50) stmt -> . block
    (51) stmt -> . var_decl
    (52) stmt -> . error SEMICOLON
    (105) stmt_expr -> . assign
    (106) stmt_expr -> . method_invocation
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE
    (24) var_decl -> . type var_list SEMICOLON
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE

    IF              shift and go to state 86
    WHILE           shift and go to state 67
    FOR             shift and go to state 82
    RETURN          shift and go to state 65
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 91
    error           shift and go to state 186
    LBRACE          shift and go to state 60
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 85
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 80
    array_access                   shift and go to state 71
    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 190
    primary                        shift and go to state 66
    literal                        shift and go to state 77
    lhs                            shift and go to state 92
    var_decl                       shift and go to state 88
    method_invocation              shift and go to state 78
    type                           shift and go to state 79
    assign                         shift and go to state 95
    block                          shift and go to state 96

state 181

    (99) new_array -> NEW type dim_expr_plus dim_star .

    PLUS            reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    MINUS           reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    MULTIPLY        reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    DIVIDE          reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    EQ              reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    NEQ             reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    LT              reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    LEQ             reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    GT              reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    GEQ             reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    AND             reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    OR              reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    SEMICOLON       reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    RPAREN          reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    RBRACKET        reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)
    COMMA           reduce using rule 99 (new_array -> NEW type dim_expr_plus dim_star .)


state 182

    (100) dim_expr_plus -> dim_expr_plus dim_expr .

    LBRACKET        reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    PLUS            reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    MINUS           reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    MULTIPLY        reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    DIVIDE          reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    EQ              reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    NEQ             reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    LT              reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    LEQ             reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    GT              reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    GEQ             reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    AND             reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    OR              reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    SEMICOLON       reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    RPAREN          reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    RBRACKET        reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)
    COMMA           reduce using rule 100 (dim_expr_plus -> dim_expr_plus dim_expr .)


state 183

    (103) dim_star -> LBRACKET . RBRACKET dim_star
    (102) dim_expr -> LBRACKET . expr RBRACKET
    (76) expr -> . primary
    (77) expr -> . assign
    (78) expr -> . new_array
    (79) expr -> . expr PLUS expr
    (80) expr -> . expr MINUS expr
    (81) expr -> . expr MULTIPLY expr
    (82) expr -> . expr DIVIDE expr
    (83) expr -> . expr EQ expr
    (84) expr -> . expr NEQ expr
    (85) expr -> . expr LT expr
    (86) expr -> . expr LEQ expr
    (87) expr -> . expr GT expr
    (88) expr -> . expr GEQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . PLUS expr
    (92) expr -> . MINUS expr
    (93) expr -> . NOT expr
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (99) new_array -> . NEW type dim_expr_plus dim_star
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 191
    PLUS            shift and go to state 103
    MINUS           shift and go to state 101
    NOT             shift and go to state 110
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 100
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87
    ID              shift and go to state 106

    new_array                      shift and go to state 98
    field_access                   shift and go to state 105
    expr                           shift and go to state 184
    primary                        shift and go to state 99
    array_access                   shift and go to state 71
    literal                        shift and go to state 77
    lhs                            shift and go to state 109
    method_invocation              shift and go to state 104
    assign                         shift and go to state 108

state 184

    (102) dim_expr -> LBRACKET expr . RBRACKET
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    RBRACKET        shift and go to state 192
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 185

    (44) stmt -> WHILE LPAREN expr RPAREN stmt .

    RBRACE          reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    error           reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    CONTINUE        reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INC             reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DEC             reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INT             reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FLOAT           reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ID              reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    THIS            reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SUPER           reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INT_CONST       reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FLOAT_CONST     reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING_CONST    reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NULL            reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 44 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 186

    (52) stmt -> error . SEMICOLON

    SEMICOLON       shift and go to state 127


state 187

    (63) primary -> NEW ID LPAREN args_opt RPAREN .

    DOT             reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    LBRACKET        reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    PLUS            reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    MINUS           reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    MULTIPLY        reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    DIVIDE          reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    EQ              reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    NEQ             reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    LT              reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    LEQ             reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    GT              reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    GEQ             reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    AND             reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    OR              reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    SEMICOLON       reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    RPAREN          reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    RBRACKET        reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)
    COMMA           reduce using rule 63 (primary -> NEW ID LPAREN args_opt RPAREN .)


state 188

    (68) arg_plus -> arg_plus COMMA expr .
    (79) expr -> expr . PLUS expr
    (80) expr -> expr . MINUS expr
    (81) expr -> expr . MULTIPLY expr
    (82) expr -> expr . DIVIDE expr
    (83) expr -> expr . EQ expr
    (84) expr -> expr . NEQ expr
    (85) expr -> expr . LT expr
    (86) expr -> expr . LEQ expr
    (87) expr -> expr . GT expr
    (88) expr -> expr . GEQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr

    COMMA           reduce using rule 68 (arg_plus -> arg_plus COMMA expr .)
    RPAREN          reduce using rule 68 (arg_plus -> arg_plus COMMA expr .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 144
    MULTIPLY        shift and go to state 142
    DIVIDE          shift and go to state 137
    EQ              shift and go to state 143
    NEQ             shift and go to state 145
    LT              shift and go to state 140
    LEQ             shift and go to state 139
    GT              shift and go to state 136
    GEQ             shift and go to state 135
    AND             shift and go to state 134
    OR              shift and go to state 138


state 189

    (45) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt . SEMICOLON stmt_expr_opt RPAREN stmt

    SEMICOLON       shift and go to state 193


state 190

    (42) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt
    (43) stmt -> IF LPAREN expr RPAREN stmt .

    ELSE            shift and go to state 194
    RBRACE          reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    error           reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    IF              reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    CONTINUE        reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    INC             reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    DEC             reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    INT             reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    FLOAT           reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    ID              reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    THIS            reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    SUPER           reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    INT_CONST       reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    FLOAT_CONST     reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    STRING_CONST    reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    NULL            reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .)

  ! ELSE            [ reduce using rule 43 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 191

    (103) dim_star -> LBRACKET RBRACKET . dim_star
    (103) dim_star -> . LBRACKET RBRACKET dim_star
    (104) dim_star -> .

    LBRACKET        shift and go to state 195
    PLUS            reduce using rule 104 (dim_star -> .)
    MINUS           reduce using rule 104 (dim_star -> .)
    MULTIPLY        reduce using rule 104 (dim_star -> .)
    DIVIDE          reduce using rule 104 (dim_star -> .)
    EQ              reduce using rule 104 (dim_star -> .)
    NEQ             reduce using rule 104 (dim_star -> .)
    LT              reduce using rule 104 (dim_star -> .)
    LEQ             reduce using rule 104 (dim_star -> .)
    GT              reduce using rule 104 (dim_star -> .)
    GEQ             reduce using rule 104 (dim_star -> .)
    AND             reduce using rule 104 (dim_star -> .)
    OR              reduce using rule 104 (dim_star -> .)
    SEMICOLON       reduce using rule 104 (dim_star -> .)
    RPAREN          reduce using rule 104 (dim_star -> .)
    RBRACKET        reduce using rule 104 (dim_star -> .)
    COMMA           reduce using rule 104 (dim_star -> .)

    dim_star                       shift and go to state 196

state 192

    (102) dim_expr -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    MULTIPLY        reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    EQ              reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    NEQ             reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    LT              reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    LEQ             reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    GT              reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    GEQ             reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 102 (dim_expr -> LBRACKET expr RBRACKET .)


state 193

    (45) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON . stmt_expr_opt RPAREN stmt
    (107) stmt_expr_opt -> . stmt_expr
    (108) stmt_expr_opt -> .
    (105) stmt_expr -> . assign
    (106) stmt_expr -> . method_invocation
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE

    RPAREN          reduce using rule 108 (stmt_expr_opt -> .)
    INC             shift and go to state 97
    DEC             shift and go to state 70
    ID              shift and go to state 106
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 80
    primary                        shift and go to state 66
    stmt_expr_opt                  shift and go to state 197
    stmt_expr                      shift and go to state 154
    literal                        shift and go to state 77
    lhs                            shift and go to state 92
    method_invocation              shift and go to state 78
    array_access                   shift and go to state 71
    assign                         shift and go to state 95

state 194

    (42) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . IF LPAREN expr RPAREN stmt
    (44) stmt -> . WHILE LPAREN expr RPAREN stmt
    (45) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (46) stmt -> . RETURN expr_opt SEMICOLON
    (47) stmt -> . stmt_expr SEMICOLON
    (48) stmt -> . BREAK SEMICOLON
    (49) stmt -> . CONTINUE SEMICOLON
    (50) stmt -> . block
    (51) stmt -> . var_decl
    (52) stmt -> . error SEMICOLON
    (105) stmt_expr -> . assign
    (106) stmt_expr -> . method_invocation
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE
    (24) var_decl -> . type var_list SEMICOLON
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE

    IF              shift and go to state 86
    WHILE           shift and go to state 67
    FOR             shift and go to state 82
    RETURN          shift and go to state 65
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 91
    error           shift and go to state 186
    LBRACE          shift and go to state 60
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 85
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 80
    array_access                   shift and go to state 71
    stmt_expr                      shift and go to state 76
    stmt                           shift and go to state 198
    primary                        shift and go to state 66
    literal                        shift and go to state 77
    lhs                            shift and go to state 92
    var_decl                       shift and go to state 88
    method_invocation              shift and go to state 78
    type                           shift and go to state 79
    assign                         shift and go to state 95
    block                          shift and go to state 96

state 195

    (103) dim_star -> LBRACKET . RBRACKET dim_star

    RBRACKET        shift and go to state 191


state 196

    (103) dim_star -> LBRACKET RBRACKET dim_star .

    PLUS            reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    MINUS           reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    MULTIPLY        reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    DIVIDE          reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    EQ              reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    NEQ             reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    LT              reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    LEQ             reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    GT              reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    GEQ             reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    AND             reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    OR              reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    SEMICOLON       reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    RPAREN          reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    RBRACKET        reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)
    COMMA           reduce using rule 103 (dim_star -> LBRACKET RBRACKET dim_star .)


state 197

    (45) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt . RPAREN stmt

    RPAREN          shift and go to state 199


state 198

    (42) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    RBRACE          reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    error           reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    IF              reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BREAK           reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    CONTINUE        reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INC             reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    DEC             reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INT             reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BOOLEAN         reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FLOAT           reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ID              reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    THIS            reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SUPER           reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NEW             reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INT_CONST       reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FLOAT_CONST     reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    STRING_CONST    reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NULL            reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    TRUE            reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FALSE           reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 42 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 199

    (45) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN . stmt
    (42) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (43) stmt -> . IF LPAREN expr RPAREN stmt
    (44) stmt -> . WHILE LPAREN expr RPAREN stmt
    (45) stmt -> . FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt
    (46) stmt -> . RETURN expr_opt SEMICOLON
    (47) stmt -> . stmt_expr SEMICOLON
    (48) stmt -> . BREAK SEMICOLON
    (49) stmt -> . CONTINUE SEMICOLON
    (50) stmt -> . block
    (51) stmt -> . var_decl
    (52) stmt -> . error SEMICOLON
    (105) stmt_expr -> . assign
    (106) stmt_expr -> . method_invocation
    (38) block -> . LBRACE stmt_list RBRACE
    (39) block -> . LBRACE stmt_list error RBRACE
    (24) var_decl -> . type var_list SEMICOLON
    (94) assign -> . lhs ASSIGN expr
    (95) assign -> . lhs INC
    (96) assign -> . INC lhs
    (97) assign -> . lhs DEC
    (98) assign -> . DEC lhs
    (75) method_invocation -> . field_access LPAREN args_opt RPAREN
    (25) type -> . INT
    (26) type -> . BOOLEAN
    (27) type -> . FLOAT
    (28) type -> . ID
    (70) lhs -> . field_access
    (71) lhs -> . array_access
    (72) field_access -> . primary DOT ID
    (73) field_access -> . ID
    (74) array_access -> . primary LBRACKET expr RBRACKET
    (59) primary -> . literal
    (60) primary -> . THIS
    (61) primary -> . SUPER
    (62) primary -> . LPAREN expr RPAREN
    (63) primary -> . NEW ID LPAREN args_opt RPAREN
    (64) primary -> . lhs
    (65) primary -> . method_invocation
    (53) literal -> . INT_CONST
    (54) literal -> . FLOAT_CONST
    (55) literal -> . STRING_CONST
    (56) literal -> . NULL
    (57) literal -> . TRUE
    (58) literal -> . FALSE

    IF              shift and go to state 86
    WHILE           shift and go to state 67
    FOR             shift and go to state 82
    RETURN          shift and go to state 65
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 91
    error           shift and go to state 186
    LBRACE          shift and go to state 60
    INC             shift and go to state 97
    DEC             shift and go to state 70
    INT             shift and go to state 27
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 29
    ID              shift and go to state 85
    THIS            shift and go to state 90
    SUPER           shift and go to state 94
    LPAREN          shift and go to state 84
    NEW             shift and go to state 69
    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 68
    STRING_CONST    shift and go to state 72
    NULL            shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 87

    field_access                   shift and go to state 80
    primary                        shift and go to state 66
    array_access                   shift and go to state 71
    stmt                           shift and go to state 200
    stmt_expr                      shift and go to state 76
    literal                        shift and go to state 77
    lhs                            shift and go to state 92
    var_decl                       shift and go to state 88
    method_invocation              shift and go to state 78
    type                           shift and go to state 79
    assign                         shift and go to state 95
    block                          shift and go to state 96

state 200

    (45) stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .

    RBRACE          reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    error           reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    IF              reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    WHILE           reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FOR             reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    RETURN          reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    BREAK           reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    CONTINUE        reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    LBRACE          reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    INC             reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    DEC             reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    INT             reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    BOOLEAN         reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FLOAT           reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    ID              reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    THIS            reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    SUPER           reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    LPAREN          reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    NEW             reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    INT_CONST       reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FLOAT_CONST     reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    STRING_CONST    reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    NULL            reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    TRUE            reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    FALSE           reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)
    ELSE            reduce using rule 45 (stmt -> FOR LPAREN stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RPAREN stmt .)

